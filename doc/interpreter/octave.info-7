This is octave.info, produced by makeinfo version 5.2 from octave.texi.

START-INFO-DIR-ENTRY
* Octave: (octave).           Interactive language for numerical computations.

END-INFO-DIR-ENTRY

   Copyright (C) 1996-2013 John W. Eaton.

   Permission is granted to make and distribute verbatim copies of this
manual provided the copyright notice and this permission notice are
preserved on all copies.

   Permission is granted to copy and distribute modified versions of
this manual under the conditions for verbatim copying, provided that the
entire resulting derived work is distributed under the terms of a
permission notice identical to this one.

   Permission is granted to copy and distribute translations of this
manual into another language, under the above conditions for modified
versions.


File: octave.info,  Node: Creating Sparse Matrices in Oct-Files,  Next: Using Sparse Matrices in Oct-Files,  Prev: Array and Sparse Class Differences,  Up: Sparse Matrices in Oct-Files

A.1.6.2 Creating Sparse Matrices in Oct-Files
.............................................

There are several useful alternatives for creating a sparse matrix.  The
first is to create three vectors representing the row index, column
index, and data values, and from these create the matrix.  The second
alternative is to create a sparse matrix with the appropriate amount of
space and then fill in the values.  Both techniques have their
advantages and disadvantages.

   Below is an example of creating a small sparse matrix using the first
technique

     int nz, nr, nc;
     nz = 4, nr = 3, nc = 4;

     ColumnVector ridx (nz);
     ColumnVector cidx (nz);
     ColumnVector data (nz);

     ridx(0) = 1; cidx(0) = 1; data(0) = 1;
     ridx(1) = 2; cidx(1) = 2; data(1) = 2;
     ridx(2) = 2; cidx(2) = 4; data(2) = 3;
     ridx(3) = 3; cidx(3) = 4; data(3) = 4;
     SparseMatrix sm (data, ridx, cidx, nr, nc);

which creates the matrix given in section *note Storage of Sparse
Matrices::.  Note that the compressed matrix format is not used at the
time of the creation of the matrix itself, but is used internally.

   As discussed in the chapter on Sparse Matrices, the values of the
sparse matrix are stored in increasing column-major ordering.  Although
the data passed by the user need not respect this requirement,
pre-sorting the data will significantly speed up creation of the sparse
matrix.

   The disadvantage of this technique for creating a sparse matrix is
that there is a brief time when two copies of the data exist.  For
extremely memory constrained problems this may not be the best technique
for creating a sparse matrix.

   The alternative is to first create a sparse matrix with the desired
number of non-zero elements and then later fill those elements in.
Sample code:

     int nz, nr, nc;
     nz = 4, nr = 3, nc = 4;
     SparseMatrix sm (nr, nc, nz);
     sm(0,0) = 1; sm(0,1) = 2; sm(1,3) = 3; sm(2,3) = 4;

   This creates the same matrix as previously.  Again, although not
strictly necessary, it is significantly faster if the sparse matrix is
created and the elements are added in column-major ordering.  The reason
for this is that when elements are inserted at the end of the current
list of known elements then no element in the matrix needs to be moved
to allow the new element to be inserted; Only the column indexes need to
be updated.

   There are a few further points to note about this method of creating
a sparse matrix.  First, it is possible to create a sparse matrix with
fewer elements than are actually inserted in the matrix.  Therefore,

     int nr, nc;
     nr = 3, nc = 4;
     SparseMatrix sm (nr, nc, 0);
     sm(0,0) = 1; sm(0,1) = 2; sm(1,3) = 3; sm(2,3) = 4;

is perfectly valid.  However, it is a very bad idea because as each new
element is added to the sparse matrix the matrix needs to request more
space and reallocate memory.  This is an expensive operation, that will
significantly slow this means of creating a sparse matrix.  Furthermore,
it is possible to create a sparse matrix with too much storage, so
having NZ greater than 4 is also valid.  The disadvantage is that the
matrix occupies more memory than strictly needed.

   It is not always possible to know the number of non-zero elements
prior to filling a matrix.  For this reason the additional unused
storage of a sparse matrix can be removed after its creation with the
'maybe_compress' function.  In addition, 'maybe_compress' can deallocate
the unused storage, but it can also remove zero elements from the
matrix.  The removal of zero elements from the matrix is controlled by
setting the argument of the 'maybe_compress' function to be 'true'.
However, the cost of removing the zeros is high because it implies
re-sorting the elements.  If possible, it is better if the user does not
add the unnecessary zeros in the first place.  An example of the use of
'maybe_compress' is

     int nz, nr, nc;
     nz = 6, nr = 3, nc = 4;

     SparseMatrix sm1 (nr, nc, nz);
     sm1(0,0) = 1; sm1(0,1) = 2; sm1(1,3) = 3; sm1(2,3) = 4;
     sm1.maybe_compress ();  // No zero elements were added

     SparseMatrix sm2 (nr, nc, nz);
     sm2(0,0) = 1; sm2(0,1) = 2; sm(0,2) = 0; sm(1,2) = 0;
     sm1(1,3) = 3; sm1(2,3) = 4;
     sm2.maybe_compress (true);  // Zero elements were added

   The use of the 'maybe_compress' function should be avoided if
possible as it will slow the creation of the matrix.

   A third means of creating a sparse matrix is to work directly with
the data in compressed row format.  An example of this technique might
be

     octave_value arg;
     ...
     int nz, nr, nc;
     nz = 6, nr = 3, nc = 4;   // Assume we know the max # nz
     SparseMatrix sm (nr, nc, nz);
     Matrix m = arg.matrix_value ();

     int ii = 0;
     sm.cidx (0) = 0;
     for (int j = 1; j < nc; j++)
       {
         for (int i = 0; i < nr; i++)
           {
             double tmp = foo (m(i,j));
             if (tmp != 0.)
               {
                 sm.data(ii) = tmp;
                 sm.ridx(ii) = i;
                 ii++;
               }
           }
         sm.cidx(j+1) = ii;
      }
     sm.maybe_compress ();  // If don't know a priori the final # of nz.

which is probably the most efficient means of creating a sparse matrix.

   Finally, it might sometimes arise that the amount of storage
initially created is insufficient to completely store the sparse matrix.
Therefore, the method 'change_capacity' exists to reallocate the sparse
memory.  The above example would then be modified as

     octave_value arg;
     ...
     int nz, nr, nc;
     nz = 6, nr = 3, nc = 4;   // Assume we know the max # nz
     SparseMatrix sm (nr, nc, nz);
     Matrix m = arg.matrix_value ();

     int ii = 0;
     sm.cidx (0) = 0;
     for (int j = 1; j < nc; j++)
       {
         for (int i = 0; i < nr; i++)
           {
             double tmp = foo (m(i,j));
             if (tmp != 0.)
               {
                 if (ii == nz)
                   {
                     nz += 2;   // Add 2 more elements
                     sm.change_capacity (nz);
                   }
                 sm.data(ii) = tmp;
                 sm.ridx(ii) = i;
                 ii++;
               }
           }
         sm.cidx(j+1) = ii;
      }
     sm.maybe_mutate ();  // If don't know a priori the final # of nz.

   Note that both increasing and decreasing the number of non-zero
elements in a sparse matrix is expensive as it involves memory
reallocation.  Also as parts of the matrix, though not its entirety,
exist as old and new copies at the same time, additional memory is
needed.  Therefore, if possible this should be avoided.


File: octave.info,  Node: Using Sparse Matrices in Oct-Files,  Prev: Creating Sparse Matrices in Oct-Files,  Up: Sparse Matrices in Oct-Files

A.1.6.3 Using Sparse Matrices in Oct-Files
..........................................

Most of the same operators and functions on sparse matrices that are
available from the Octave command line are also available within
oct-files.  The basic means of extracting a sparse matrix from an
'octave_value' and returning it as an 'octave_value', can be seen in the
following example.

     octave_value_list retval;

     SparseMatrix sm = args(0).sparse_matrix_value ();
     SparseComplexMatrix scm =
         args(1).sparse_complex_matrix_value ();
     SparseBoolMatrix sbm = args(2).sparse_bool_matrix_value ();
     ...
     retval(2) = sbm;
     retval(1) = scm;
     retval(0) = sm;

   The conversion to an 'octave_value' is handled by the sparse
'octave_value' constructors, and so no special care is needed.


File: octave.info,  Node: Accessing Global Variables in Oct-Files,  Next: Calling Octave Functions from Oct-Files,  Prev: Sparse Matrices in Oct-Files,  Up: Oct-Files

A.1.7 Accessing Global Variables in Oct-Files
---------------------------------------------

Global variables allow variables in the global scope to be accessed.
Global variables can be accessed within oct-files by using the support
functions 'get_global_value' and 'set_global_value'.  'get_global_value'
takes two arguments, the first is a string representing the variable
name to obtain.  The second argument is a boolean argument specifying
what to do if no global variable of the desired name is found.  An
example of the use of these two functions is

     #include <octave/oct.h>

     DEFUN_DLD (globaldemo, args, , "Global Demo")
     {
       octave_value retval;
       int nargin = args.length ();

       if (nargin != 1)
         print_usage ();
       else
         {
           std::string s = args(0).string_value ();
           if (! error_state)
             {
               octave_value tmp = get_global_value (s, true);
               if (tmp.is_defined ())
                 retval = tmp;
               else
                 retval = "Global variable not found";

               set_global_value ("a", 42.0);
             }
         }
       return retval;
     }


   An example of its use is

     global a b
     b = 10;
     globaldemo ("b")
     => 10
     globaldemo ("c")
     => "Global variable not found"
     num2str (a)
     => 42


File: octave.info,  Node: Calling Octave Functions from Oct-Files,  Next: Calling External Code from Oct-Files,  Prev: Accessing Global Variables in Oct-Files,  Up: Oct-Files

A.1.8 Calling Octave Functions from Oct-Files
---------------------------------------------

There is often a need to be able to call another Octave function from
within an oct-file, and there are many examples of such within Octave
itself.  For example, the 'quad' function is an oct-file that calculates
the definite integral by quadrature over a user supplied function.

   There are also many ways in which a function might be passed.  It
might be passed as one of

  1. Function Handle

  2. Anonymous Function Handle

  3. Inline Function

  4. String

   The example below demonstrates an example that accepts all four means
of passing a function to an oct-file.

     #include <octave/oct.h>
     #include <octave/parse.h>

     DEFUN_DLD (funcdemo, args, nargout, "Function Demo")
     {
       octave_value_list retval;
       int nargin = args.length ();

       if (nargin < 2)
         print_usage ();
       else
         {
           octave_value_list newargs;
           for (octave_idx_type i = nargin - 1; i > 0; i--)
             newargs(i-1) = args(i);
           if (args(0).is_function_handle () || args(0).is_inline_function ())
             {
               octave_function *fcn = args(0).function_value ();
               if (! error_state)
                 retval = feval (fcn, newargs, nargout);
             }
           else if (args(0).is_string ())
             {
               std::string fcn = args(0).string_value ();
               if (! error_state)
                 retval = feval (fcn, newargs, nargout);
             }
           else
             error ("funcdemo: INPUT must be string, inline, or function handle");
         }
       return retval;
     }


   The first argument to this demonstration is the user-supplied
function and the remaining arguments are all passed to the user
function.

     funcdemo (@sin,1)
     => 0.84147
     funcdemo (@(x) sin (x), 1)
     => 0.84147
     funcdemo (inline ("sin (x)"), 1)
     => 0.84147
     funcdemo ("sin",1)
     => 0.84147
     funcdemo (@atan2, 1, 1)
     => 0.78540

   When the user function is passed as a string the treatment of the
function is different.  In some cases it is necessary to have the user
supplied function as an 'octave_function' object.  In that case the
string argument can be used to create a temporary function as
demonstrated below.

     std::octave fcn_name = unique_symbol_name ("__fcn__");
     std::string fcode = "function y = ";
     fcode.append (fcn_name);
     fcode.append ("(x) y = ");
     fcn = extract_function (args(0), "funcdemo", fcn_name,
                             fcode, "; endfunction");
     ...
     if (fcn_name.length ())
       clear_function (fcn_name);

   There are two important things to know in this case.  First, the
number of input arguments to the user function is fixed, and in the
above example is a single argument.  Second, to avoid leaving the
temporary function in the Octave symbol table it should be cleared after
use.  Also, by convention internal function names begin and end with the
character sequence '__'.


File: octave.info,  Node: Calling External Code from Oct-Files,  Next: Allocating Local Memory in Oct-Files,  Prev: Calling Octave Functions from Oct-Files,  Up: Oct-Files

A.1.9 Calling External Code from Oct-Files
------------------------------------------

Linking external C code to Octave is relatively simple, as the C
functions can easily be called directly from C++.  One possible issue is
that the declarations of the external C functions may need to be
explicitly defined as C functions to the compiler.  If the declarations
of the external C functions are in the header 'foo.h', then the tactic
to ensure that the C++ compiler treats these declarations as C code is

     #ifdef __cplusplus
     extern "C"
     {
     #endif
     #include "foo.h"
     #ifdef __cplusplus
     }  /* end extern "C" */
     #endif

   Calling Fortran code, however, can pose more difficulties.  This is
due to differences in the manner in which compilers treat the linking of
Fortran code with C or C++ code.  Octave supplies a number of macros
that allow consistent behavior across a number of compilers.

   The underlying Fortran code should use the 'XSTOPX' function to
replace the Fortran 'STOP' function.  'XSTOPX' uses the Octave exception
handler to treat failing cases in the Fortran code explicitly.  Note
that Octave supplies its own replacement BLAS 'XERBLA' function, which
uses 'XSTOPX'.

   If the code calls 'XSTOPX', then the 'F77_XFCN' macro should be used
to call the underlying Fortran function.  The Fortran exception state
can then be checked with the global variable
'f77_exception_encountered'.  If 'XSTOPX' will not be called, then the 'F77_FCN'
macro should be used instead to call the Fortran code.

   There is no great harm in using 'F77_XFCN' in all cases, except that
for Fortran code that is short running and executes a large number of
times, there is potentially an overhead in doing so.  However, if 'F77_FCN'
is used with code that calls 'XSTOP', Octave can generate a segmentation
fault.

   An example of the inclusion of a Fortran function in an oct-file is
given in the following example, where the C++ wrapper is

     #include <octave/oct.h>
     #include <octave/f77-fcn.h>

     extern "C"
     {
       F77_RET_T
       F77_FUNC (fortransub, FORTSUB)
         (const int&, double*, F77_CHAR_ARG_DECL F77_CHAR_ARG_LEN_DECL);
     }

     DEFUN_DLD (fortrandemo, args, , "Fortran Demo")
     {
       octave_value_list retval;
       int nargin = args.length ();

       if (nargin != 1)
         print_usage ();
       else
         {
           NDArray a = args(0).array_value ();
           if (! error_state)
             {
               double *av = a.fortran_vec ();
               octave_idx_type na = a.numel ();
               OCTAVE_LOCAL_BUFFER (char, ctmp, 128);

               F77_XFCN (fortransub, FORTSUB,
                         (na, av, ctmp F77_CHAR_ARG_LEN (128)));

               retval(1) = std::string (ctmp);
               retval(0) = a;
             }
         }
       return retval;
     }


and the Fortran function is

           subroutine fortransub (n, a, s)
           implicit none
           character*(*) s
           real*8 a(*)
           integer*4 i, n, ioerr
           do i = 1, n
             if (a(i) .eq. 0d0) then
               call xstopx ('fortransub: divide by zero')
             else
               a(i) = 1d0 / a(i)
             endif
           enddo
           write (unit = s, fmt = '(a,i3,a,a)', iostat = ioerr)
          $       'There are ', n,
          $       ' values in the input vector', char(0)
           if (ioerr .ne. 0) then
             call xstopx ('fortransub: error writing string')
           endif
           return
           end



   This example demonstrates most of the features needed to link to an
external Fortran function, including passing arrays and strings, as well
as exception handling.  Both the Fortran and C++ files need to be
compiled in order for the example to work.

     mkoctfile fortrandemo.cc fortransub.f
     [b, s] = fortrandemo (1:3)
     =>
       b = 1.00000   0.50000   0.33333
       s = There are   3 values in the input vector
     [b, s] = fortrandemo (0:3)
     error: fortrandemo: fortransub: divide by zero


File: octave.info,  Node: Allocating Local Memory in Oct-Files,  Next: Input Parameter Checking in Oct-Files,  Prev: Calling External Code from Oct-Files,  Up: Oct-Files

A.1.10 Allocating Local Memory in Oct-Files
-------------------------------------------

Allocating memory within an oct-file might seem easy as the C++
new/delete operators can be used.  However, in that case great care must
be taken to avoid memory leaks.  The preferred manner in which to
allocate memory for use locally is to use the 'OCTAVE_LOCAL_BUFFER'
macro.  An example of its use is

     OCTAVE_LOCAL_BUFFER (double, tmp, len)

that returns a pointer 'tmp' of type 'double *' of length 'len'.

   In this case Octave itself will worry about reference counting and
variable scope and will properly free memory without programmer
intervention.


File: octave.info,  Node: Input Parameter Checking in Oct-Files,  Next: Exception and Error Handling in Oct-Files,  Prev: Allocating Local Memory in Oct-Files,  Up: Oct-Files

A.1.11 Input Parameter Checking in Oct-Files
--------------------------------------------

As oct-files are compiled functions they open up the possibility of
crashing Octave through careless function calls or memory faults.  It is
quite important that each and every function have a sufficient level of
parameter checking to ensure that Octave behaves well.

   The minimum requirement, as previously discussed, is to check the
number of input arguments before using them to avoid referencing a
non-existent argument.  However, in some cases this might not be
sufficient as the underlying code imposes further constraints.  For
example, an external function call might be undefined if the input
arguments are not integers, or if one of the arguments is zero, or if
the input is complex and a real value was expected.  Therefore,
oct-files often need additional input parameter checking.

   There are several functions within Octave that can be useful for the
purposes of parameter checking.  These include the methods of the
octave_value class like 'is_real_matrix', 'is_numeric_type', etc.
Often, with a knowledge of the Octave m-file language, you can guess at
what the corresponding C++ routine will.  In addition there are some
more specialized input validation functions of which a few are
demonstrated below.

     #include <octave/oct.h>

     DEFUN_DLD (paramdemo, args, nargout, "Parameter Check Demo")
     {
       octave_value retval;
       int nargin = args.length ();

       if (nargin != 1)
         print_usage ();
       else if (nargout != 0)
         error ("paramdemo: OUTPUT argument required");
       else
         {
           NDArray m = args(0).array_value ();
           double min_val = -10.0;
           double max_val = 10.0;
           octave_stdout << "Properties of input array:\n";
           if (m.any_element_is_negative ())
             octave_stdout << "  includes negative values\n";
           if (m.any_element_is_inf_or_nan ())
             octave_stdout << "  includes Inf or NaN values\n";
           if (m.any_element_not_one_or_zero ())
             octave_stdout << "  includes other values than 1 and 0\n";
           if (m.all_elements_are_int_or_inf_or_nan ())
             octave_stdout << "  includes only int, Inf or NaN values\n";
           if (m.all_integers (min_val, max_val))
             octave_stdout << "  includes only integers in [-10,10]\n";
         }
       return retval;
     }


An example of its use is:

     paramdemo ([1, 2, NaN, Inf])
     => Properties of input array:
          includes Inf or NaN values
          includes other values than 1 and 0
          includes only int, Inf or NaN values


File: octave.info,  Node: Exception and Error Handling in Oct-Files,  Next: Documentation and Test of Oct-Files,  Prev: Input Parameter Checking in Oct-Files,  Up: Oct-Files

A.1.12 Exception and Error Handling in Oct-Files
------------------------------------------------

Another important feature of Octave is its ability to react to the user
typing <Control-C> even during calculations.  This ability is based on
the C++ exception handler, where memory allocated by the C++ new/delete
methods are automatically released when the exception is treated.  When
writing an oct-file, to allow Octave to treat the user typing
<Control-C>, the 'OCTAVE_QUIT' macro is supplied.  For example:

     for (octave_idx_type i = 0; i < a.nelem (); i++)
       {
         OCTAVE_QUIT;
         b.elem (i) = 2. * a.elem (i);
       }

   The presence of the 'OCTAVE_QUIT' macro in the inner loop allows
Octave to treat the user request with the <Control-C>.  Without this
macro, the user must either wait for the function to return before the
interrupt is processed, or press <Control-C> three times to force Octave
to exit.

   The 'OCTAVE_QUIT' macro does impose a very small speed penalty, and
so for loops that are known to be small it might not make sense to
include 'OCTAVE_QUIT'.

   When creating an oct-file that uses an external libraries, the
function might spend a significant portion of its time in the external
library.  It is not generally possible to use the 'OCTAVE_QUIT' macro in
this case.  The alternative in this case is

     BEGIN_INTERRUPT_IMMEDIATELY_IN_FOREIGN_CODE;
     ...  some code that calls a "foreign" function ...
     END_INTERRUPT_IMMEDIATELY_IN_FOREIGN_CODE;

   The disadvantage of this is that if the foreign code allocates any
memory internally, then this memory might be lost during an interrupt,
without being deallocated.  Therefore, ideally Octave itself should
allocate any memory that is needed by the foreign code, with either the
fortran_vec method or the 'OCTAVE_LOCAL_BUFFER' macro.

   The Octave unwind_protect mechanism (*note The unwind_protect
Statement::) can also be used in oct-files.  In conjunction with the
exception handling of Octave, it is important to enforce that certain
code is run to allow variables, etc. to be restored even if an exception
occurs.  An example of the use of this mechanism is

     #include <octave/oct.h>
     #include <octave/unwind-prot.h>

     void
     my_err_handler (const char *fmt, ...)
     {
       // Do nothing!!
     }

     DEFUN_DLD (unwinddemo, args, nargout, "Unwind Demo")
     {
       octave_value retval;
       int nargin = args.length ();

       if (nargin < 2)
         print_usage ();
       else
         {
           NDArray a = args(0).array_value ();
           NDArray b = args(1).array_value ();

           if (! error_state)
             {
               // Declare unwind_protect frame which lasts as long as
               // the variable frame has scope.
               unwind_protect frame;
               frame.protect_var (current_liboctave_warning_handler);

               set_liboctave_warning_handler (my_err_handler);
               retval = octave_value (quotient (a, b));
             }
         }
       return retval;
     }


   As can be seen in the example:

     unwinddemo (1, 0)
     => Inf
     1 / 0
     => warning: division by zero
        Inf

   The warning for division by zero (and in fact all warnings) are
disabled in the 'unwinddemo' function.


File: octave.info,  Node: Documentation and Test of Oct-Files,  Prev: Exception and Error Handling in Oct-Files,  Up: Oct-Files

A.1.13 Documentation and Test of Oct-Files
------------------------------------------

The documentation of an oct-file is the fourth string parameter of the 'DEFUN_DLD'
macro.  This string can be formatted in the same manner as the help
strings for user functions (*note Documentation Tips::), however there
are some issue that are particular to the formatting of help strings
within oct-files.

   The major issue is that the help string will typically be longer than
a single line of text, and so the formatting of long help strings needs
to be taken into account.  There are several possible solutions, but the
most common is illustrated in the following example,

     DEFUN_DLD (do_what_i_want, args, nargout,
       "-*- texinfo -*-\n\
     @deftypefn {Function File} {} do_what_i_say (@var{n})\n\
     A function that does what the user actually wants rather\n\
     than what they requested.\n\
     @end deftypefn")
     {
     ...
     }

where, as can be seen, each line of text is terminated by '\n\' which is
an embedded new-line in the string together with a C++ string
continuation character.  Note that the final '\' must be the last
character on the line.

   Octave also includes the ability to embed test and demonstration code
for a function within the code itself (*note Test and Demo Functions::).
This can be used from within oct-files (or in fact any file) with
certain provisos.  First, the test and demo functions of Octave look for
'%!' as the first two characters of a line to identify test and
demonstration code.  This is a requirement for oct-files as well.  In
addition, the test and demonstration code must be wrapped in a comment
block to avoid it being interpreted by the compiler.  Finally, the
Octave test and demonstration code must have access to the original
source code of the oct-file and not just the compiled code as the tests
are stripped from the compiled code.  An example in an oct-file might be

     /*
     %!assert (sin ([1,2]), [sin(1),sin(2)])
     %!error (sin ())
     %!error (sin (1,1))
     */


File: octave.info,  Node: Mex-Files,  Next: Standalone Programs,  Prev: Oct-Files,  Up: External Code Interface

A.2 Mex-Files
=============

Octave includes an interface to allow legacy mex-files to be compiled
and used with Octave.  This interface can also be used to share code
between Octave and MATLAB users.  However, as mex-files expose MATLAB's
internal API, and the internal structure of Octave is different, a
mex-file can never have the same performance in Octave as the equivalent
oct-file.  In particular, to support the manner in which variables are
passed to mex functions there are a significant number of additional
copies of memory blocks when calling or returning from a mex-file
function.  For this reason, it is recommended that any new code be
written with the oct-file interface previously discussed.

* Menu:

* Getting Started with Mex-Files::
* Working with Matrices and Arrays in Mex-Files::
* Character Strings in Mex-Files::
* Cell Arrays with Mex-Files::
* Structures with Mex-Files::
* Sparse Matrices with Mex-Files::
* Calling Other Functions in Mex-Files::


File: octave.info,  Node: Getting Started with Mex-Files,  Next: Working with Matrices and Arrays in Mex-Files,  Up: Mex-Files

A.2.1 Getting Started with Mex-Files
------------------------------------

The basic command to build a mex-file is either 'mkoctfile --mex' or
'mex'.  The first command can be used either from within Octave or from
the command line.  However, to avoid issues with MATLAB's own 'mex'
command, the use of the command 'mex' is limited to within Octave.
Compiled mex-files have the extension '.mex'.

 -- Command: mex [options] file ...
     Compile source code written in C, C++, or Fortran, to a MEX file.
     This is equivalent to 'mkoctfile --mex [options] file'.

     See also: *note mkoctfile: XREFmkoctfile.

 -- Function File: mexext ()
     Return the filename extension used for MEX files.

     See also: *note mex: XREFmex.

   Consider the following short example:

     #include "mex.h"

     void
     mexFunction (int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[])
     {
       mexPrintf ("Hello, World!\n");

       mexPrintf ("I have %d inputs and %d outputs\n", nrhs, nlhs);
     }


   The first line '#include "mex.h"' makes available all of the
definitions necessary for a mex-file.  One important difference between
Octave and MATLAB is that the header file "matrix.h" is implicitly
included through the inclusion of "mex.h".  This is necessary to avoid a
conflict with the Octave file "Matrix.h" for operating systems and
compilers that don't distinguish between filenames in upper and lower
case.

   The entry point into the mex-file is defined by 'mexFunction'.  The
function takes four arguments:

  1. The number of return arguments (# of left-hand side args).

  2. An array of pointers to return arguments.

  3. The number of input arguments (# of right-hand side args).

  4. An array of pointers to input arguments.

   Note that the function name definition is not explicitly included in
'mexFunction' and so there can only be a single 'mexFunction' entry
point per file.  Instead, the name of the function as seen in Octave is
determined by the name of the mex-file itself minus the extension.
Therefore, if the above function is in the file 'myhello.c', it can be
compiled with

     mkoctfile --mex myhello.c

which creates a file 'myhello.mex'.  The function can then be run from
Octave as

     myhello (1,2,3)
     => Hello, World!
     => I have 3 inputs and 0 outputs

   It should be noted that the mex-file contains no help string for the
functions it contains.  To document mex-files, there should exist an
m-file in the same directory as the mex-file itself.  Taking the above
as an example, we would therefore have a file 'myhello.m' that might
contain the text

     %MYHELLO Simple test of the functionality of a mex-file.

   In this case, the function that will be executed within Octave will
be given by the mex-file, while the help string will come from the
m-file.  This can also be useful to allow a sample implementation of the
mex-file within the Octave language itself for testing purposes.

   Although there cannot be multiple entry points in a single mex-file,
one can use the 'mexFunctionName' function to determine what name the
mex-file was called with.  This can be used to alter the behavior of the
mex-file based on the function name.  For example, if

     #include "mex.h"

     void
     mexFunction (int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[])
     {
       const char *nm;

       nm = mexFunctionName ();
       mexPrintf ("You called function: %s\n", nm);
       if (strcmp (nm, "myfunc") == 0)
         mexPrintf ("This is the principal function\n", nm);

       return;
     }


is in file 'myfunc.c', and it is compiled with

     mkoctfile --mex myfunc.c
     ln -s myfunc.mex myfunc2.mex

then as can be seen by

     myfunc ()
     => You called function: myfunc
         This is the principal function
     myfunc2 ()
     => You called function: myfunc2

the behavior of the mex-file can be altered depending on the functions
name.

   Although the user should only include 'mex.h' in their code, Octave
declares additional functions, typedefs, etc., available to the user to
write mex-files in the headers 'mexproto.h' and 'mxarray.h'.


File: octave.info,  Node: Working with Matrices and Arrays in Mex-Files,  Next: Character Strings in Mex-Files,  Prev: Getting Started with Mex-Files,  Up: Mex-Files

A.2.2 Working with Matrices and Arrays in Mex-Files
---------------------------------------------------

The basic mex type of all variables is 'mxArray'.  Any object, such as a
matrix, cell array, or structure is stored in this basic type.  As such,
'mxArray' serves basically the same purpose as the octave_value class in
oct-files in that it acts as a container for the more specialized types.

   The 'mxArray' structure contains at a minimum, the name of the
variable it represents, its dimensions, its type, and whether the
variable is real or complex.  It can also contain a number of additional
fields depending on the type of the 'mxArray'.  There are a number of
functions to create 'mxArray' structures, including
'mxCreateDoubleMatrix', 'mxCreateCellArray', 'mxCreateSparse', and the
generic 'mxCreateNumericArray'.

   The basic function to access the data contained in an array is
'mxGetPr'.  As the mex interface assumes that real and imaginary parts
of a complex array are stored separately, there is an equivalent
function 'mxGetPi' that gets the imaginary part.  Both of these
functions are only for use with double precision matrices.  The generic
functions 'mxGetData' and 'mxGetImagData' perform the same operation on
all matrix types.  For example:

     mxArray *m;
     mwSize *dims;
     UINT32_T *pr;

     dims = (mwSize *) mxMalloc (2 * sizeof (mwSize));
     dims[0] = 2; dims[1] = 2;
     m = mxCreateNumericArray (2, dims, mxUINT32_CLASS, mxREAL);
     pr = (UINT32_T *) mxGetData (m);

   There are also the functions 'mxSetPr', etc., that perform the
inverse, and set the data of an array to use the block of memory pointed
to by the argument of 'mxSetPr'.

   Note the type 'mwSize' used above, and also 'mwIndex', are defined as
the native precision of the indexing in Octave on the platform on which
the mex-file is built.  This allows both 32- and 64-bit platforms to
support mex-files.  'mwSize' is used to define array dimensions and the
maximum number or elements, while 'mwIndex' is used to define indexing
into arrays.

   An example that demonstrates how to work with arbitrary real or
complex double precision arrays is given by the file 'mypow2.c' shown
below.

     #include "mex.h"

     void
     mexFunction (int nlhs, mxArray* plhs[],
                  int nrhs, const mxArray* prhs[])
     {
       mwSize n;
       mwIndex i;
       double *vri, *vro;

       if (nrhs != 1 || ! mxIsNumeric (prhs[0]))
         mexErrMsgTxt ("ARG1 must be a matrix");

       n = mxGetNumberOfElements (prhs[0]);
       plhs[0] = mxCreateNumericArray (mxGetNumberOfDimensions (prhs[0]),
                                       mxGetDimensions (prhs[0]),
                                       mxGetClassID (prhs[0]),
                                       mxIsComplex (prhs[0]));
       vri = mxGetPr (prhs[0]);
       vro = mxGetPr (plhs[0]);

       if (mxIsComplex (prhs[0]))
         {
           double *vii, *vio;
           vii = mxGetPi (prhs[0]);
           vio = mxGetPi (plhs[0]);

           for (i = 0; i < n; i++)
             {
               vro[i] = vri[i] * vri[i] - vii[i] * vii[i];
               vio[i] = 2 * vri[i] * vii[i];
             }
         }
       else
         {
           for (i = 0; i < n; i++)
             vro[i] = vri[i] * vri[i];
         }
     }


with an example of its use

     b = randn (4,1) + 1i * randn (4,1);
     all (b.^2 == mypow2 (b))
     => 1

   The example above uses the functions 'mxGetDimensions',
'mxGetNumberOfElements', and 'mxGetNumberOfDimensions' to work with the
dimensions of multi-dimensional arrays.  The functions 'mxGetM', and
'mxGetN' are also available to find the number of rows and columns in a
2-D matrix.


File: octave.info,  Node: Character Strings in Mex-Files,  Next: Cell Arrays with Mex-Files,  Prev: Working with Matrices and Arrays in Mex-Files,  Up: Mex-Files

A.2.3 Character Strings in Mex-Files
------------------------------------

As mex-files do not make the distinction between single and double
quoted strings within Octave, there is perhaps less complexity in the
use of strings and character matrices in mex-files.  An example of their
use that parallels the demo in 'stringdemo.cc' is given in the file
'mystring.c', as shown below.

     #include <string.h>
     #include "mex.h"

     void
     mexFunction (int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[])
     {
       mwSize m, n;
       mwIndex i, j;
       mxChar *pi, *po;

       if (nrhs != 1 || ! mxIsChar (prhs[0])
           || mxGetNumberOfDimensions (prhs[0]) > 2)
         mexErrMsgTxt ("ARG1 must be a char matrix");

       m = mxGetM (prhs[0]);
       n = mxGetN (prhs[0]);
       pi = mxGetChars (prhs[0]);
       plhs[0] = mxCreateNumericMatrix (m, n, mxCHAR_CLASS, mxREAL);
       po = mxGetChars (plhs[0]);

       for (j = 0; j < n; j++)
         for (i = 0; i < m; i++)
           po[j*m + m - 1 - i] = pi[j*m + i];
     }


An example of its expected output is

     mystring (["First String"; "Second String"])
     => Second String
        First String

   Other functions in the mex interface for handling character strings
are 'mxCreateString', 'mxArrayToString', and
'mxCreateCharMatrixFromStrings'.  In a mex-file, a character string is
considered to be a vector rather than a matrix.  This is perhaps an
arbitrary distinction as the data in the mxArray for the matrix is
consecutive in any case.


File: octave.info,  Node: Cell Arrays with Mex-Files,  Next: Structures with Mex-Files,  Prev: Character Strings in Mex-Files,  Up: Mex-Files

A.2.4 Cell Arrays with Mex-Files
--------------------------------

One can perform exactly the same operations on Cell arrays in mex-files
as in oct-files.  An example that reduplicates the function of the
'celldemo.cc' oct-file in a mex-file is given by 'mycell.c' as shown
below.

     #include "mex.h"

     void
     mexFunction (int nlhs, mxArray* plhs[],
                  int nrhs, const mxArray* prhs[])
     {
       mwSize n;
       mwIndex i;

       if (nrhs != 1 || ! mxIsCell (prhs[0]))
         mexErrMsgTxt ("ARG1 must be a cell");

       n = mxGetNumberOfElements (prhs[0]);
       n = (n > nlhs ? nlhs : n);

       for (i = 0; i < n; i++)
         plhs[i] = mxDuplicateArray (mxGetCell (prhs[0], i));
     }


The output is identical to the oct-file version as well.

     [b1, b2, b3] = mycell ({1, [1, 2], "test"})
     =>
     b1 =  1
     b2 =

        1   2

     b3 = test

   Note in the example the use of the 'mxDuplicateArray' function.  This
is needed as the 'mxArray' pointer returned by 'mxGetCell' might be
deallocated.  The inverse function to 'mxGetCell', used for setting Cell
values, is 'mxSetCell' and is defined as

     void mxSetCell (mxArray *ptr, int idx, mxArray *val);

   Finally, to create a cell array or matrix, the appropriate functions
are

     mxArray *mxCreateCellArray (int ndims, const int *dims);
     mxArray *mxCreateCellMatrix (int m, int n);


File: octave.info,  Node: Structures with Mex-Files,  Next: Sparse Matrices with Mex-Files,  Prev: Cell Arrays with Mex-Files,  Up: Mex-Files

A.2.5 Structures with Mex-Files
-------------------------------

The basic function to create a structure in a mex-file is
'mxCreateStructMatrix' which creates a structure array with a two
dimensional matrix, or 'mxCreateStructArray'.

     mxArray *mxCreateStructArray (int ndims, int *dims,
                                   int num_keys,
                                   const char **keys);
     mxArray *mxCreateStructMatrix (int rows, int cols,
                                    int num_keys,
                                    const char **keys);

   Accessing the fields of the structure can then be performed with
'mxGetField' and 'mxSetField' or alternatively with the
'mxGetFieldByNumber' and 'mxSetFieldByNumber' functions.

     mxArray *mxGetField (const mxArray *ptr, mwIndex index,
                          const char *key);
     mxArray *mxGetFieldByNumber (const mxArray *ptr,
                                  mwIndex index, int key_num);
     void mxSetField (mxArray *ptr, mwIndex index,
                      const char *key, mxArray *val);
     void mxSetFieldByNumber (mxArray *ptr, mwIndex index,
                              int key_num, mxArray *val);

   A difference between the oct-file interface to structures and the
mex-file version is that the functions to operate on structures in
mex-files directly include an 'index' over the elements of the arrays of
elements per 'field'; Whereas, the oct-file structure includes a Cell
Array per field of the structure.

   An example that demonstrates the use of structures in a mex-file can
be found in the file 'mystruct.c' shown below.

     #include "mex.h"

     void
     mexFunction (int nlhs, mxArray* plhs[],
                  int nrhs, const mxArray* prhs[])
     {
       int i;
       mwIndex j;
       mxArray *v;
       const char *keys[] = { "this", "that" };

       if (nrhs != 1 || ! mxIsStruct (prhs[0]))
         mexErrMsgTxt ("expects struct");

       for (i = 0; i < mxGetNumberOfFields (prhs[0]); i++)
         for (j = 0; j < mxGetNumberOfElements (prhs[0]); j++)
           {
             mexPrintf ("field %s(%d) = ", mxGetFieldNameByNumber (prhs[0], i), j);
             v = mxGetFieldByNumber (prhs[0], j, i);
             mexCallMATLAB (0, NULL, 1, &v, "disp");
           }

       v = mxCreateStructMatrix (2, 2, 2, keys);

       mxSetFieldByNumber (v, 0, 0, mxCreateString ("this1"));
       mxSetFieldByNumber (v, 0, 1, mxCreateString ("that1"));
       mxSetFieldByNumber (v, 1, 0, mxCreateString ("this2"));
       mxSetFieldByNumber (v, 1, 1, mxCreateString ("that2"));
       mxSetFieldByNumber (v, 2, 0, mxCreateString ("this3"));
       mxSetFieldByNumber (v, 2, 1, mxCreateString ("that3"));
       mxSetFieldByNumber (v, 3, 0, mxCreateString ("this4"));
       mxSetFieldByNumber (v, 3, 1, mxCreateString ("that4"));

       if (nlhs)
         plhs[0] = v;
     }


   An example of the behavior of this function within Octave is then

     a(1).f1 = "f11"; a(1).f2 = "f12";
     a(2).f1 = "f21"; a(2).f2 = "f22";
     b = mystruct (a);
     =>  field f1(0) = f11
         field f1(1) = f21
         field f2(0) = f12
         field f2(1) = f22
     b
     => 2x2 struct array containing the fields:

          this
          that

     b(3)
     => scalar structure containing the fields:

          this = this3
          that = that3


File: octave.info,  Node: Sparse Matrices with Mex-Files,  Next: Calling Other Functions in Mex-Files,  Prev: Structures with Mex-Files,  Up: Mex-Files

A.2.6 Sparse Matrices with Mex-Files
------------------------------------

The Octave format for sparse matrices is identical to the mex format in
that it is a compressed column sparse format.  Also in both, sparse
matrices are required to be two-dimensional.  The only difference is
that the real and imaginary parts of the matrix are stored separately.

   The mex-file interface, in addition to using 'mxGetM', 'mxGetN',
'mxSetM', 'mxSetN', 'mxGetPr', 'mxGetPi', 'mxSetPr', and 'mxSetPi', also
supplies the following functions.

     mwIndex *mxGetIr (const mxArray *ptr);
     mwIndex *mxGetJc (const mxArray *ptr);
     mwSize mxGetNzmax (const mxArray *ptr);

     void mxSetIr (mxArray *ptr, mwIndex *ir);
     void mxSetJc (mxArray *ptr, mwIndex *jc);
     void mxSetNzmax (mxArray *ptr, mwSize nzmax);

'mxGetNzmax' gets the maximum number of elements that can be stored in
the sparse matrix.  This is not necessarily the number of non-zero
elements in the sparse matrix.  'mxGetJc' returns an array with one
additional value than the number of columns in the sparse matrix.  The
difference between consecutive values of the array returned by 'mxGetJc'
define the number of non-zero elements in each column of the sparse
matrix.  Therefore,

     mwSize nz, n;
     mwIndex *Jc;
     mxArray *m;
     ...
     n = mxGetN (m);
     Jc = mxGetJc (m);
     nz = Jc[n];

returns the actual number of non-zero elements stored in the matrix in
'nz'.  As the arrays returned by 'mxGetPr' and 'mxGetPi' only contain
the non-zero values of the matrix, we also need a pointer to the rows of
the non-zero elements, and this is given by 'mxGetIr'.  A complete
example of the use of sparse matrices in mex-files is given by the file
'mysparse.c' shown below.

     #include "mex.h"

     void
     mexFunction (int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[])
     {
       mwSize m, n, nz;
       mxArray *v;
       mwIndex i;
       double *pr, *pi;
       double *pr2, *pi2;
       mwIndex *ir, *jc;
       mwIndex *ir2, *jc2;

       if (nrhs != 1 || ! mxIsSparse (prhs[0]))
         mexErrMsgTxt ("ARG1 must be a sparse matrix");

       m = mxGetM (prhs[0]);
       n = mxGetN (prhs[0]);
       nz = mxGetNzmax (prhs[0]);

       if (mxIsComplex (prhs[0]))
         {
           mexPrintf ("Matrix is %d-by-%d complex sparse matrix", m, n);
           mexPrintf (" with %d elements\n", nz);

           pr = mxGetPr (prhs[0]);
           pi = mxGetPi (prhs[0]);
           ir = mxGetIr (prhs[0]);
           jc = mxGetJc (prhs[0]);

           i = n;
           while (jc[i] == jc[i-1] && i != 0) i--;

           mexPrintf ("last non-zero element (%d, %d) = (%g, %g)\n",
                      ir[nz-1]+ 1, i, pr[nz-1], pi[nz-1]);

           v = mxCreateSparse (m, n, nz, mxCOMPLEX);
           pr2 = mxGetPr (v);
           pi2 = mxGetPi (v);
           ir2 = mxGetIr (v);
           jc2 = mxGetJc (v);

           for (i = 0; i < nz; i++)
             {
               pr2[i] = 2 * pr[i];
               pi2[i] = 2 * pi[i];
               ir2[i] = ir[i];
             }
           for (i = 0; i < n + 1; i++)
             jc2[i] = jc[i];

           if (nlhs > 0)
             plhs[0] = v;
         }
       else if (mxIsLogical (prhs[0]))
         {
           mxLogical *pbr, *pbr2;
           mexPrintf ("Matrix is %d-by-%d logical sparse matrix", m, n);
           mexPrintf (" with %d elements\n", nz);

           pbr = mxGetLogicals (prhs[0]);
           ir = mxGetIr (prhs[0]);
           jc = mxGetJc (prhs[0]);

           i = n;
           while (jc[i] == jc[i-1] && i != 0) i--;
           mexPrintf ("last non-zero element (%d, %d) = %d\n",
                      ir[nz-1]+ 1, i, pbr[nz-1]);

           v = mxCreateSparseLogicalMatrix (m, n, nz);
           pbr2 = mxGetLogicals (v);
           ir2 = mxGetIr (v);
           jc2 = mxGetJc (v);

           for (i = 0; i < nz; i++)
             {
               pbr2[i] = pbr[i];
               ir2[i] = ir[i];
             }
           for (i = 0; i < n + 1; i++)
             jc2[i] = jc[i];

           if (nlhs > 0)
             plhs[0] = v;
         }
       else
         {
           mexPrintf ("Matrix is %d-by-%d real sparse matrix", m, n);
           mexPrintf (" with %d elements\n", nz);

           pr = mxGetPr (prhs[0]);
           ir = mxGetIr (prhs[0]);
           jc = mxGetJc (prhs[0]);

           i = n;
           while (jc[i] == jc[i-1] && i != 0) i--;
           mexPrintf ("last non-zero element (%d, %d) = %g\n",
                      ir[nz-1]+ 1, i, pr[nz-1]);

           v = mxCreateSparse (m, n, nz, mxREAL);
           pr2 = mxGetPr (v);
           ir2 = mxGetIr (v);
           jc2 = mxGetJc (v);

           for (i = 0; i < nz; i++)
             {
               pr2[i] = 2 * pr[i];
               ir2[i] = ir[i];
             }
           for (i = 0; i < n + 1; i++)
             jc2[i] = jc[i];

           if (nlhs > 0)
             plhs[0] = v;
         }
     }


   A sample usage of 'mysparse' is

     sm = sparse ([1, 0; 0, pi]);
     mysparse (sm)
     =>
     Matrix is 2-by-2 real sparse matrix with 2 elements
     last non-zero element (2, 2) = 3.14159


File: octave.info,  Node: Calling Other Functions in Mex-Files,  Prev: Sparse Matrices with Mex-Files,  Up: Mex-Files

A.2.7 Calling Other Functions in Mex-Files
------------------------------------------

It is possible to call other Octave functions from within a mex-file
using 'mexCallMATLAB'.  An example of the use of 'mexCallMATLAB' can be
see in the example below.

     #include "mex.h"

     void
     mexFunction (int nlhs, mxArray* plhs[],
                  int nrhs, const mxArray* prhs[])
     {
       char *str;

       mexPrintf ("Starting file myfeval.mex\n");

       mexPrintf ("I have %d inputs and %d outputs\n", nrhs, nlhs);

       if (nrhs < 1 || ! mxIsString (prhs[0]))
         mexErrMsgTxt ("ARG1 must be a function name");

       str = mxArrayToString (prhs[0]);

       mexPrintf ("I'm going to call the function %s\n", str);

       if (nlhs == 0)
         nlhs = 1;  // Octave's automatic 'ans' variable

       /* Cast prhs just to get rid of 'const' qualifier and stop compile warning */
       mexCallMATLAB (nlhs, plhs, nrhs-1, (mxArray**)prhs+1, str);

       mxFree (str);
     }


   If this code is in the file 'myfeval.c', and is compiled to
'myfeval.mex', then an example of its use is

     a = myfeval ("sin", 1)
     => Starting file myfeval.mex
        I have 2 inputs and 1 outputs
        I'm going to call the interpreter function sin
        a =  0.84147

   Note that it is not possible to use function handles or inline
functions within a mex-file.


File: octave.info,  Node: Standalone Programs,  Prev: Mex-Files,  Up: External Code Interface

A.3 Standalone Programs
=======================

The libraries Octave itself uses can be utilized in standalone
applications.  These applications then have access, for example, to the
array and matrix classes, as well as to all of the Octave algorithms.
The following C++ program, uses class Matrix from 'liboctave.a' or
'liboctave.so'.

     #include <iostream>
     #include <octave/oct.h>

     int
     main (void)
     {
       std::cout << "Hello Octave world!\n";

       int n = 2;
       Matrix a_matrix = Matrix (n, n);

       for (octave_idx_type i = 0; i < n; i++)
         for (octave_idx_type j = 0; j < n; j++)
           a_matrix(i,j) = (i + 1) * 10 + (j + 1);

       std::cout << a_matrix;

       return 0;
     }


mkoctfile can be used to build a standalone application with a command
like

     $ mkoctfile --link-stand-alone standalone.cc -o standalone
     $ ./standalone
     Hello Octave world!
       11 12
       21 22
     $

   Note that the application 'standalone' will be dynamically linked
against the Octave libraries and any Octave support libraries.  The
above allows the Octave math libraries to be used by an application.  It
does not, however, allow the script files, oct-files, or built-in
functions of Octave to be used by the application.  To do that the
Octave interpreter needs to be initialized first.  An example of how to
do this can then be seen in the code

     #include <iostream>
     #include <octave/oct.h>
     #include <octave/octave.h>
     #include <octave/parse.h>
     #include <octave/toplev.h>

     int
     main (void)
     {
       string_vector argv (2);
       argv(0) = "embedded";
       argv(1) = "-q";

       octave_main (2, argv.c_str_vec (), 1);

       octave_idx_type n = 2;
       octave_value_list in;

       for (octave_idx_type i = 0; i < n; i++)
         in(i) = octave_value (5 * (i + 2));

       octave_value_list out = feval ("gcd", in, 1);

       if (! error_state && out.length () > 0)
         std::cout << "GCD of ["
                   << in(0).int_value ()
                   << ", "
                   << in(1).int_value ()
                   << "] is " << out(0).int_value ()
                   << std::endl;
       else
         std::cout << "invalid\n";

       clean_up_and_exit (0);
     }


which, as before, is compiled and run as a standalone application with

     $ mkoctfile --link-stand-alone embedded.cc -o embedded
     $ ./embedded
     GCD of [10, 15] is 5
     $

   It is worth noting that, if only built-in functions are to be called
from a C++ standalone program, then it does not need to initialize the
interpreter to do so.  The general rule is that, for a built-in function
named 'function_name' in the interpreter, there will be a C++ function
named 'Ffunction_name' (note the prepended capital 'F') accessible in
the C++ API.  The declarations for all built-in functions are collected
in the header file 'builtin-defun-decls.h'.  This feature should be used
with care as the list of built-in functions can change.  No guarantees
can be made that a function that is currently built in won't be
implemented as a .m file or as a dynamically linked function in the
future.  An example of how to call built-in functions from C++ can be
seen in the code

     #include <iostream>
     #include <octave/oct.h>
     #include <octave/builtin-defun-decls.h>

     int
     main (void)
     {
       int n = 2;
       Matrix a_matrix = Matrix (n, n);

       for (octave_idx_type i = 0; i < n; i++)
         for (octave_idx_type j = 0; j < n; j++)
           a_matrix(i,j) = (i + 1) * 10 + (j + 1);

       std::cout << "This is a matrix:" << std::endl
                 << a_matrix            << std::endl;

       octave_value_list in;
       in(0) = a_matrix;

       octave_value_list out = Fnorm (in, 1);
       double norm_of_the_matrix = out(0).double_value ();

       std::cout << "This is the norm of the matrix:" << std::endl
                 << norm_of_the_matrix                << std::endl;

       return 0;
     }


which, again, is compiled and run as a standalone application with

     $ mkoctfile --link-stand-alone standalonebuiltin.cc -o standalonebuiltin
     $ ./standalonebuiltin
     This is a matrix:
      11 12
      21 22

     This is the norm of the matrix:
     34.4952
     $


File: octave.info,  Node: Test and Demo Functions,  Next: Tips and Standards,  Prev: External Code Interface,  Up: Top

Appendix B Test and Demo Functions
**********************************

Octave includes a number of functions to allow the integration of
testing and demonstration code in the source code of the functions
themselves.

* Menu:

* Test Functions::
* Demonstration Functions::


File: octave.info,  Node: Test Functions,  Next: Demonstration Functions,  Up: Test and Demo Functions

B.1 Test Functions
==================

 -- Command: test NAME
 -- Command: test NAME quiet|normal|verbose
 -- Function File: test ("NAME", "quiet|normal|verbose", FID)
 -- Function File: test ([], "explain", FID)
 -- Function File: SUCCESS = test (...)
 -- Function File: [N, MAX] = test (...)
 -- Function File: [CODE, IDX] = test ("NAME", "grabdemo")

     Perform tests from the first file in the loadpath matching NAME.
     'test' can be called as a command or as a function.  Called with a
     single argument NAME, the tests are run interactively and stop
     after the first error is encountered.

     With a second argument the tests which are performed and the amount
     of output is selected.

     "quiet"
          Don't report all the tests as they happen, just the errors.

     "normal"
          Report all tests as they happen, but don't do tests which
          require user interaction.

     "verbose"
          Do tests which require user interaction.

     The argument FID can be used to allow batch processing.  Errors can
     be written to the already open file defined by FID, and hopefully
     when Octave crashes this file will tell you what was happening when
     it did.  You can use 'stdout' if you want to see the results as
     they happen.  You can also give a file name rather than an FID, in
     which case the contents of the file will be replaced with the log
     from the current test.

     Called with a single output argument SUCCESS, 'test' returns true
     if all of the tests were successful.  Called with two output
     arguments N and MAX, the number of successful tests and the total
     number of tests in the file NAME are returned.

     If the second argument is the string "grabdemo", the contents of
     the demo blocks are extracted but not executed.  Code for all code
     blocks is concatenated and returned as CODE with IDX being a vector
     of positions of the ends of the demo blocks.

     If the second argument is "explain", then NAME is ignored and an
     explanation of the line markers used is written to the file FID.

     See also: *note assert: XREFassert, *note fail: XREFfail, *note
     error: XREFerror, *note demo: XREFdemo, *note example: XREFexample.

   'test' scans the named script file looking for lines which start with
the identifier '%!'.  The prefix is stripped off and the rest of the
line is processed through the Octave interpreter.  If the code generates
an error, then the test is said to fail.

   Since 'eval()' will stop at the first error it encounters, you must
divide your tests up into blocks, with anything in a separate block
evaluated separately.  Blocks are introduced by valid keywords like
'test', 'function', or 'assert' immediately following '%!'.  A block is
defined by indentation as in Python.  Lines beginning with
'%!<whitespace>' are part of the preceeding block.

   For example:

     %!test error ("this test fails!");
     %!test "test doesn't fail. it doesn't generate an error";

   When a test fails, you will see something like:

       ***** test error ("this test fails!")
     !!!!! test failed
     this test fails!

   Generally, to test if something works, you want to assert that it
produces a correct value.  A real test might look something like

     %!test
     %! A = [1, 2, 3; 4, 5, 6]; B = [1; 2];
     %! expect = [ A ; 2*A ];
     %! get = kron (B, A);
     %! if (any (size (expect) != size (get)))
     %!   error ("wrong size: expected %d,%d but got %d,%d",
     %!          size (expect), size (get));
     %! elseif (any (any (expect != get)))
     %!   error ("didn't get what was expected.");
     %! endif

   To make the process easier, use the 'assert' function.  For example,
with 'assert' the previous test is reduced to:

     %!test
     %! A = [1, 2, 3; 4, 5, 6]; B = [1; 2];
     %! assert (kron (B, A), [ A; 2*A ]);

   'assert' can accept a tolerance so that you can compare results
absolutely or relatively.  For example, the following all succeed:

     %!test assert (1+eps, 1, 2*eps)          # absolute error
     %!test assert (100+100*eps, 100, -2*eps) # relative error

   You can also do the comparison yourself, but still have assert
generate the error:

     %!test assert (isempty ([]))
     %!test assert ([1, 2; 3, 4] > 0)

   Because 'assert' is so frequently used alone in a test block, there
is a shorthand form:

     %!assert (...)

which is equivalent to:

     %!test assert (...)

   Occasionally a block of tests will depend on having optional
functionality in Octave.  Before testing such blocks the availability of
the required functionality must be checked.  A '%!testif HAVE_XXX' block
will only be run if Octave was compiled with functionality 'HAVE_XXX'.
For example, the sparse single value decomposition, 'svds()', depends on
having the ARPACK library.  All of the tests for 'svds' begin with

     %!testif HAVE_ARPACK

Review 'config.h' or 'octave_config_info ("features")' to see some of
the possible values to check.

   Sometimes during development there is a test that should work but is
known to fail.  You still want to leave the test in because when the
final code is ready the test should pass, but you may not be able to fix
it immediately.  To avoid unnecessary bug reports for these known
failures, mark the block with 'xtest' rather than 'test':

     %!xtest assert (1==0)
     %!xtest fail ("success=1", "error")

In this case, the test will run and any failure will be reported.
However, testing is not aborted and subsequent test blocks will be
processed normally.  Another use of 'xtest' is for statistical tests
which should pass most of the time but are known to fail occasionally.

   Each block is evaluated in its own function environment, which means
that variables defined in one block are not automatically shared with
other blocks.  If you do want to share variables, then you must declare
them as 'shared' before you use them.  For example, the following
declares the variable A, gives it an initial value (default is empty),
and then uses it in several subsequent tests.

     %!shared A
     %! A = [1, 2, 3; 4, 5, 6];
     %!assert (kron ([1; 2], A), [ A; 2*A ]);
     %!assert (kron ([1, 2], A), [ A, 2*A ]);
     %!assert (kron ([1,2; 3,4], A), [ A,2*A; 3*A,4*A ]);

   You can share several variables at the same time:

     %!shared A, B

   You can also share test functions:

     %!function A = fn (B)
     %!  A = 2*B;
     %!endfunction
     %!assert (fn(2), 4);

   Note that all previous variables and values are lost when a new
shared block is declared.

   Remember that '%!function' begins a new block and that
'%!endfunction' ends this block.  Be aware that until a new block is
started, lines starting with '%!<space>' will be discarded as comments.
The following is nearly identical to the example above, but does
nothing.

     %!function A = fn (B)
     %!  A = 2*B;
     %!endfunction
     %! assert (fn(2), 4);

Because there is a space after '%!' the 'assert' statement does not
begin a new block and this line is treated as a comment.

   Error and warning blocks are like test blocks, but they only succeed
if the code generates an error.  You can check the text of the error is
correct using an optional regular expression '<pattern>'.  For example:

     %!error <passes!> error ("this test passes!");

   If the code doesn't generate an error, the test fails.  For example:

     %!error "this is an error because it succeeds.";

produces

       ***** error "this is an error because it succeeds.";
     !!!!! test failed: no error

   It is important to automate the tests as much as possible, however
some tests require user interaction.  These can be isolated into demo
blocks, which if you are in batch mode, are only run when called with
'demo' or the 'verbose' option to 'test'.  The code is displayed before
it is executed.  For example,

     %!demo
     %! T = [0:0.01:2*pi]; X = sin (T);
     %! plot (T, X);
     %! # you should now see a sine wave in your figure window

produces

     funcname example 1:
      T = [0:0.01:2*pi]; X = sin (T);
      plot (T, X);
      # you should now see a sine wave in your figure window

     Press <enter> to continue:

   Note that demo blocks cannot use any shared variables.  This is so
that they can be executed by themselves, ignoring all other tests.

   If you want to temporarily disable a test block, put '#' in place of
the block type.  This creates a comment block which is echoed in the log
file but not executed.  For example:

     %!#demo
     %! T = [0:0.01:2*pi]; X = sin (T);
     %! plot (T, X);
     %! # you should now see a sine wave in your figure window

The following trivial code snippet provides examples for the use of
fail, assert, error and xtest:

     function output = must_be_zero (INPUT)
       if (INPUT != 0)
         error ("Non-zero input!")
       endif
       output = input;
     endfunction

     %!fail ("must_be_zero (1)");
     %!assert (must_be_zero (0), 0);
     %!error <Non-zero> must_be_zero (1);
     %!xtest error ("This code generates an error");

When putting this a file 'must_be_zero.m', and running the test, we see

     test must_be_zero verbose

     =>
     >>>>> /path/to/must_be_zero.m
       ***** fail ("must_be_zero (1)");
       ***** assert (must_be_zero (0), 0);
       ***** error <Non-zero> must_be_zero (1);
       ***** xtest error ("This code generates an error");
     !!!!! known failure
     This code generates an error
     PASSES 4 out of 4 tests (1 expected failures)

Block type summary:
...................

'%!test'
     check that entire block is correct

'%!testif HAVE_XXX'
     check block only if Octave was compiled with feature HAVE_XXX.

'%!xtest'
     check block, report a test failure but do not abort testing.

'%!error'
     check for correct error message

'%!warning'
     check for correct warning message

'%!demo'
     demo only executes in interactive mode

'%!#'
     comment: ignore everything within the block

'%!shared x,y,z'
     declare variables for use in multiple tests

'%!function'
     define a function for use in multiple tests

'%!endfunction'
     close a function definition

'%!assert (x, y, tol)'
     shorthand for '%!test assert (x, y, tol)'

   You can also create test scripts for built-in functions and your own
C++ functions.  To do so, put a file with the bare function name (no .m
extension) in a directory in the load path and it will be discovered by
the 'test' function.  Alternatively, you can embed tests directly in
your C++ code:

     /*
     %!test disp ("this is a test")
     */

or

     #if 0
     %!test disp ("this is a test")
     #endif

However, in this case the raw source code will need to be on the load
path and the user will have to remember to type 'test ("funcname.cc")'.

 -- Function File: assert (COND)
 -- Function File: assert (COND, ERRMSG, ...)
 -- Function File: assert (COND, MSG_ID, ERRMSG, ...)
 -- Function File: assert (OBSERVED, EXPECTED)
 -- Function File: assert (OBSERVED, EXPECTED, TOL)

     Produce an error if the specified condition is not met.  'assert'
     can be called in three different ways.

     'assert (COND)'
     'assert (COND, ERRMSG, ...)'
     'assert (COND, MSG_ID, ERRMSG, ...)'
          Called with a single argument COND, 'assert' produces an error
          if COND is zero.  When called with more than one argument the
          additional arguments are passed to the 'error' function.

     'assert (OBSERVED, EXPECTED)'
          Produce an error if observed is not the same as expected.
          Note that OBSERVED and EXPECTED can be scalars, vectors,
          matrices, strings, cell arrays, or structures.

     'assert (OBSERVED, EXPECTED, TOL)'
          Produce an error if observed is not the same as expected but
          equality comparison for numeric data uses a tolerance TOL.  If
          TOL is positive then it is an absolute tolerance which will
          produce an error if 'abs (OBSERVED - EXPECTED) > abs (TOL)'.
          If TOL is negative then it is a relative tolerance which will
          produce an error if 'abs (OBSERVED - EXPECTED) > abs (TOL *
          EXPECTED)'.  If EXPECTED is zero TOL will always be
          interpreted as an absolute tolerance.  If TOL is not scalar
          its dimensions must agree with those of OBSERVED and EXPECTED
          and tests are performed on an element-wise basis.

     See also: *note test: XREFtest, *note fail: XREFfail, *note error:
     XREFerror.

 -- Function File: fail (CODE)
 -- Function File: fail (CODE, PATTERN)
 -- Function File: fail (CODE, "warning", PATTERN)

     Return true if CODE fails with an error message matching PATTERN,
     otherwise produce an error.  Note that CODE is a string and if CODE
     runs successfully, the error produced is:

                    expected error <.> but got none

     Code must be in the form of a string that may be passed by 'fail'
     to the Octave interpreter via the 'evalin' function, that is, a
     (quoted) string constant or a string variable.

     If called with two arguments, the behavior is similar to 'fail
     (CODE)', except the return value will only be true if code fails
     with an error message containing pattern (case sensitive).  If the
     code fails with a different error to that given in pattern, the
     message produced is:

                    expected <pattern>
                    but got <text of actual error>

     The angle brackets are not part of the output.

     Called with three arguments, the behavior is similar to 'fail
     (CODE, PATTERN)', but produces an error if no warning is given
     during code execution or if the code fails.

     See also: *note assert: XREFassert.


File: octave.info,  Node: Demonstration Functions,  Prev: Test Functions,  Up: Test and Demo Functions

B.2 Demonstration Functions
===========================

 -- Command: demo NAME
 -- Command: demo NAME N
 -- Function File: demo ("NAME")
 -- Function File: demo ("NAME", N)

     Run example code block N associated with the function NAME.  If N
     is not specified, all examples are run.

     Examples are stored in the script file, or in a file with the same
     name but no extension located on Octave's load path.  To keep
     examples separate from regular script code, all lines are prefixed
     by '%!'.  Each example must also be introduced by the keyword
     "demo" flush left to the prefix with no intervening spaces.  The
     remainder of the example can contain arbitrary Octave code.  For
     example:

          %!demo
          %! t = 0:0.01:2*pi;
          %! x = sin (t);
          %! plot (t, x);
          %! %-------------------------------------------------
          %! % the figure window shows one cycle of a sine wave

     Note that the code is displayed before it is executed, so a simple
     comment at the end suffices for labeling what is being shown.  It
     is generally not necessary to use 'disp' or 'printf' within the
     demo.

     Demos are run in a function environment with no access to external
     variables.  This means that every demo must have separate
     initialization code.  Alternatively, all demos can be combined into
     a single large demo with the code

          %! input("Press <enter> to continue: ","s");

     between the sections, but this is discouraged.  Other techniques to
     avoid multiple initialization blocks include using multiple plots
     with a new 'figure' command between each plot, or using 'subplot'
     to put multiple plots in the same window.

     Also, because demo evaluates within a function context, you cannot
     define new functions inside a demo.  If you must have function
     blocks, rather than just anonymous functions or inline functions,
     you will have to use 'eval (example ("function",n))' to see them.
     Because eval only evaluates one line, or one statement if the
     statement crosses multiple lines, you must wrap your demo in "if 1
     <demo stuff> endif" with the "if" on the same line as "demo".  For
     example:

          %!demo if 1
          %!  function y=f(x)
          %!    y=x;
          %!  endfunction
          %!  f(3)
          %! endif

     See also: *note test: XREFtest, *note example: XREFexample.

 -- Command: example NAME
 -- Command: example NAME N
 -- Function File: example ("NAME")
 -- Function File: example ("NAME", N)
 -- Function File: [S, IDX] = example (...)

     Display the code for example N associated with the function NAME,
     but do not run it.  If N is not specified, all examples are
     displayed.

     When called with output arguments, the examples are returned in the
     form of a string S, with IDX indicating the ending position of the
     various examples.

     See 'demo' for a complete explanation.

     See also: *note demo: XREFdemo, *note test: XREFtest.

 -- Function File: rundemos ()
 -- Function File: rundemos (DIRECTORY)
     Execute built-in demos for all function files in the specified
     directory.  Also executes demos in any C++ source files found in
     the directory, for use with dynamically linked functions.

     If no directory is specified, operate on all directories in
     Octave's search path for functions.

     See also: *note runtests: XREFruntests, *note path: XREFpath.

 -- Function File: runtests ()
 -- Function File: runtests (DIRECTORY)
     Execute built-in tests for all function files in the specified
     directory.  Also executes tests in any C++ source files found in
     the directory, for use with dynamically linked functions.

     If no directory is specified, operate on all directories in
     Octave's search path for functions.

     See also: *note rundemos: XREFrundemos, *note path: XREFpath.

 -- Function File: speed (F, INIT, MAX_N, F2, TOL)
 -- Function File: [ORDER, N, T_F, T_F2] = speed (...)

     Determine the execution time of an expression (F) for various input
     values (N).  The N are log-spaced from 1 to MAX_N.  For each N, an
     initialization expression (INIT) is computed to create any data
     needed for the test.  If a second expression (F2) is given then the
     execution times of the two expressions are compared.  When called
     without output arguments the results are printed to stdout and
     displayed graphically.

     'F'
          The code expression to evaluate.

     'MAX_N'
          The maximum test length to run.  The default value is 100.
          Alternatively, use '[min_n, max_n]' or specify the N exactly
          with '[n1, n2, ..., nk]'.

     'INIT'
          Initialization expression for function argument values.  Use K
          for the test number and N for the size of the test.  This
          should compute values for all variables used by F.  Note that
          INIT will be evaluated first for k = 0, so things which are
          constant throughout the test series can be computed once.  The
          default value is 'X = randn (N, 1)'.

     'F2'
          An alternative expression to evaluate, so that the speed of
          two expressions can be directly compared.  The default is
          '[]'.

     'TOL'
          Tolerance used to compare the results of expression F and
          expression F2.  If TOL is positive, the tolerance is an
          absolute one.  If TOL is negative, the tolerance is a relative
          one.  The default is 'eps'.  If TOL is 'Inf', then no
          comparison will be made.

     'ORDER'
          The time complexity of the expression O(a*n^p).  This is a
          structure with fields 'a' and 'p'.

     'N'
          The values N for which the expression was calculated *AND* the
          execution time was greater than zero.

     'T_F'
          The nonzero execution times recorded for the expression F in
          seconds.

     'T_F2'
          The nonzero execution times recorded for the expression F2 in
          seconds.  If required, the mean time ratio is simply 'mean
          (T_f ./ T_f2)'.

     The slope of the execution time graph shows the approximate power
     of the asymptotic running time O(n^p).  This power is plotted for
     the region over which it is approximated (the latter half of the
     graph).  The estimated power is not very accurate, but should be
     sufficient to determine the general order of an algorithm.  It
     should indicate if, for example, the implementation is unexpectedly
     O(n^2) rather than O(n) because it extends a vector each time
     through the loop rather than pre-allocating storage.  In the
     current version of Octave, the following is not the expected O(n).

          speed ("for i = 1:n, y{i} = x(i); endfor", "", [1000, 10000])

     But it is if you preallocate the cell array 'y':

          speed ("for i = 1:n, y{i} = x(i); endfor", ...
                 "x = rand (n, 1); y = cell (size (x));", [1000, 10000])

     An attempt is made to approximate the cost of individual
     operations, but it is wildly inaccurate.  You can improve the
     stability somewhat by doing more work for each 'n'.  For example:

          speed ("airy(x)", "x = rand (n, 10)", [10000, 100000])

     When comparing two different expressions (F, F2), the slope of the
     line on the speedup ratio graph should be larger than 1 if the new
     expression is faster.  Better algorithms have a shallow slope.
     Generally, vectorizing an algorithm will not change the slope of
     the execution time graph, but will shift it relative to the
     original.  For example:

          speed ("sum (x)", "", [10000, 100000], ...
                 "v = 0; for i = 1:length (x), v += x(i); endfor")

     The following is a more complex example.  If there was an original
     version of 'xcorr' using for loops and a second version using an
     FFT, then one could compare the run speed for various lags as
     follows, or for a fixed lag with varying vector lengths as follows:

          speed ("xcorr (x, n)", "x = rand (128, 1);", 100,
                 "xcorr_orig (x, n)", -100*eps)
          speed ("xcorr (x, 15)", "x = rand (20+n, 1);", 100,
                 "xcorr_orig (x, n)", -100*eps)

     Assuming one of the two versions is in xcorr_orig, this would
     compare their speed and their output values.  Note that the FFT
     version is not exact, so one must specify an acceptable tolerance
     on the comparison '100*eps'.  In this case, the comparison should
     be computed relatively, as 'abs ((X - Y) ./ Y)' rather than
     absolutely as 'abs (X - Y)'.

     Type 'example ("speed")' to see some real examples or 'demo
     ("speed")' to run them.


File: octave.info,  Node: Tips and Standards,  Next: Contributing Guidelines,  Prev: Test and Demo Functions,  Up: Top

Appendix C Tips and Standards
*****************************

This chapter describes no additional features of Octave.  Instead it
gives advice on making effective use of the features described in the
previous chapters.

* Menu:

* Style Tips::                  Writing clean and robust programs.
* Comment Tips::                Conventions for writing comments.
* Function Headers::            Standard headers for functions.
* Documentation Tips::          Writing readable documentation strings.


File: octave.info,  Node: Style Tips,  Next: Comment Tips,  Up: Tips and Standards

C.1 Writing Clean Octave Programs
=================================

Here are some tips for avoiding common errors in writing Octave code
intended for widespread use:

   * Since all global variables share the same name space, and all
     functions share another name space, you should choose a short word
     to distinguish your program from other Octave programs.  Then take
     care to begin the names of all global variables, constants, and
     functions with the chosen prefix.  This helps avoid name conflicts.

     If you write a function that you think ought to be added to Octave
     under a certain name, such as 'fiddle_matrix', don't call it by
     that name in your program.  Call it 'mylib_fiddle_matrix' in your
     program, and send mail to <maintainers@octave.org> suggesting that
     it be added to Octave.  If and when it is, the name can be changed
     easily enough.

     If one prefix is insufficient, your package may use two or three
     alternative common prefixes, so long as they make sense.

     Separate the prefix from the rest of the symbol name with an
     underscore '_'.  This will be consistent with Octave itself and
     with most Octave programs.

   * When you encounter an error condition, call the function 'error'
     (or 'usage').  The 'error' and 'usage' functions do not return.
     *Note Errors::.

   * Please put a copyright notice on the file if you give copies to
     anyone.  Use the same lines that appear at the top of the function
     files distributed with Octave.  If you have not signed papers to
     assign the copyright to anyone else, then place your name in the
     copyright notice.


File: octave.info,  Node: Comment Tips,  Next: Function Headers,  Prev: Style Tips,  Up: Tips and Standards

C.2 Tips on Writing Comments
============================

Here are the conventions to follow when writing comments.

'#'
     Comments that start with a single sharp-sign, '#', should all be
     aligned to the same column on the right of the source code.  Such
     comments usually explain how the code on the same line does its
     job.  In the Emacs mode for Octave, the 'M-;'
     ('indent-for-comment') command automatically inserts such a '#' in
     the right place, or aligns such a comment if it is already present.

'##'
     Comments that start with a double sharp-sign, '##', should be
     aligned to the same level of indentation as the code.  Such
     comments usually describe the purpose of the following lines or the
     state of the program at that point.

The indentation commands of the Octave mode in Emacs, such as 'M-;'
('indent-for-comment') and 'TAB' ('octave-indent-line') automatically
indent comments according to these conventions, depending on the number
of semicolons.  *Note Manipulating Comments: (emacs)Comments.


File: octave.info,  Node: Function Headers,  Next: Documentation Tips,  Prev: Comment Tips,  Up: Tips and Standards

C.3 Conventional Headers for Octave Functions
=============================================

Octave has conventions for using special comments in function files to
give information such as who wrote them.  This section explains these
conventions.

   The top of the file should contain a copyright notice, followed by a
block of comments that can be used as the help text for the function.
Here is an example:

     ## Copyright (C) 1996, 1997, 2007 John W. Eaton
     ##
     ## This file is part of Octave.
     ##
     ## Octave is free software; you can redistribute it and/or
     ## modify it under the terms of the GNU General Public
     ## License as published by the Free Software Foundation;
     ## either version 3 of the License, or (at your option) any
     ## later version.
     ##
     ## Octave is distributed in the hope that it will be useful,
     ## but WITHOUT ANY WARRANTY; without even the implied
     ## warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
     ## PURPOSE.  See the GNU General Public License for more
     ## details.
     ##
     ## You should have received a copy of the GNU General Public
     ## License along with Octave; see the file COPYING.  If not,
     ## see <http://www.gnu.org/licenses/>.

     ## usage: [IN, OUT, PID] = popen2 (COMMAND, ARGS)
     ##
     ## Start a subprocess with two-way communication.  COMMAND
     ## specifies the name of the command to start.  ARGS is an
     ## array of strings containing options for COMMAND.  IN and
     ## OUT are the file ids of the input and streams for the
     ## subprocess, and PID is the process id of the subprocess,
     ## or -1 if COMMAND could not be executed.
     ##
     ## Example:
     ##
     ##  [in, out, pid] = popen2 ("sort", "-nr");
     ##  fputs (in, "these\nare\nsome\nstrings\n");
     ##  fclose (in);
     ##  while (ischar (s = fgets (out)))
     ##    fputs (stdout, s);
     ##  endwhile
     ##  fclose (out);

   Octave uses the first block of comments in a function file that do
not appear to be a copyright notice as the help text for the file.  For
Octave to recognize the first comment block as a copyright notice, it
must start with the word 'Copyright' after stripping the leading comment
characters.

   After the copyright notice and help text come several "header
comment" lines, each beginning with '## HEADER-NAME:'.  For example,

     ## Author: jwe
     ## Keywords: subprocesses input-output
     ## Maintainer: jwe

   Here is a table of the conventional possibilities for HEADER-NAME:

'Author'
     This line states the name and net address of at least the principal
     author of the library.

          ## Author: John W. Eaton <jwe@octave.org>

'Maintainer'
     This line should contain a single name/address as in the Author
     line, or an address only, or the string 'jwe'.  If there is no
     maintainer line, the person(s) in the Author field are presumed to
     be the maintainers.  The example above is mildly bogus because the
     maintainer line is redundant.

     The idea behind the 'Author' and 'Maintainer' lines is to make
     possible a function to "send mail to the maintainer" without having
     to mine the name out by hand.

     Be sure to surround the network address with '<...>' if you include
     the person's full name as well as the network address.

'Created'
     This optional line gives the original creation date of the file.
     For historical interest only.

'Version'
     If you wish to record version numbers for the individual Octave
     program, put them in this line.

'Adapted-By'
     In this header line, place the name of the person who adapted the
     library for installation (to make it fit the style conventions, for
     example).

'Keywords'
     This line lists keywords.  Eventually, it will be used by an
     apropos command to allow people will find your package when they're
     looking for things by topic area.  To separate the keywords, you
     can use spaces, commas, or both.

   Just about every Octave function ought to have the 'Author' and
'Keywords' header comment lines.  Use the others if they are
appropriate.  You can also put in header lines with other header
names--they have no standard meanings, so they can't do any harm.


File: octave.info,  Node: Documentation Tips,  Prev: Function Headers,  Up: Tips and Standards

C.4 Tips for Documentation Strings
==================================

As noted above, documentation is typically in a commented header block
on an Octave function following the copyright statement.  The help
string shown above is an unformatted string and will be displayed as is
by Octave.  Here are some tips for the writing of documentation strings.

   * Every command, function, or variable intended for users to know
     about should have a documentation string.

   * An internal variable or subroutine of an Octave program might as
     well have a documentation string.

   * The first line of the documentation string should consist of one or
     two complete sentences that stand on their own as a summary.

     The documentation string can have additional lines that expand on
     the details of how to use the function or variable.  The additional
     lines should also be made up of complete sentences.

   * For consistency, phrase the verb in the first sentence of a
     documentation string as an infinitive with "to" omitted.  For
     instance, use "Return the frob of A and B." in preference to
     "Returns the frob of A and B."  Usually it looks good to do
     likewise for the rest of the first paragraph.  Subsequent
     paragraphs usually look better if they have proper subjects.

   * Write documentation strings in the active voice, not the passive,
     and in the present tense, not the future.  For instance, use
     "Return a list containing A and B." instead of "A list containing A
     and B will be returned."

   * Avoid using the word "cause" (or its equivalents) unnecessarily.
     Instead of, "Cause Octave to display text in boldface," just write
     "Display text in boldface."

   * Use two spaces between the period marking the end of a sentence and
     the word which opens the next sentence.  This convention has no
     effect for typeset formats like TeX, but improves the readability
     of the documentation in fixed-width environments such as the Info
     reader.

   * Do not start or end a documentation string with whitespace.

   * Format the documentation string so that it fits within an 80-column
     screen.  It is a good idea for most lines to be no wider than 60
     characters.

     However, rather than simply filling the entire documentation
     string, you can make it much more readable by choosing line breaks
     with care.  Use blank lines between topics if the documentation
     string is long.

   * *Do not* indent subsequent lines of a documentation string so that
     the text is lined up in the source code with the text of the first
     line.  This looks nice in the source code, but looks bizarre when
     users view the documentation.  Remember that the indentation before
     the starting double-quote is not part of the string!

   * When choosing variable names try to adhere to the following
     guidelines.

     vectors :
          x,y,z,t,w

     matrices :
          A,B,M

     strings :
          str,s

     filenames :
          fname

     cells,cellstrs :
          c,cstr

   * The documentation string for a variable that is a yes-or-no flag
     should start with words such as "Nonzero means...", to make it
     clear that all nonzero values are equivalent and indicate
     explicitly what zero and nonzero mean.

   * When a function's documentation string mentions the value of an
     argument of the function, use the argument name in capital letters
     as if it were a name for that value.  Thus, the documentation
     string of the operator '/' refers to its second argument as
     'DIVISOR', because the actual argument name is 'divisor'.

     Also use all caps for meta-syntactic variables, such as when you
     show the decomposition of a list or vector into subunits, some of
     which may vary.

   Octave also allows extensive formatting of the help string of
functions using Texinfo.  The effect on the online documentation is
relatively small, but makes the help string of functions conform to the
help of Octave's own functions.  However, the effect on the appearance
of printed or online documentation will be greatly improved.

   The fundamental building block of Texinfo documentation strings is
the Texinfo-macro '@deftypefn', which takes three arguments: The class
the function is in, its output arguments, and the function's signature.
Typical classes for functions include 'Function File' for standard
Octave functions, and 'Loadable Function' for dynamically linked
functions.  A skeletal Texinfo documentation string therefore looks like
this

     -*- texinfo -*-
     @deftypefn {Function File} {@var{ret} =} fn (...)
     @cindex index term
     Help text in Texinfo format.  Code samples should be marked
     like @code{sample of code} and variables should be marked
     as @var{variable}.
     @seealso{fn2, fn3}
     @end deftypefn

   This help string must be commented in user functions, or in the help
string of the 'DEFUN_DLD' macro for dynamically loadable functions.  The
important aspects of the documentation string are

-*- texinfo -*-
     This string signals Octave that the following text is in Texinfo
     format, and should be the first part of any help string in Texinfo
     format.

@deftypefn {class} ... @end deftypefn
     The entire help string should be enclosed within the block defined
     by deftypefn.

@cindex index term
     This generates an index entry, and can be useful when the function
     is included as part of a larger piece of documentation.  It is
     ignored within Octave's help viewer.  Only one index term may
     appear per line but multiple @cindex lines are valid if the
     function should be filed under different terms.

@var{variable}
     All variables should be marked with this macro.  The markup of
     variables is then changed appropriately for display.

@code{sample of code}
     All samples of code should be marked with this macro for the same
     reasons as the @var macro.

@qcode{"sample_code"}
@qcode{'sample_code'}
     All samples of code which are quoted should use this more
     specialized macro.  This happens frequently when discussing
     graphics properties such as "position" or options such as
     "on"/"off".

@seealso{function2, function3}
     This is a comma separated list of function names that allows cross
     referencing from one function documentation string to another.

   Texinfo format has been designed to generate output for online
viewing with text terminals as well as generating high-quality printed
output.  To these ends, Texinfo has commands which control the diversion
of parts of the document into a particular output processor.  Three
formats are of importance: info, HTML, and TeX.  These are selected with

     @ifinfo
     Text area for info only
     @end ifinfo

     @ifhtml
     Text area for HTML only
     @end ifhtml

     @tex
     Text area for TeX only
     @end tex

   Note that often TeX output can be used in HTML documents and so often
the '@ifhtml' blocks are unnecessary.  If no specific output processor
is chosen, by default, the text goes into all output processors.  It is
usual to have the above blocks in pairs to allow the same information to
be conveyed in all output formats, but with a different markup.
Currently, most Octave documentation only makes a distinction between
TeX and all other formats.  Therefore, the following construct is seen
repeatedly.

     @tex
     text for TeX only
     @end tex
     @ifnottex
     text for info, HTML, plaintext
     @end ifnottex

   Another important feature of Texinfo that is often used in Octave
help strings is the '@example' environment.  An example of its use is

     @example
     @group
     @code{2 * 2}
     @result{} 4
     @end group
     @end example

which produces

     2 * 2
     => 4

   The '@group' block prevents the example from being split across a
page boundary, while the '@result{}' macro produces a right arrow
signifying the result of a command.  If your example is larger than 20
lines it is better _NOT_ to use grouping so that a reasonable page
boundary can be calculated.

   In many cases a function has multiple ways in which it can be called,
and the '@deftypefnx' macro can be used to give alternatives.  For
example

     -*- texinfo -*-
     @deftypefn  {Function File} {@var{a} =} fn (@var{x}, ...)
     @deftypefnx {Function File} {@var{a} =} fn (@var{y}, ...)
     Help text in Texinfo format.
     @end deftypefn

   Many complete examples of Texinfo documentation can be taken from the
help strings for the Octave functions themselves.  A relatively complete
example of which is the 'nchoosek' function.  The Texinfo documentation
string for 'nchoosek' is

     -*- texinfo -*-
     @deftypefn  {Function File} {@var{c} =} nchoosek (@var{n}, @var{k})
     @deftypefnx {Function File} {@var{c} =} nchoosek (@var{set}, @var{k})

     Compute the binomial coefficient or all combinations of a set of items.

     If @var{n} is a scalar then calculate the binomial coefficient
     of @var{n} and @var{k} which is defined as
     @tex
     $$
      {n \choose k} = {n (n-1) (n-2) \cdots (n-k+1) \over k!}
                    = {n! \over k! (n-k)!}
     $$
     @end tex
     @ifnottex

     @example
     @group
      /   \
      | n |    n (n-1) (n-2) @dots{} (n-k+1)       n!
      |   |  = ------------------------- =  ---------
      | k |               k!                k! (n-k)!
      \   /
     @end group
     @end example

     @end ifnottex
     @noindent
     This is the number of combinations of @var{n} items taken in groups of
     size @var{k}.

     If the first argument is a vector, @var{set}, then generate all
     combinations of the elements of @var{set}, taken @var{k} at a time, with
     one row per combination.  The result @var{c} has @var{k} columns and
     @w{@code{nchoosek (length (@var{set}), @var{k})}} rows.

     For example:

     How many ways can three items be grouped into pairs?

     @example
     @group
     nchoosek (3, 2)
        @result{} 3
     @end group
     @end example

     What are the possible pairs?

     @example
     @group
     nchoosek (1:3, 2)
        @result{}  1   2
            1   3
            2   3
     @end group
     @end example

     @code{nchoosek} works only for non-negative, integer arguments.  Use
     @code{bincoeff} for non-integer and negative scalar arguments, or for
     computing many binomial coefficients at once with vector inputs
     for @var{n} or @var{k}.

     @seealso{bincoeff, perms}
     @end deftypefn

which demonstrates most of the concepts discussed above.


File: octave.info,  Node: Contributing Guidelines,  Next: Obsolete Functions,  Prev: Tips and Standards,  Up: Top

Appendix D Contributing Guidelines
**********************************

This chapter is dedicated to those who wish to contribute code to
Octave.

* Menu:

* How to Contribute::
* Building the Development Sources::
* Basics of Generating a Changeset::
* General Guidelines::
* Octave Sources (m-files)::
* C++ Sources::
* Other Sources::


File: octave.info,  Node: How to Contribute,  Next: Building the Development Sources,  Up: Contributing Guidelines

D.1 How to Contribute
=====================

The mailing list for Octave development discussions is
<maintainers@octave.org>.  Patches should be submitted to Octave's patch
tracker (https://savannah.gnu.org/patch/?func=additem&group=octave).
This concerns the development of Octave core, i.e., code that goes in to
Octave directly.  You may consider developing and publishing a package
instead; a great place for this is the allied Octave-Forge project
(<http://octave.sourceforge.net>).  Note that the Octave core project is
inherently more conservative and follows narrower rules.


File: octave.info,  Node: Building the Development Sources,  Next: Basics of Generating a Changeset,  Prev: How to Contribute,  Up: Contributing Guidelines

D.2 Building the Development Sources
====================================

The directions for building from the development sources change from
time to time, so you should read the resources for developers on the web
or in the development sources archive.  Start here:
<http://www.octave.org/get-involved.html>.


File: octave.info,  Node: Basics of Generating a Changeset,  Next: General Guidelines,  Prev: Building the Development Sources,  Up: Contributing Guidelines

D.3 Basics of Generating a Changeset
====================================

The best way to contribute is to create a Mercurial changeset and submit
it to the bug (http://savannah.gnu.org/bugs/?group=octave) or patch
(http://savannah.gnu.org/patch/?func=additem&group=octave) trackers(1).
Mercurial is the source code management system currently used to develop
Octave.  Other forms of contributions (e.g., simple diff patches) are
also acceptable, but they slow down the review process.  If you want to
make more contributions, you should really get familiar with Mercurial.
A good place to start is
<http://www.selenic.com/mercurial/wiki/index.cgi/Tutorial>.  There you
will also find help about how to install Mercurial.

   A simple contribution sequence could look like this:

     hg clone http://www.octave.org/hg/octave
                                  # make a local copy of the octave
                                  # source repository
     cd octave
     # change some sources...
     hg commit -m "make Octave the coolest software ever"
                                  # commit the changeset into your
                                  # local repository
     hg export -o ../cool.diff tip
                                  # export the changeset to a diff
                                  # file
     # attach ../cool.diff to your bug report

   You may want to get familiar with Mercurial queues to manage your
changesets.  To work with queues you must activate the extension mq with
the following entry in Mercurial's configuration file '.hgrc' (or
'Mercurial.ini' on Windows):

     [extensions]
     mq=

   Here is a slightly more complex example using Mercurial queues, where
work on two unrelated changesets is done in parallel and one of the
changesets is updated after discussion on the bug tracker:

     hg qnew nasty_bug            # create a new patch
     # change sources...
     hg qref                      # save the changes into the patch
     # change even more...
     hg qref -m "solution to nasty bug!"
                                  # save again with commit message
     hg export -o ../nasty.diff tip
                                  # export the patch
     # attach ../nasty.diff to your bug report
     hg qpop                      # undo the application of the patch
                                  # and remove the changes from the
                                  # source tree
     hg qnew doc_improvements     # create an unrelated patch
     # change doc sources...
     hg qref -m "could not find myfav.m in the doc"
                                  # save the changes into the patch
     hg export -o ../doc.diff tip
                                  # export the second patch
     # attach ../doc.diff to your bug report
     hg qpop
     # discussion in the bug tracker ...
     hg qpush nasty_bug           # apply the patch again
     # change sources yet again ...
     hg qref
     hg export -o ../nasty2.diff tip
     # attach ../nasty2.diff to your bug report

   Mercurial has a few more useful extensions that really should be
enabled.  They are not enabled by default due to a number of factors
(mostly because they don't work in all terminal types).

   The following entries in the '.hgrc' are recommended

     [extensions]
     graphlog=
     color=
     progress=
     pager=

   For the color extension, default color and formatting of 'hg status'
can be modified by

     [color]
     status.modified = magenta bold
     status.added = green bold
     status.removed = red bold
     status.deleted = cyan bold
     status.unknown = black  bold
     status.ignored = black bold

   Sometimes a few further improvements for the pager extension are
necessary.  The following options should not be enabled unless paging is
not working correctly.

     [pager]
     # Some options for the less pager, see less(1) for their meaning.
     pager = LESS='FSRX' less

     # Some commands that aren't paged by default; also enable paging
     # for them
     attend = tags, help, annotate, cat, diff, export, status, \
              outgoing, incoming

   Enabling the described extensions should immediately lead to a
difference when using the command line version of hg.  Of these options,
the only one that enables a new command is graphlog.  It is recommanded
that to use the command 'hg glog', instead of 'hg log', for a better
feel about what commits are being based on.

   ---------- Footnotes ----------

   (1) Please use the patch tracker only for patches which add new
features.  If you have a patch to submit that fixes a bug, you should
use the bug tracker instead.


File: octave.info,  Node: General Guidelines,  Next: Octave Sources (m-files),  Prev: Basics of Generating a Changeset,  Up: Contributing Guidelines

D.4 General Guidelines
======================

All Octave's sources are distributed under the GNU General Public
License (GPL). Currently, Octave uses GPL version 3.  For details about
this license, see <http://www.gnu.org/licenses/gpl.html>.  Therefore,
whenever you create a new source file, it should have the following
comment header (use appropriate year, name and comment marks):

     ## Copyright (C) 1996-2013 John W. Eaton <jwe@octave.org>
     ##
     ## This file is part of Octave.
     ##
     ## Octave is free software; you can redistribute it and/or modify it
     ## under the terms of the GNU General Public License as published by
     ## the Free Software Foundation; either version 3 of the License, or
     ## (at your option) any later version.
     ##
     ## Octave is distributed in the hope that it will be useful, but
     ## WITHOUT ANY WARRANTY; without even the implied warranty of
     ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     ## GNU General Public License for more details.
     ##
     ## You should have received a copy of the GNU General Public License
     ## along with Octave; see the file COPYING.  If not,
     ## see <http://www.gnu.org/licenses/>.

   Always include commit messages in changesets.  After making your
source changes, record and briefly describe the changes in your commit
message.  You should have previously configured your '.hgrc' (or
'Mercurial.ini' on Windows) with your name and email, which will be
automatically added to your commit message.  Your commit message should
have a brief one-line explanation of what the commit does.  If you are
patching a bug, this one-line explanation should mention the bug number
at the end.  If your change is small and only touches one file then this
is typically sufficient.  If you are modifying several files, or several
parts of one file, you should enumerate your changes roughly following
the GNU coding standards for changelogs, as in the following example:

     look for methods before constructors

     * symtab.cc (symbol_table::fcn_info::fcn_info_rep::find):
     Look for class methods before constructors, contrary to MATLAB
     documentation.

     * test/ctor-vs-method: New directory of test classes.
     * test/test_ctor_vs_method.m: New file.
     * test/Makefile.am: Include ctor-vs-method/module.mk.
     (FCN_FILES): Include test_ctor_vs_method.m in the list.

In this example, the names of the file changed is listed first, and in
parentheses the name of the function in that file that was modified.
There is no need to mention the function for m-files that only contain
one function.  The commit message should describe what was changed, not
why it was changed.  Any explanation for why a change is needed should
appear as comments in the code, particularly if there is something that
might not be obvious to someone reading it later.

   When submitting code which addresses a known bug on the Octave bug
tracker (<http://bugs.octave.org>), please add '(bug #XXXXX)' to the
first line of the commit messages.  For example:

     Fix bug for complex input for gradient (bug #34292).

   The preferred comment mark for places that may need further attention
is 'FIXME:'.


File: octave.info,  Node: Octave Sources (m-files),  Next: C++ Sources,  Prev: General Guidelines,  Up: Contributing Guidelines

D.5 Octave Sources (m-files)
============================

Don't use tabs.  Tabs cause trouble.  If you are used to them, set up
your editor so that it converts tabs to spaces.  Indent the bodies of
statement blocks.  The recommended indent is 2 spaces.  When calling
functions, put spaces after commas and before the calling parentheses,
like this:

       x = max (sin (y+3), 2);

An exception are matrix or cell constructors:

       [sin(x), cos(x)]
       {sin(x), cos(x)}

Here, putting spaces after 'sin', 'cos' would result in a parse error.
For an indexing expression, do not put a space after the identifier
(this differentiates indexing and function calls nicely).  The space
after a comma is not necessary if index expressions are simple, i.e.,
you may write

       A(:,i,j)

but

       A([1:i-1;i+1:n], XI(:,2:n-1))

   Use lowercase names if possible.  Uppercase is acceptable for
variable names consisting of 1-2 letters.  Do not use mixed case names.
Function names must be lowercase.  Function names are global, so choose
them wisely.

   Always use a specific end-of-block statement (like 'endif',
'endswitch') rather than the generic 'end'.

   Enclose the 'if', 'while', 'until', and 'switch' conditions in
parentheses, as in C:

     if (isvector (a))
       s = sum (a);
     endif

Do not do this, however, with the iteration counter portion of a 'for'
statement.  Write:

     for i = 1:n
       b(i) = sum (a(:,i));
     endfor


File: octave.info,  Node: C++ Sources,  Next: Other Sources,  Prev: Octave Sources (m-files),  Up: Contributing Guidelines

D.6 C++ Sources
===============

Don't use tabs.  Tabs cause trouble.  If you are used to them, set up
your editor so that it converts tabs to spaces.  Format function headers
like this:

     static bool
     matches_patterns (const string_vector& patterns, int pat_idx,
                       int num_pat, const std::string& name)

The function name should start in column 1, and multi-line argument
lists should be aligned on the first char after the open parenthesis.
You should put a space before the left open parenthesis and after
commas, for both function definitions and function calls.

   The recommended indent is 2 spaces.  When indenting, indent the
statement after control structures (like 'if', 'while', etc.).  If there
is a compound statement, indent _both_ the curly braces and the body of
the statement (so that the body gets indented by _two_ indents).
Example:

     if (have_args)
       {
         idx.push_back (first_args);
         have_args = false;
       }
     else
       idx.push_back (make_value_list (*p_args, *p_arg_nm, &tmp));

If you have nested 'if' statements, use extra braces for extra
clarification.

   Split long expressions in such a way that a continuation line starts
with an operator rather than identifier.  If the split occurs inside
braces, continuation should be aligned with the first char after the
innermost braces enclosing the split.  Example:

     SVD::type type = ((nargout == 0 || nargout == 1)
                       ? SVD::sigma_only
                       : (nargin == 2) ? SVD::economy : SVD::std);

Consider putting extra braces around a multi-line expression to make it
more readable, even if they are not necessary.  Also, do not hesitate to
put extra braces anywhere if it improves clarity.

   Declare variables just before they are needed.  Use local variables
of blocks--it helps optimization.  Don't write a multi-line variable
declaration with a single type specification and multiple variables.  If
the variables don't fit on single line, repeat the type specification.
Example:

     octave_value retval;

     octave_idx_type nr = b.rows ();
     octave_idx_type nc = b.cols ();

     double d1, d2;

   Use lowercase names if possible.  Uppercase is acceptable for
variable names consisting of 1-2 letters.  Do not use mixed case names.

   Use Octave's types and classes if possible.  Otherwise, use the C++
standard library.  Use of STL containers and algorithms is encouraged.
Use templates wisely to reduce code duplication.  Avoid comma
expressions, labels and gotos, and explicit typecasts.  If you need to
typecast, use the modern C++ casting operators.  In functions, minimize
the number of 'return' statements--use nested 'if' statements if
possible.


File: octave.info,  Node: Other Sources,  Prev: C++ Sources,  Up: Contributing Guidelines

D.7 Other Sources
=================

Apart from C++ and Octave language (m-files), Octave's sources include
files written in C, Fortran, M4, Perl, Unix shell, AWK, Texinfo, and
TeX.  There are not many rules to follow when using these other
languages; some of them are summarized below.  In any case, the golden
rule is: if you modify a source file, try to follow any conventions you
can detect in the file or other similar files.

   For C you should obviously follow all C++ rules that can apply.

   If you modify a Fortran file, you should stay within Fortran 77 with
common extensions like 'END DO'.  Currently, we want all sources to be
compilable with the f2c and g77 compilers, without special flags if
possible.  This usually means that non-legacy compilers also accept the
sources.

   The M4 macro language is mainly used for Autoconf configuration
files.  You should follow normal M4 rules when contributing to these
files.  Some M4 files come from external source, namely the Autoconf
archive <http://autoconf-archive.cryp.to>.

   If you give a code example in the documentation written in Texinfo
with the '@example' environment, you should be aware that the text
within such an environment will not be wrapped.  It is recommended that
you keep the lines short enough to fit on pages in the generated pdf or
ps documents.  Here is a ruler (in an '@example' environment) for
finding the appropriate line width:

              1         2         3         4         5         6
     123456789012345678901234567890123456789012345678901234567890


File: octave.info,  Node: Obsolete Functions,  Next: Trouble,  Prev: Contributing Guidelines,  Up: Top

Appendix E Obsolete Functions
*****************************

After being marked as deprecated for two major releases, the following
functions have been removed from Octave.  The third column of the table
shows the version of Octave in which the function was removed.  Prior to
removal, each function in the list was marked as deprecated for at least
two major releases.  All deprecated functions issue warnings explaining
that they will be removed in a future version of Octave, and which
function should be used instead.

   Replacement functions do not always accept precisely the same
arguments as the obsolete function, but should provide equivalent
functionality.

Obsolete Function      Replacement            Version
----------------------------------------------------------
'beta_cdf'             'betacdf'              3.4.0
'beta_inv'             'betainv'              3.4.0
'beta_pdf'             'betapdf'              3.4.0
'beta_rnd'             'betarnd'              3.4.0
'binomial_cdf'         'binocdf'              3.4.0
'binomial_inv'         'binoinv'              3.4.0
'binomial_pdf'         'binopdf'              3.4.0
'binomial_rnd'         'binornd'              3.4.0
'chisquare_cdf'        'chi2cdf'              3.4.0
'chisquare_inv'        'chi2inv'              3.4.0
'chisquare_pdf'        'chi2pdf'              3.4.0
'chisquare_rnd'        'chi2rnd'              3.4.0
'clearplot'            'clf'                  3.4.0
'com2str'              'num2str'              3.4.0
'exponential_cdf'      'expcdf'               3.4.0
'exponential_inv'      'expinv'               3.4.0
'exponential_pdf'      'exppdf'               3.4.0
'exponential_rnd'      'exprnd'               3.4.0
'f_cdf'                'fcdf'                 3.4.0
'f_inv'                'finv'                 3.4.0
'f_pdf'                'fpdf'                 3.4.0
'f_rnd'                'frnd'                 3.4.0
'gamma_cdf'            'gamcdf'               3.4.0
'gamma_inv'            'gaminv'               3.4.0
'gamma_pdf'            'gampdf'               3.4.0
'gamma_rnd'            'gamrnd'               3.4.0
'geometric_cdf'        'geocdf'               3.4.0
'geometric_inv'        'geoinv'               3.4.0
'geometric_pdf'        'geopdf'               3.4.0
'geometric_rnd'        'geornd'               3.4.0
'hypergeometric_cdf'   'hygecdf'              3.4.0
'hypergeometric_inv'   'hygeinv'              3.4.0
'hypergeometric_pdf'   'hygepdf'              3.4.0
'hypergeometric_rnd'   'hygernd'              3.4.0
'intersection'         'intersect'            3.4.0
'is_bool'              'isbool'               3.4.0
'is_complex'           'iscomplex'            3.4.0
'is_list'              'islist'               3.4.0
'is_matrix'            'ismatrix'             3.4.0
'is_scalar'            'isscalar'             3.4.0
'is_square'            'issquare'             3.4.0
'is_stream'            'isstream'             3.4.0
'is_struct'            'isstruct'             3.4.0
'is_symmetric'         'issymmetric'          3.4.0
'is_vector'            'isvector'             3.4.0
'lognormal_cdf'        'logncdf'              3.4.0
'lognormal_inv'        'logninv'              3.4.0
'lognormal_pdf'        'lognpdf'              3.4.0
'lognormal_rnd'        'lognrnd'              3.4.0
'meshdom'              'meshgrid'             3.4.0
'normal_cdf'           'normcdf'              3.4.0
'normal_inv'           'norminv'              3.4.0
'normal_pdf'           'normpdf'              3.4.0
'normal_rnd'           'normrnd'              3.4.0
'pascal_cdf'           'nbincdf'              3.4.0
'pascal_inv'           'nbininv'              3.4.0
'pascal_pdf'           'nbinpdf'              3.4.0
'pascal_rnd'           'nbinrnd'              3.4.0
'poisson_cdf'          'poisscdf'             3.4.0
'poisson_inv'          'poissinv'             3.4.0
'poisson_pdf'          'poisspdf'             3.4.0
'poisson_rnd'          'poissrnd'             3.4.0
'polyinteg'            'polyint'              3.4.0
'struct_contains'      'isfield'              3.4.0
'struct_elements'      'fieldnames'           3.4.0
't_cdf'                'tcdf'                 3.4.0
't_inv'                'tinv'                 3.4.0
't_pdf'                'tpdf'                 3.4.0
't_rnd'                'trnd'                 3.4.0
'uniform_cdf'          'unifcdf'              3.4.0
'uniform_inv'          'unifinv'              3.4.0
'uniform_pdf'          'unifpdf'              3.4.0
'uniform_rnd'          'unifrnd'              3.4.0
'weibull_cdf'          'wblcdf'               3.4.0
'weibull_inv'          'wblinv'               3.4.0
'weibull_pdf'          'wblpdf'               3.4.0
'weibull_rnd'          'wblrnd'               3.4.0
'wiener_rnd'           'wienrnd'              3.4.0
'create_set'           'unique'               3.6.0
'dmult'                'diag (A) * B'         3.6.0
'iscommand'            None                   3.6.0
'israwcommand'         None                   3.6.0
'lchol'                'chol (...,            3.6.0
                       "lower")'
'loadimage'            'load' or 'imread'     3.6.0
'mark_as_command'      None                   3.6.0
'mark_as_rawcommand'   None                   3.6.0
'spatan2'              'atan2'                3.6.0
'spchol'               'chol'                 3.6.0
'spchol2inv'           'chol2inv'             3.6.0
'spcholinv'            'cholinv'              3.6.0
'spcumprod'            'cumprod'              3.6.0
'spcumsum'             'cumsum'               3.6.0
'spdet'                'det'                  3.6.0
'spdiag'               'sparse (diag          3.6.0
                       (...))'
'spfind'               'find'                 3.6.0
'sphcat'               'horzcat'              3.6.0
'spinv'                'inv'                  3.6.0
'spkron'               'kron'                 3.6.0
'splchol'              'chol (...,            3.6.0
                       "lower")'
'split'                'char (strsplit (s,    3.6.0
                       t))'
'splu'                 'lu'                   3.6.0
'spmax'                'max'                  3.6.0
'spmin'                'min'                  3.6.0
'spprod'               'prod'                 3.6.0
'spqr'                 'qr'                   3.6.0
'spsum'                'sum'                  3.6.0
'spsumsq'              'sumsq'                3.6.0
'spvcat'               'vertcat'              3.6.0
'str2mat'              'char'                 3.6.0
'unmark_command'       None                   3.6.0
'unmark_rawcommand'    None                   3.6.0


File: octave.info,  Node: Trouble,  Next: Installation,  Prev: Obsolete Functions,  Up: Top

Appendix F Known Causes of Trouble
**********************************

This section describes known problems that affect users of Octave.  Most
of these are not Octave bugs per se--if they were, we would fix them.
But the result for a user may be like the result of a bug.

   Some of these problems are due to bugs in other software, some are
missing features that are too much work to add, and some are places
where people's opinions differ as to what is best.

* Menu:

* Actual Bugs::                 Bugs we will fix later.
* Reporting Bugs::
* Service::


File: octave.info,  Node: Actual Bugs,  Next: Reporting Bugs,  Up: Trouble

F.1 Actual Bugs We Haven't Fixed Yet
====================================

   * Output that comes directly from Fortran functions is not sent
     through the pager and may appear out of sequence with other output
     that is sent through the pager.  One way to avoid this is to force
     pending output to be flushed before calling a function that will
     produce output from within Fortran functions.  To do this, use the
     command

          fflush (stdout)

     Another possible workaround is to use the command

          page_screen_output (false);

     to turn the pager off.

   A list of ideas for future enhancements is distributed with Octave.
See the file 'PROJECTS' in the top level directory in the source
distribution.


File: octave.info,  Node: Reporting Bugs,  Next: Service,  Prev: Actual Bugs,  Up: Trouble

F.2 Reporting Bugs
==================

Your bug reports play an essential role in making Octave reliable.

   When you encounter a problem, the first thing to do is to see if it
is already known.  *Note Trouble::.  If it isn't known, then you should
report the problem.

   Reporting a bug may help you by bringing a solution to your problem,
or it may not.  In any case, the principal function of a bug report is
to help the entire community by making the next version of Octave work
better.  Bug reports are your contribution to the maintenance of Octave.

   In order for a bug report to serve its purpose, you must include the
information that makes it possible to fix the bug.

* Menu:

* Bug Criteria::
* Bug Tracker::        Where to submit your bug report.
* Bug Reporting::      How to report a bug effectively.
* Sending Patches::    How to send a patch for Octave.


File: octave.info,  Node: Bug Criteria,  Next: Bug Tracker,  Up: Reporting Bugs

F.2.1 Have You Found a Bug?
---------------------------

If you are not sure whether you have found a bug, here are some
guidelines:

   * If Octave gets a fatal signal, for any input whatever, that is a
     bug.  Reliable interpreters never crash.

   * If Octave produces incorrect results, for any input whatever, that
     is a bug.

   * Some output may appear to be incorrect when it is in fact due to a
     program whose behavior is undefined, which happened by chance to
     give the desired results on another system.  For example, the range
     operator may produce different results because of differences in
     the way floating point arithmetic is handled on various systems.

   * If Octave produces an error message for valid input, that is a bug.

   * If Octave does not produce an error message for invalid input, that
     is a bug.  However, you should note that your idea of "invalid
     input" might be my idea of "an extension" or "support for
     traditional practice".

   * If you are an experienced user of programs like Octave, your
     suggestions for improvement are welcome in any case.


File: octave.info,  Node: Bug Tracker,  Next: Bug Reporting,  Prev: Bug Criteria,  Up: Reporting Bugs

F.2.2 Where to Report Bugs
--------------------------

To report a bug in Octave, submit a bug report to the Octave bug tracker
<http://bugs.octave.org>.

   *Do not send bug reports to 'help-octave'*.  Most users of Octave do
not want to receive bug reports.


File: octave.info,  Node: Bug Reporting,  Next: Sending Patches,  Prev: Bug Tracker,  Up: Reporting Bugs

F.2.3 How to Report Bugs
------------------------

Submit bug reports for Octave to the Octave bug tracker
<http://bugs.octave.org>.

   The fundamental principle of reporting bugs usefully is this: *report
all the facts*.  If you are not sure whether to state a fact or leave it
out, state it!

   Often people omit facts because they think they know what causes the
problem and they conclude that some details don't matter.  Thus, you
might assume that the name of the variable you use in an example does
not matter.  Well, probably it doesn't, but one cannot be sure.  Perhaps
the bug is a stray memory reference which happens to fetch from the
location where that name is stored in memory; perhaps, if the name were
different, the contents of that location would fool the interpreter into
doing the right thing despite the bug.  Play it safe and give a
specific, complete example.

   Keep in mind that the purpose of a bug report is to enable someone to
fix the bug if it is not known.  Always write your bug reports on the
assumption that the bug is not known.

   Sometimes people give a few sketchy facts and ask, "Does this ring a
bell?"  This cannot help us fix a bug.  It is better to send a complete
bug report to begin with.

   Try to make your bug report self-contained.  If we have to ask you
for more information, it is best if you include all the previous
information in your response, as well as the information that was
missing.

   To enable someone to investigate the bug, you should include all
these things:

   * The version of Octave.  You can get this by noting the version
     number that is printed when Octave starts, or running it with the
     '-v' option.

   * A complete input file that will reproduce the bug.

     A single statement may not be enough of an example--the bug might
     depend on other details that are missing from the single statement
     where the error finally occurs.

   * The command arguments you gave Octave to execute that example and
     observe the bug.  To guarantee you won't omit something important,
     list all the options.

     If we were to try to guess the arguments, we would probably guess
     wrong and then we would not encounter the bug.

   * The type of machine you are using, and the operating system name
     and version number.

   * The command-line arguments you gave to the 'configure' command when
     you installed the interpreter.

   * A complete list of any modifications you have made to the
     interpreter source.

     Be precise about these changes--show a context diff for them.

   * Details of any other deviations from the standard procedure for
     installing Octave.

   * A description of what behavior you observe that you believe is
     incorrect.  For example, "The interpreter gets a fatal signal," or,
     "The output produced at line 208 is incorrect."

     Of course, if the bug is that the interpreter gets a fatal signal,
     then one can't miss it.  But if the bug is incorrect output, we
     might not notice unless it is glaringly wrong.

     Even if the problem you experience is a fatal signal, you should
     still say so explicitly.  Suppose something strange is going on,
     such as, your copy of the interpreter is out of sync, or you have
     encountered a bug in the C library on your system.  Your copy might
     crash and the copy here would not.  If you said to expect a crash,
     then when the interpreter here fails to crash, we would know that
     the bug was not happening.  If you don't say to expect a crash,
     then we would not know whether the bug was happening.  We would not
     be able to draw any conclusion from our observations.

     Often the observed symptom is incorrect output when your program is
     run.  Unfortunately, this is not enough information unless the
     program is short and simple.  It is very helpful if you can include
     an explanation of the expected output, and why the actual output is
     incorrect.

   * If you wish to suggest changes to the Octave source, send them as
     context diffs.  If you even discuss something in the Octave source,
     refer to it by context, not by line number, because the line
     numbers in the development sources probably won't match those in
     your sources.

   Here are some things that are not necessary:

   * A description of the envelope of the bug.

     Often people who encounter a bug spend a lot of time investigating
     which changes to the input file will make the bug go away and which
     changes will not affect it.  Such information is usually not
     necessary to enable us to fix bugs in Octave, but if you can find a
     simpler example to report _instead_ of the original one, that is a
     convenience.  Errors in the output will be easier to spot, running
     under the debugger will take less time, etc.  Most Octave bugs
     involve just one function, so the most straightforward way to
     simplify an example is to delete all the function definitions
     except the one in which the bug occurs.

     However, simplification is not vital; if you don't want to do this,
     report the bug anyway and send the entire test case you used.

   * A patch for the bug.  Patches can be helpful, but if you find a
     bug, you should report it, even if you cannot send a fix for the
     problem.


File: octave.info,  Node: Sending Patches,  Prev: Bug Reporting,  Up: Reporting Bugs

F.2.4 Sending Patches for Octave
--------------------------------

If you would like to write bug fixes or improvements for Octave, that is
very helpful.  When you send your changes, please follow these
guidelines to avoid causing extra work for us in studying the patches.

   If you don't follow these guidelines, your information might still be
useful, but using it will take extra work.  Maintaining Octave is a lot
of work in the best of circumstances, and we can't keep up unless you do
your best to help.

   * Send an explanation with your changes of what problem they fix or
     what improvement they bring about.  For a bug fix, just include a
     copy of the bug report, and explain why the change fixes the bug.

   * Always include a proper bug report for the problem you think you
     have fixed.  We need to convince ourselves that the change is right
     before installing it.  Even if it is right, we might have trouble
     judging it if we don't have a way to reproduce the problem.

   * Include all the comments that are appropriate to help people
     reading the source in the future understand why this change was
     needed.

   * Don't mix together changes made for different reasons.  Send them
     _individually_.

     If you make two changes for separate reasons, then we might not
     want to install them both.  We might want to install just one.

   * Use 'diff -c' to make your diffs.  Diffs without context are hard
     for us to install reliably.  More than that, they make it hard for
     us to study the diffs to decide whether we want to install them.
     Unified diff format is better than contextless diffs, but not as
     easy to read as '-c' format.

     If you have GNU diff, use 'diff -cp', which shows the name of the
     function that each change occurs in.

   * Write the change log entries for your changes.

     Read the 'ChangeLog' file to see what sorts of information to put
     in, and to learn the style that we use.  The purpose of the change
     log is to show people where to find what was changed.  So you need
     to be specific about what functions you changed; in large
     functions, it's often helpful to indicate where within the function
     the change was made.

     On the other hand, once you have shown people where to find the
     change, you need not explain its purpose.  Thus, if you add a new
     function, all you need to say about it is that it is new.  If you
     feel that the purpose needs explaining, it probably does--but the
     explanation will be much more useful if you put it in comments in
     the code.

     If you would like your name to appear in the header line for who
     made the change, send us the header line.


File: octave.info,  Node: Service,  Prev: Reporting Bugs,  Up: Trouble

F.3 How To Get Help with Octave
===============================

The mailing list <help@octave.org> exists for the discussion of matters
related to using and installing Octave.  If would like to join the
discussion, please send a short note to <help-request@octave.org>.

   *Please do not* send requests to be added or removed from the mailing
list, or other administrative trivia to the list itself.

   If you think you have found a bug in Octave or in the installation
procedure, however, you should submit a complete bug report to the
Octave bug tracker at <http://bugs.octave.org>.  But before you submit a
bug report, please read <http://www.octave.org/bugs.html> to learn how
to submit a useful bug report.


File: octave.info,  Node: Installation,  Next: Emacs Octave Support,  Prev: Trouble,  Up: Top

Appendix G Installing Octave
****************************

The procedure for installing Octave from source on a Unix-like system is
described next.  Building on other platforms will follow similar steps.
Note that this description applies to Octave releases.  Building the
development sources from the Mercurial archive requires additional steps
as described in *note Building the Development Sources::.

* Menu:

* Build Dependencies::
* Running Configure and Make::
* Compiling Octave with 64-bit Indexing::
* Installation Problems::


File: octave.info,  Node: Build Dependencies,  Next: Running Configure and Make,  Up: Installation

G.1 Build Dependencies
======================

Octave is a fairly large program with many build dependencies.  You may
be able to find pre-packaged versions of the dependencies distributed as
part of your system, or you may have to build some or all of them
yourself.

* Menu:

* Obtaining the Dependencies Automatically::
* Build Tools::
* External Packages::


File: octave.info,  Node: Obtaining the Dependencies Automatically,  Next: Build Tools,  Up: Build Dependencies

G.1.1 Obtaining the Dependencies Automatically
----------------------------------------------

On some systems you can obtain many of Octave's build dependencies
automatically.  The commands for doing this vary by system.  Similarly,
the names of pre-compiled packages vary by system and do not always
match exactly the names listed in *note Build Tools:: and *note External
Packages::.

   You will usually need the development version of an external
dependency so that you get the libraries and header files for building
software, not just for running already compiled programs.  These
packages typically have names that end with the suffix '-dev' or
'-devel'.

   On systems with 'apt-get' (Debian, Ubuntu, etc.), you may be able to
install most of the tools and external packages using a command similar
to

     apt-get build-dep octave

The specific package name may be 'octave3.2' or 'octave3.4'.  The set of
required tools and external dependencies does not change frequently, so
it is not important that the version match exactly, but you should use
the most recent one available.

   On systems with 'yum' (Fedora, Red Hat, etc.), you may be able to
install most of the tools and external packages using a command similar
to

     yum-builddep octave

The 'yum-builddep' utility is part of the 'yum-utils' package.

   For either type of system, the package name may include a version
number.  The set of required tools and external dependencies does not
change frequently, so it is not important that the version exactly match
the version you are installing, but you should use the most recent one
available.


File: octave.info,  Node: Build Tools,  Next: External Packages,  Prev: Obtaining the Dependencies Automatically,  Up: Build Dependencies

G.1.2 Build Tools
-----------------

The following tools are required:

C++, C, and Fortran compilers
     The Octave sources are primarily written in C++, but some portions
     are also written in C and Fortran.  The Octave sources are intended
     to be portable.  Recent versions of the GNU compiler collection
     (GCC) should work (<http://gcc.gnu.org>).  If you use GCC, you
     should avoid mixing versions.  For example, be sure that you are
     not using the obsolete 'g77' Fortran compiler with modern versions
     of 'gcc' and 'g++'.

GNU Make
     Tool for building software (<http://www.gnu.org/software/make>).
     Octave's build system requires GNU Make.  Other versions of Make
     will not work.  Fortunately, GNU Make is highly portable and easy
     to install.

AWK, sed, and other Unix utilities
     Basic Unix system utilities are required for building Octave.  All
     will be available with any modern Unix system and also on Windows
     with either Cygwin or MinGW and MSYS.

   Additionally, the following tools may be needed:

Bison
     Parser generator (<http://www.gnu.org/software/bison>).  You will
     need Bison if you modify the 'oct-parse.yy' source file or if you
     delete the files that are generated from it.

Flex
     Lexer analyzer (<http://www.gnu.org/software/flex>).  You will need
     Flex if you modify the 'lex.ll' source file or if you delete the
     files that are generated from it.

Autoconf
     Package for software configuration
     (<http://www.gnu.org/software/autoconf>).  Autoconf is required if
     you modify Octave's 'configure.ac' file or other files that it
     requires.

Automake
     Package for Makefile generation
     (<http://www.gnu.org/software/automake>).  Automake is required if
     you modify Octave's 'Makefile.am' files or other files that they
     depend on.

Libtool
     Package for building software libraries
     (<http://www.gnu.org/software/libtool>).  Libtool is required by
     Automake.

gperf
     Perfect hash function generator
     (<http://www.gnu.org/software/gperf>).  You will need gperf if you
     modify the 'octave.gperf' file or if you delete the file that is
     generated from it.

Texinfo
     Package for generating online and print documentation
     (<http://www.gnu.org/software/texinfo>).  You will need Texinfo to
     build Octave's documentation or if you modify the documentation
     source files or the docstring of any Octave function.


File: octave.info,  Node: External Packages,  Prev: Build Tools,  Up: Build Dependencies

G.1.3 External Packages
-----------------------

The following external packages are required:

BLAS
     Basic Linear Algebra Subroutine library
     (<http://www.netlib.org/blas>).  Accelerated BLAS libraries such as
     ATLAS (<http://math-atlas.sourceforge.net>) are recommeded for
     better performance.

LAPACK
     Linear Algebra Package (<http://www.netlib.org/lapack>).

PCRE
     The Perl Compatible Regular Expression library
     (<http://www.pcre.org>).

   The following external package is optional but strongly recommended:

GNU Readline
     Command-line editing library (<www.gnu.org/s/readline>).

   If you wish to build Octave without GNU readline installed, you must
use the '--disable-readline' option when running the configure script.

   The following external software packages are optional but
recommended:

ARPACK
     Library for the solution of large-scale eigenvalue problems
     (<http://forge.scilab.org/index.php/p/arpack-ng>).  ARPACK is
     required to provide the functions 'eigs' and 'svds'.

cURL
     Library for transferring data with URL syntax
     (<http://curl.haxx.se>).  cURL is required to provide the 'urlread'
     and 'urlwrite' functions and the 'ftp' class.

FFTW3
     Library for computing discrete Fourier transforms
     (<http://www.fftw.org>).  FFTW3 is used to provide better
     performance for functions that compute discrete Fourier transforms
     ('fft', 'ifft', 'fft2', etc.)

FLTK
     Portable GUI toolkit (<http://www.fltk.org>).  FLTK is currently
     used to provide windows for Octave's OpenGL-based graphics
     functions.

fontconfig
     Library for configuring and customizing font access
     (<http://www.freedesktop.org/wiki/Software/fontconfig>).
     Fontconfig is used to manage fonts for Octave's OpenGL-based
     graphics functions.

FreeType
     Portable font engine (<http://www.freetype.org>).  FreeType is used
     to perform font rendering for Octave's OpenGL-based graphics
     functions.

GLPK
     GNU Linear Programming Kit (<http://www.gnu.org/software/glpk>).
     GPLK is required for the function 'glpk'.

gl2ps
     OpenGL to PostScript printing library
     (<http://www.geuz.org/gl2ps/>).  gl2ps is required for printing
     when using the FLTK toolkit.

gnuplot
     Interactive graphics program (<http://www.gnuplot.info>).  gnuplot
     is currently the default graphics renderer for Octave.

GraphicsMagick++
     Image processing library (<http://www.graphicsmagick.org>).
     GraphicsMagick++ is used to provide the 'imread' and 'imwrite'
     functions.

HDF5
     Library for manipulating portable data files
     (<http://www.hdfgroup.org/HDF5>).  HDF5 is required for Octave's
     'load' and 'save' commands to read and write HDF data files.

Java Development Kit
     Java programming language compiler and libraries.  The OpenJDK free
     software implementation is recommended
     (<http://openjdk.java.net/>), although other JDK implementations
     may work.  Java is required to be able to call Java functions from
     within Octave.

LLVM
     Compiler framework, (<http://www.llvm.org>).  LLVM is required for
     Octave's experimental just-in-time (JIT) compilation for speeding
     up the interpreter.

OpenGL
     API for portable 2-D and 3-D graphics (<http://www.opengl.org>).
     An OpenGL implementation is required to provide Octave's
     OpenGL-based graphics functions.  Octave's OpenGL-based graphics
     functions usually outperform the gnuplot-based graphics functions
     because plot data can be rendered directly instead of sending data
     and commands to gnuplot for interpretation and rendering.

Qhull
     Computational geometry library (<http://www.qhull.org>).  Qhull is
     required to provide the functions 'convhull', 'convhulln',
     'delaunay', 'delaunay3', 'delaunayn', 'voronoi', and 'voronoin'.

QRUPDATE
     QR factorization updating library
     (<http://sourceforge.net/projects/qrupdate>).  QRUPDATE is used to
     provide improved performance for the functions 'qrdelete',
     'qrinsert', 'qrshift', and 'qrupdate'.

QScintilla
     Source code highlighter and manipulator; a Qt port of Scintilla
     (<http://www.riverbankcomputing.co.uk/software/qscintilla>).
     QScintilla is used for syntax highlighting and code completion in
     the GUI.

Qt
     GUI and utility libraries ().  Qt is required for building the GUI.
     It is a large framework, but the only components required are the
     GUI, core, and network modules.

SuiteSparse
     Sparse matrix factorization library
     (<http://www.cise.ufl.edu/research/sparse/SuiteSparse>).
     SuiteSparse is required to provide sparse matrix factorizations and
     solution of linear equations for sparse systems.

zlib
     Data compression library (<http://zlib.net>).  The zlib library is
     required for Octave's 'load' and 'save' commands to handle
     compressed data, including MATLAB v5 MAT files.


File: octave.info,  Node: Running Configure and Make,  Next: Compiling Octave with 64-bit Indexing,  Prev: Build Dependencies,  Up: Installation

G.2 Running Configure and Make
==============================

   * Run the shell script 'configure'.  This will determine the features
     your system has (or doesn't have) and create a file named
     'Makefile' from each of the files named 'Makefile.in'.

     Here is a summary of the configure options that are most frequently
     used when building Octave:

     '--help'
          Print a summary of the options recognized by the configure
          script.

     '--prefix=PREFIX'
          Install Octave in subdirectories below PREFIX.  The default
          value of PREFIX is '/usr/local'.

     '--srcdir=DIR'
          Look for Octave sources in the directory DIR.

     '--enable-64'
          This is an *experimental* option to enable Octave to use
          64-bit integers for array dimensions and indexing on 64-bit
          platforms.  You probably don't want to use this option unless
          you know what you are doing.  *Note Compiling Octave with
          64-bit Indexing::, for more details about building Octave with
          this option.

     '--enable-bounds-check'
          Enable bounds checking for indexing operators in the internal
          array classes.  This option is primarily used for debugging
          Octave.  Building Octave with this option has a negative
          impact on performance and is not recommended for general use.

     '--disable-docs'
          Disable building all forms of the documentation (Info, PDF,
          HTML). The default is to build documentation, but your system
          will need functioning Texinfo and TeX installs for this to
          succeed.

     '--enable-float-truncate'
          This option allows for truncation of intermediate floating
          point results in calculations.  It is only necessary for
          certain platforms.

     '--enable-readline'
          Use the readline library to provide for editing of the command
          line in terminal environments.  This option is on by default.

     '--enable-shared'
          Create shared libraries (this is the default).  If you are
          planning to use the dynamic loading features, you will
          probably want to use this option.  It will make your '.oct'
          files much smaller and on some systems it may be necessary to
          build shared libraries in order to use dynamically linked
          functions.

          You may also want to build a shared version of 'libstdc++', if
          your system doesn't already have one.

     '--enable-dl'
          Use 'dlopen' and friends to make Octave capable of dynamically
          linking externally compiled functions (this is the default if
          '--enable-shared' is specified).  This option only works on
          systems that actually have these functions.  If you plan on
          using this feature, you should probably also use
          '--enable-shared' to reduce the size of your '.oct' files.

     '--with-blas=<lib>'
          By default, configure looks for the best BLAS matrix libraries
          on your system, including optimized implementations such as
          the free ATLAS 3.0, as well as vendor-tuned libraries.  (The
          use of an optimized BLAS will generally result in
          several-times faster matrix operations.)  Use this option to
          specify a particular BLAS library that Octave should use.

     '--with-lapack=<lib>'
          By default, configure looks for the best LAPACK matrix
          libraries on your system, including optimized implementations
          such as the free ATLAS 3.0, as well as vendor-tuned libraries.
          (The use of an optimized LAPACK will generally result in
          several-times faster matrix operations.)  Use this option to
          specify a particular LAPACK library that Octave should use.

     '--with-magick=<lib>'
          Select the library to use for image I/O.  The two possible
          values are "GraphicsMagick" (default) or "ImageMagick".

     '--with-sepchar=<char>'
          Use <char> as the path separation character.  This option can
          help when running Octave on non-Unix systems.

     '--without-amd'
          Don't use AMD, disable some sparse matrix functionality.

     '--without-camd'
          Don't use CAMD, disable some sparse matrix functionality.

     '--without-colamd'
          Don't use COLAMD, disable some sparse matrix functionality.

     '--without-ccolamd'
          Don't use CCOLAMD, disable some sparse matrix functionality.

     '--without-cholmod'
          Don't use CHOLMOD, disable some sparse matrix functionality.

     '--without-curl'
          Don't use the cURL library, disable the ftp objects, 'urlread'
          and 'urlwrite' functions.

     '--without-cxsparse'
          Don't use CXSPARSE, disable some sparse matrix functionality.

     '--without-fftw3'
          Use the included FFTPACK library for computing Fast Fourier
          Transforms instead of the FFTW3 library.

     '--without-fftw3f'
          Use the included FFTPACK library for computing Fast Fourier
          Transforms instead of the FFTW3 library when operating on
          single precision (float) values.

     '--without-glpk'
          Don't use the GLPK library for linear programming.

     '--without-hdf5'
          Don't use the HDF5 library, disable reading and writing of
          HDF5 files.

     '--without-opengl'
          Don't use OpenGL, disable native graphics toolkit for
          plotting.  You will need 'gnuplot' installed in order to make
          plots.

     '--without-qhull'
          Don't use Qhull, disable 'delaunay', 'convhull', and related
          functions.

     '--without-qrupdate'
          Don't use QRUPDATE, disable QR and Cholesky update functions.

     '--without-umfpack'
          Don't use UMFPACK, disable some sparse matrix functionality.

     '--without-zlib'
          Don't use the zlib library, disable data file compression and
          support for recent MAT file formats.

     '--without-framework-carbon'
          Don't use framework Carbon headers, libraries, or specific
          source code even if the configure test succeeds (the default
          is to use Carbon framework if available).  This is a platform
          specific configure option for Mac systems.

     '--without-framework-opengl'
          Don't use framework OpenGL headers, libraries, or specific
          source code even if the configure test succeeds.  If this
          option is given then OpenGL headers and libraries in standard
          system locations are tested (the default value is
          '--with-framework-opengl').  This is a platform specific
          configure option for Mac systems.

     See the file 'INSTALL' for more general information about the
     command line options used by configure.  That file also contains
     instructions for compiling in a directory other than the one where
     the source is located.

   * Run make.

     You will need a recent version of GNU Make as Octave relies on
     certain features not generally available in all versions of make.
     Modifying Octave's makefiles to work with other make programs is
     probably not worth your time; instead, we simply recommend
     installing GNU Make.

     There are currently two options for plotting in Octave: (1) the
     external program gnuplot, or (2) the internal graphics engine using
     OpenGL and FLTK.  Gnuplot is a command-driven interactive function
     plotting program.  Gnuplot is copyrighted, but freely
     distributable.  As of Octave release 3.4, gnuplot is the default
     option for plotting.  But, the internal graphics engine is nearly
     100% compatible, certainly for most ordinary plots, and users are
     encouraged to test it.  It is anticipated that the internal engine
     will become the default option at the next major release of Octave.

     To compile Octave, you will need a recent version of 'g++' or other
     ANSI C++ compiler.  In addition, you will need a Fortran 77
     compiler or 'f2c'.  If you use 'f2c', you will need a script like
     'fort77' that works like a normal Fortran compiler by combining
     'f2c' with your C compiler in a single script.

     If you plan to modify the parser you will also need GNU 'bison' and
     'flex'.  If you modify the documentation, you will need GNU
     Texinfo.

     GNU Make, 'gcc' (and 'libstdc++'), 'gnuplot', 'bison', 'flex', and
     Texinfo are all available from many anonymous ftp archives.  The
     primary site is <ftp.gnu.org>, but it is often very busy.  A list
     of sites that mirror the software on <ftp.gnu.org> is available by
     anonymous ftp from <ftp://ftp.gnu.org/pub/gnu/GNUinfo/FTP>.

     Octave requires approximately 1.4 GB of disk storage to unpack and
     compile from source (significantly less, 400 MB, if you don't
     compile with debugging symbols).  To compile without debugging
     symbols try the command

          make CFLAGS=-O CXXFLAGS=-O LDFLAGS=

     instead of just 'make'.

   * If you encounter errors while compiling Octave, first see *note
     Installation Problems:: for a list of known problems and if there
     is a workaround or solution for your problem.  If not, see *note
     Trouble:: for information about how to report bugs.

   * Once you have successfully compiled Octave, run 'make install'.

     This will install a copy of Octave, its libraries, and its
     documentation in the destination directory.  As distributed, Octave
     is installed in the following directories.  In the table below,
     PREFIX defaults to '/usr/local', VERSION stands for the current
     version number of the interpreter, and ARCH is the type of computer
     on which Octave is installed (for example, 'i586-unknown-gnu').

     'PREFIX/bin'
          Octave and other binaries that people will want to run
          directly.

     'PREFIX/lib/octave-VERSION'
          Libraries like liboctave.a and liboctinterp.a.

     'PREFIX/octave-VERSION/include/octave'
          Include files distributed with Octave.

     'PREFIX/share'
          Architecture-independent data files.

     'PREFIX/share/man/man1'
          Unix-style man pages describing Octave.

     'PREFIX/share/info'
          Info files describing Octave.

     'PREFIX/share/octave/VERSION/m'
          Function files distributed with Octave.  This includes the
          Octave version, so that multiple versions of Octave may be
          installed at the same time.

     'PREFIX/libexec/octave/VERSION/exec/ARCH'
          Executables to be run by Octave rather than the user.

     'PREFIX/lib/octave/VERSION/oct/ARCH'
          Object files that will be dynamically loaded.

     'PREFIX/share/octave/VERSION/imagelib'
          Image files that are distributed with Octave.


File: octave.info,  Node: Compiling Octave with 64-bit Indexing,  Next: Installation Problems,  Prev: Running Configure and Make,  Up: Installation

G.3 Compiling Octave with 64-bit Indexing
=========================================

Note: the following only applies to systems that have 64-bit pointers.
Configuring Octave with '--enable-64' cannot magically make a 32-bit
system have a 64-bit address space.

   On 64-bit systems, Octave is limited to (approximately) the following
array sizes when using the default 32-bit indexing mode:

     double:         16GB
     single:          8GB
     uint64, int64:  16GB
     uint32, int32:   8GB
     uint16, int16:   4GB
     uint8, int8:     2GB

   In each case, the limit is really (approximately) 2^{31} elements
because of the default type of the value used for indexing arrays
(signed 32-bit integer, corresponding to the size of a Fortran INTEGER
value).

   Trying to create larger arrays will produce the following error:

     octave:1> a = zeros (1024*1024*1024*3, 1, 'int8');
     error: memory exhausted or requested size too large
            for range of Octave's index type --
            trying to return to prompt

You will obtain this error even if your system has enough memory to
create this array (4 GB in the above case).

   To use arrays larger than 2 GB, Octave has to be configured with the
option '--enable-64'.  This option is experimental and you are
encouraged to submit bug reports if you find a problem.  With this
option, Octave will use 64-bit integers internally for array dimensions
and indexing.  However, all numerical libraries used by Octave will
*also* need to use 64-bit integers for array dimensions and indexing.
In most cases, this means they will need to be compiled from source
since most (all?)  distributions which package these libraries compile
them with the default Fortran integer size, which is normally 32-bits
wide.

   The following instructions were tested with the development version
of Octave and GCC 4.3.4 on an x86_64 Debian system.

   The versions listed below are the versions used for testing.  If
newer versions of these packages are available, you should try to use
them, although there may be some differences.

   All libraries and header files will be installed in subdirectories of
'$prefix64' (you must choose the location of this directory).

   * BLAS and LAPACK (<http://www.netlib.org/lapack>)

     Reference versions for both libraries are included in the reference
     LAPACK 3.2.1 distribution from <netlib.org>.

        - Copy the file 'make.inc.example' and name it 'make.inc'.  The
          options '-fdefault-integer-8' and '-fPIC' (on 64-bit CPU) have
          to be added to the variable 'OPTS' and 'NOOPT'.

        - Once you have compiled this library make sure that you use it
          for compiling Suite Sparse and Octave.  In the following we
          assume that you installed the LAPACK library as
          $prefix64/lib/liblapack.a.

   * QRUPDATE (<http://sourceforge.net/projects/qrupdate>)

     In the 'Makeconf' file:

        - Add '-fdefault-integer-8' to 'FFLAGS'.

        - Adjust the BLAS and LAPACK variables as needed if your 64-bit
          aware BLAS and LAPACK libraries are in a non-standard
          location.

        - Set 'PREFIX' to the top-level directory of your install tree.

        - Run 'make solib' to make a shared library.

        - Run 'make install' to install the library.

   * SuiteSparse (<http://www.cise.ufl.edu/research/sparse/SuiteSparse>)

     Pass the following options to 'make' to enable 64-bit integers for
     BLAS library calls.  On 64-bit Windows systems, use
     '-DLONGBLAS="long long"' instead.

          CFLAGS='-DLONGBLAS=long'
          CXXFLAGS='-DLONGBLAS=long'

     The SuiteSparse makefiles don't generate shared libraries.  On some
     systems, you can generate them by doing something as simple as

          top=$(pwd)
          for f in *.a; do
            mkdir tmp
            cd tmp
            ar vx ../$f
            gcc -shared -o ../${f%%.a}.so *.o
            cd $top
            rm -rf tmp
          done

     Other systems may require a different solution.

   * ATLAS instead of reference BLAS and LAPACK

     Suggestions on how to compile ATLAS would be most welcome.

   * GLPK
   * Qhull (<http://www.qhull.org>)

     Both GLPK and Qhull use 'int' internally so maximum problem sizes
     may be limited.

   * Octave

     Octave's 64-bit index support is activated with the configure
     option '--enable-64'.

          ./configure \
            LD_LIBRARY_PATH="$prefix64/lib" \
            CPPFLAGS="-I$prefix64/include" LDFLAGS="-L$prefix64/lib" \
            --enable-64

     You must ensure that all Fortran sources except those in the
     'liboctave/cruft/ranlib' directory are compiled such that INTEGERS
     are 8-bytes wide.  If you are using gfortran, the configure script
     should automatically set the Makefile variable 'F77_INTEGER_8_FLAG'
     to '-fdefault-integer-8'.  If you are using another compiler, you
     must set this variable yourself.  You should NOT set this flag in
     'FFLAGS', otherwise the files in 'liboctave/cruft/ranlib' will be
     miscompiled.

   * Other dependencies

     Probably nothing special needs to be done for the following
     dependencies.  If you discover that something does need to be done,
     please submit a bug report.

        - pcre

        - zlib

        - hdf5

        - fftw3

        - cURL

        - GraphicsMagick++

        - OpenGL

        - freetype

        - fontconfig

        - fltk


File: octave.info,  Node: Installation Problems,  Prev: Compiling Octave with 64-bit Indexing,  Up: Installation

G.4 Installation Problems
=========================

This section contains a list of problems (and some apparent problems
that don't really mean anything is wrong) that may show up during
installation of Octave.

   * On some SCO systems, 'info' fails to compile if 'HAVE_TERMIOS_H' is
     defined in 'config.h'.  Simply removing the definition from
     'info/config.h' should allow it to compile.

   * If 'configure' finds 'dlopen', 'dlsym', 'dlclose', and 'dlerror',
     but not the header file 'dlfcn.h', you need to find the source for
     the header file and install it in the directory 'usr/include'.
     This is reportedly a problem with Slackware 3.1.  For Linux/GNU
     systems, the source for 'dlfcn.h' is in the 'ldso' package.

   * Building '.oct' files doesn't work.

     You should probably have a shared version of 'libstdc++'.  A patch
     is needed to build shared versions of version 2.7.2 of 'libstdc++'
     on the HP-PA architecture.  You can find the patch at
     <ftp://ftp.cygnus.com/pub/g++/libg++-2.7.2-hppa-gcc-fix>.

   * On some DEC alpha systems there may be a problem with the 'libdxml'
     library, resulting in floating point errors and/or segmentation
     faults in the linear algebra routines called by Octave.  If you
     encounter such problems, then you should modify the configure
     script so that 'SPECIAL_MATH_LIB' is not set to '-ldxml'.

   * On FreeBSD systems Octave may hang while initializing some internal
     constants.  The fix appears to be to use

          options      GPL_MATH_EMULATE

     rather than

          options      MATH_EMULATE

     in the kernel configuration files (typically found in the directory
     '/sys/i386/conf'.  After making this change, you'll need to rebuild
     the kernel, install it, and reboot.

   * If you encounter errors like

          passing `void (*)()' as argument 2 of
            `octave_set_signal_handler(int, void (*)(int))'

     or

          warning: ANSI C++ prohibits conversion from `(int)'
                   to `(...)'

     while compiling 'sighandlers.cc', you may need to edit some files
     in the 'gcc' include subdirectory to add proper prototypes for
     functions there.  For example, Ultrix 4.2 needs proper declarations
     for the 'signal' function and the 'SIG_IGN' macro in the file
     'signal.h'.

     On some systems the 'SIG_IGN' macro is defined to be something like
     this:

          #define  SIG_IGN  (void (*)())1

     when it should really be something like:

          #define  SIG_IGN  (void (*)(int))1

     to match the prototype declaration for the 'signal' function.  This
     change should also be made for the 'SIG_DFL' and 'SIG_ERR' symbols.
     It may be necessary to change the definitions in 'sys/signal.h' as
     well.

     The 'gcc' 'fixincludes' and 'fixproto' scripts should probably fix
     these problems when 'gcc' installs its modified set of header
     files, but I don't think that's been done yet.

     *You should not change the files in '/usr/include'*.  You can find
     the 'gcc' include directory tree by running the command

          gcc -print-libgcc-file-name

     The directory of 'gcc' include files normally begins in the same
     directory that contains the file 'libgcc.a'.

   * Some of the Fortran subroutines may fail to compile with older
     versions of the Sun Fortran compiler.  If you get errors like

          zgemm.f:
                  zgemm:
          warning: unexpected parent of complex expression subtree
          zgemm.f, line 245: warning: unexpected parent of complex
            expression subtree
          warning: unexpected parent of complex expression subtree
          zgemm.f, line 304: warning: unexpected parent of complex
            expression subtree
          warning: unexpected parent of complex expression subtree
          zgemm.f, line 327: warning: unexpected parent of complex
            expression subtree
          pcc_binval: missing IR_CONV in complex op
          make[2]: *** [zgemm.o] Error 1

     when compiling the Fortran subroutines in the 'liboctave/cruft'
     subdirectory, you should either upgrade your compiler or try
     compiling with optimization turned off.

   * On NeXT systems, if you get errors like this:

          /usr/tmp/cc007458.s:unknown:Undefined local
                symbol LBB7656
          /usr/tmp/cc007458.s:unknown:Undefined local
                symbol LBE7656

     when compiling 'Array.cc' and 'Matrix.cc', try recompiling these
     files without '-g'.

   * Some people have reported that calls to system() and the pager do
     not work on SunOS systems.  This is apparently due to having 'G_HAVE_SYS_WAIT'
     defined to be 0 instead of 1 when compiling 'libg++'.

   * On NeXT systems, linking to 'libsys_s.a' may fail to resolve the
     following functions

          _tcgetattr
          _tcsetattr
          _tcflow

     which are part of 'libposix.a'.  Unfortunately, linking Octave with
     '-posix' results in the following undefined symbols.

          .destructors_used
          .constructors_used
          _objc_msgSend
          _NXGetDefaultValue
          _NXRegisterDefaults
          .objc_class_name_NXStringTable
          .objc_class_name_NXBundle

     One kluge around this problem is to extract 'termios.o' from
     'libposix.a', put it in Octave's 'src' directory, and add it to the
     list of files to link together in the makefile.  Suggestions for
     better ways to solve this problem are welcome!

   * If Octave crashes immediately with a floating point exception, it
     is likely that it is failing to initialize the IEEE floating point
     values for infinity and NaN.

     If your system actually does support IEEE arithmetic, you should be
     able to fix this problem by modifying the function
     'octave_ieee_init' in the file 'lo-ieee.cc' to correctly initialize
     Octave's internal infinity and NaN variables.

     If your system does not support IEEE arithmetic but Octave's
     configure script incorrectly determined that it does, you can work
     around the problem by editing the file 'config.h' to not define
     'HAVE_ISINF', 'HAVE_FINITE', and 'HAVE_ISNAN'.

     In any case, please report this as a bug since it might be possible
     to modify Octave's configuration script to automatically determine
     the proper thing to do.

   * If Octave is unable to find a header file because it is installed
     in a location that is not normally searched by the compiler, you
     can add the directory to the include search path by specifying (for
     example) 'CPPFLAGS=-I/some/nonstandard/directory' as an argument to
     'configure'.  Other variables that can be specified this way are
     'CFLAGS', 'CXXFLAGS', 'FFLAGS', and 'LDFLAGS'.  Passing them as
     options to the configure script also records them in the
     'config.status' file.  By default, 'CPPFLAGS' and 'LDFLAGS' are
     empty, 'CFLAGS' and 'CXXFLAGS' are set to "-g -O" and 'FFLAGS' is
     set to "-O".


File: octave.info,  Node: Emacs Octave Support,  Next: Grammar and Parser,  Prev: Installation,  Up: Top

Appendix H Emacs Octave Support
*******************************

The development of Octave code can greatly be facilitated using Emacs
with Octave mode, a major mode for editing Octave files which can e.g.
automatically indent the code, do some of the typing (with Abbrev mode)
and show keywords, comments, strings, etc. in different faces (with
Font-lock mode on devices that support it).

   It is also possible to run Octave from within Emacs, either by
directly entering commands at the prompt in a buffer in Inferior Octave
mode, or by interacting with Octave from within a file with Octave code.
This is useful in particular for debugging Octave code.

   Finally, you can convince Octave to use the Emacs info reader for
'help -i'.

   All functionality is provided by the Emacs Lisp package EOS (for
"Emacs Octave Support").  This chapter describes how to set up and use
this package.

   Please contact <Kurt.Hornik@wu-wien.ac.at> if you have any questions
or suggestions on using EOS.

* Menu:

* Installing EOS::
* Using Octave Mode::
* Running Octave from Within Emacs::
* Using the Emacs Info Reader for Octave::


File: octave.info,  Node: Installing EOS,  Next: Using Octave Mode,  Up: Emacs Octave Support

H.1 Installing EOS
==================

The Emacs package EOS consists of the three files 'octave-mod.el',
'octave-inf.el', and 'octave-hlp.el'.  These files, or better yet their
byte-compiled versions, should be somewhere in your Emacs load-path.

   If you have GNU Emacs with a version number at least as high as
19.35, you are all set up, because EOS is respectively will be part of
GNU Emacs as of version 19.35.

   Otherwise, copy the three files from the 'emacs' subdirectory of the
Octave distribution to a place where Emacs can find them (this depends
on how your Emacs was installed).  Byte-compile them for speed if you
want.


File: octave.info,  Node: Using Octave Mode,  Next: Running Octave from Within Emacs,  Prev: Installing EOS,  Up: Emacs Octave Support

H.2 Using Octave Mode
=====================

If you are lucky, your sysadmins have already arranged everything so
that Emacs automatically goes into Octave mode whenever you visit an
Octave code file as characterized by its extension '.m'.  If not,
proceed as follows.

  1. To begin using Octave mode for all '.m' files you visit, add the
     following lines to a file loaded by Emacs at startup time,
     typically your '~/.emacs' file:

          (autoload 'octave-mode "octave-mod" nil t)
          (setq auto-mode-alist
                (cons '("\\.m$" . octave-mode) auto-mode-alist))

  2. Finally, to turn on the abbrevs, auto-fill and font-lock features
     automatically, also add the following lines to one of the Emacs
     startup files:
          (add-hook 'octave-mode-hook
                    (lambda ()
                      (abbrev-mode 1)
                      (auto-fill-mode 1)
                      (if (eq window-system 'x)
                          (font-lock-mode 1))))
     See the Emacs manual for more information about how to customize
     Font-lock mode.

   In Octave mode, the following special Emacs commands can be used in
addition to the standard Emacs commands.

'C-h m'
     Describe the features of Octave mode.

'LFD'
     Reindent the current Octave line, insert a newline and indent the
     new line ('octave-reindent-then-newline-and-indent').  An abbrev
     before point is expanded if 'abbrev-mode' is non-'nil'.

'TAB'
     Indents current Octave line based on its contents and on previous
     lines ('indent-according-to-mode').

';'
     Insert an "electric" semicolon ('octave-electric-semi').  If
     'octave-auto-indent' is non-'nil', reindent the current line.  If
     'octave-auto-newline' is non-'nil', automagically insert a newline
     and indent the new line.

'`'
     Start entering an abbreviation ('octave-abbrev-start').  If Abbrev
     mode is turned on, typing '`C-h' or '`?' lists all abbrevs.  Any
     other key combination is executed normally.  Note that all Octave
     abbrevs start with a grave accent.

'M-LFD'
     Break line at point and insert continuation marker and alignment
     ('octave-split-line').

'M-TAB'
     Perform completion on Octave symbol preceding point, comparing that
     symbol against Octave's reserved words and built-in variables
     ('octave-complete-symbol').

'M-C-a'
     Move backward to the beginning of a function
     ('octave-beginning-of-defun').  With prefix argument N, do it that
     many times if N is positive; otherwise, move forward to the N-th
     following beginning of a function.

'M-C-e'
     Move forward to the end of a function ('octave-end-of-defun').
     With prefix argument N, do it that many times if N is positive;
     otherwise, move back to the N-th preceding end of a function.

'M-C-h'
     Puts point at beginning and mark at the end of the current Octave
     function, i.e., the one containing point or following point
     ('octave-mark-defun').

'M-C-q'
     Properly indents the Octave function which contains point
     ('octave-indent-defun').

'M-;'
     If there is no comment already on this line, create a code-level
     comment (started by two comment characters) if the line is empty,
     or an in-line comment (started by one comment character) otherwise
     ('octave-indent-for-comment').  Point is left after the start of
     the comment which is properly aligned.

'C-c ;'
     Puts the comment character '#' (more precisely, the string value of
     'octave-comment-start') at the beginning of every line in the
     region ('octave-comment-region').  With just 'C-u' prefix argument,
     uncomment each line in the region.  A numeric prefix argument N
     means use N comment characters.

'C-c :'
     Uncomments every line in the region ('octave-uncomment-region').

'C-c C-p'
     Move one line of Octave code backward, skipping empty and comment
     lines ('octave-previous-code-line').  With numeric prefix argument
     N, move that many code lines backward (forward if N is negative).

'C-c C-n'
     Move one line of Octave code forward, skipping empty and comment
     lines ('octave-next-code-line').  With numeric prefix argument N,
     move that many code lines forward (backward if N is negative).

'C-c C-a'
     Move to the 'real' beginning of the current line
     ('octave-beginning-of-line').  If point is in an empty or comment
     line, simply go to its beginning; otherwise, move backwards to the
     beginning of the first code line which is not inside a continuation
     statement, i.e., which does not follow a code line ending in '...'
     or '\', or is inside an open parenthesis list.

'C-c C-e'
     Move to the 'real' end of the current line ('octave-end-of-line').
     If point is in a code line, move forward to the end of the first
     Octave code line which does not end in '...' or '\' or is inside an
     open parenthesis list.  Otherwise, simply go to the end of the
     current line.

'C-c M-C-n'
     Move forward across one balanced begin-end block of Octave code
     ('octave-forward-block').  With numeric prefix argument N, move
     forward across N such blocks (backward if N is negative).

'C-c M-C-p'
     Move back across one balanced begin-end block of Octave code
     ('octave-backward-block').  With numeric prefix argument N, move
     backward across N such blocks (forward if N is negative).

'C-c M-C-d'
     Move forward down one begin-end block level of Octave code
     ('octave-down-block').  With numeric prefix argument, do it that
     many times; a negative argument means move backward, but still go
     down one level.

'C-c M-C-u'
     Move backward out of one begin-end block level of Octave code
     ('octave-backward-up-block').  With numeric prefix argument, do it
     that many times; a negative argument means move forward, but still
     to a less deep spot.

'C-c M-C-h'
     Put point at the beginning of this block, mark at the end
     ('octave-mark-block').  The block marked is the one that contains
     point or follows point.

'C-c ]'
     Close the current block on a separate line ('octave-close-block').
     An error is signaled if no block to close is found.

'C-c f'
     Insert a function skeleton, prompting for the function's name,
     arguments and return values which have to be entered without
     parentheses ('octave-insert-defun').

'C-c C-h'
     Search the function, operator and variable indices of all info
     files with documentation for Octave for entries ('octave-help').
     If used interactively, the entry is prompted for with completion.
     If multiple matches are found, one can cycle through them using the
     standard ',' ('Info-index-next') command of the Info reader.

     The variable 'octave-help-files' is a list of files to search
     through and defaults to '("octave").  If there is also an Octave
     Local Guide with corresponding info file, say, 'octave-LG', you can
     have 'octave-help' search both files by
          (setq octave-help-files '("octave" "octave-LG"))
     in one of your Emacs startup files.

   A common problem is that the <RET> key does _not_ indent the line to
where the new text should go after inserting the newline.  This is
because the standard Emacs convention is that <RET> (aka 'C-m') just
adds a newline, whereas <LFD> (aka 'C-j') adds a newline and indents it.
This is particularly inconvenient for users with keyboards which do not
have a special <LFD> key at all; in such cases, it is typically more
convenient to use <RET> as the <LFD> key (rather than typing 'C-j').

   You can make <RET> do this by adding
     (define-key octave-mode-map "\C-m"
       'octave-reindent-then-newline-and-indent)
to one of your Emacs startup files.  Another, more generally applicable
solution is
     (defun RET-behaves-as-LFD ()
       (let ((x (key-binding "\C-j")))
         (local-set-key "\C-m" x)))
     (add-hook 'octave-mode-hook 'RET-behaves-as-LFD)
(this works for all modes by adding to the startup hooks, without having
to know the particular binding of <RET> in that mode!).  Similar
considerations apply for using <M-RET> as <M-LFD>.  As Barry A. Warsaw
<bwarsaw@cnri.reston.va.us> says in the documentation for his 'cc-mode',
"This is a very common question.  ':-)' If you want this to be the
default behavior, don't lobby me, lobby RMS!"

   The following variables can be used to customize Octave mode.

'octave-auto-indent'
     Non-'nil' means auto-indent the current line after a semicolon or
     space.  Default is 'nil'.

'octave-auto-newline'
     Non-'nil' means auto-insert a newline and indent after semicolons
     are typed.  The default value is 'nil'.

'octave-blink-matching-block'
     Non-'nil' means show matching begin of block when inserting a
     space, newline or ';' after an else or end keyword.  Default is
     't'.  This is an extremely useful feature for automatically
     verifying that the keywords match--if they don't, an error message
     is displayed.

'octave-block-offset'
     Extra indentation applied to statements in block structures.
     Default is 2.

'octave-continuation-offset'
     Extra indentation applied to Octave continuation lines.  Default is
     4.

'octave-continuation-string'
     String used for Octave continuation lines.  Normally '\'.

'octave-mode-startup-message'
     If 't' (default), a startup message is displayed when Octave mode
     is called.

   If Font Lock mode is enabled, Octave mode will display

   * strings in 'font-lock-string-face'

   * comments in 'font-lock-comment-face'

   * the Octave reserved words (such as all block keywords) and the text
     functions (such as 'cd' or 'who') which are also reserved using
     'font-lock-keyword-face'

   * the built-in operators ('&&', '==', ...) using
     'font-lock-reference-face'

   * and the function names in function declarations in
     'font-lock-function-name-face'.

   There is also rudimentary support for Imenu (currently, function
names can be indexed).

   You can generate TAGS files for Emacs from Octave '.m' files using
the shell script 'octave-tags' that is installed alongside your copy of
Octave.

   Customization of Octave mode can be performed by modification of the
variable 'octave-mode-hook'.  If the value of this variable is
non-'nil', turning on Octave mode calls its value.

   If you discover a problem with Octave mode, you can conveniently send
a bug report using 'C-c C-b' ('octave-submit-bug-report').  This
automatically sets up a mail buffer with version information already
added.  You just need to add a description of the problem, including a
reproducible test case and send the message.


File: octave.info,  Node: Running Octave from Within Emacs,  Next: Using the Emacs Info Reader for Octave,  Prev: Using Octave Mode,  Up: Emacs Octave Support

H.3 Running Octave from Within Emacs
====================================

The package 'octave' provides commands for running an inferior Octave
process in a special Emacs buffer.  Use
     M-x run-octave
to directly start an inferior Octave process.  If Emacs does not know
about this command, add the line
     (autoload 'run-octave "octave-inf" nil t)
to your '.emacs' file.

   This will start Octave in a special buffer the name of which is
specified by the variable 'inferior-octave-buffer' and defaults to
"*Inferior Octave*".  From within this buffer, you can interact with the
inferior Octave process 'as usual', i.e., by entering Octave commands at
the prompt.  The buffer is in Inferior Octave mode, which is derived
from the standard Comint mode, a major mode for interacting with an
inferior interpreter.  See the documentation for 'comint-mode' for more
details, and use 'C-h b' to find out about available special
keybindings.

   You can also communicate with an inferior Octave process from within
files with Octave code (i.e., buffers in Octave mode), using the
following commands.

'C-c i l'
     Send the current line to the inferior Octave process
     ('octave-send-line').  With positive prefix argument N, send that
     many lines.  If 'octave-send-line-auto-forward' is non-'nil', go to
     the next unsent code line.

'C-c i b'
     Send the current block to the inferior Octave process
     ('octave-send-block').

'C-c i f'
     Send the current function to the inferior Octave process
     ('octave-send-defun').

'C-c i r'
     Send the region to the inferior Octave process
     ('octave-send-region').

'C-c i s'
     Make sure that 'inferior-octave-buffer' is displayed
     ('octave-show-process-buffer').

'C-c i h'
     Delete all windows that display the inferior Octave buffer
     ('octave-hide-process-buffer').

'C-c i k'
     Kill the inferior Octave process and its buffer
     ('octave-kill-process').

   The effect of the commands which send code to the Octave process can
be customized by the following variables.

'octave-send-echo-input'
     Non-'nil' means echo input sent to the inferior Octave process.
     Default is 't'.

'octave-send-show-buffer'
     Non-'nil' means display the buffer running the Octave process after
     sending a command (but without selecting it).  Default is 't'.

   If you send code and there is no inferior Octave process yet, it will
be started automatically.

   The startup of the inferior Octave process is highly customizable.
The variable 'inferior-octave-startup-args' can be used for specifying
command lines arguments to be passed to Octave on startup as a list of
strings.  For example, to suppress the startup message and use
'traditional' mode, set this to '("-q" "-traditional").  You can also
specify a startup file of Octave commands to be loaded on startup; note
that these commands will not produce any visible output in the process
buffer.  Which file to use is controlled by the variable
'inferior-octave-startup-file'.  If this is 'nil', the file
'~/.emacs-octave' is used if it exists.

   And finally, 'inferior-octave-mode-hook' is run after starting the
process and putting its buffer into Inferior Octave mode.  Hence, if you
like the up and down arrow keys to behave in the interaction buffer as
in the shell, and you want this buffer to use nice colors, add
     (add-hook 'inferior-octave-mode-hook
               (lambda ()
                 (turn-on-font-lock)
                 (define-key inferior-octave-mode-map [up]
                   'comint-previous-input)
                 (define-key inferior-octave-mode-map [down]
                   'comint-next-input)))
to your '.emacs' file.  You could also swap the roles of 'C-a'
('beginning-of-line') and 'C-c C-a' ('comint-bol') using this hook.

     *Note* that if you set your Octave prompts to something different
     from the defaults, make sure that 'inferior-octave-prompt' matches
     them.  Otherwise, _nothing_ will work, because Emacs will not know
     when Octave is waiting for input, or done sending output.


File: octave.info,  Node: Using the Emacs Info Reader for Octave,  Prev: Running Octave from Within Emacs,  Up: Emacs Octave Support

H.4 Using the Emacs Info Reader for Octave
==========================================

You may also use the Emacs Info reader with Octave's 'doc' function.
For this, the package 'gnuserv' needs to be installed.

   If 'gnuserv' is installed, add the lines
     (autoload 'octave-help "octave-hlp" nil t)
     (require 'gnuserv)
     (gnuserv-start)
to your '.emacs' file.

   You can use either 'plain' Emacs Info or the function 'octave-help'
as your Octave info reader (for 'help -i').  In the former case, use
'info_program ("info-emacs-info")'.  The latter is perhaps more
attractive because it allows to look up keys in the indices of _several_
info files related to Octave (provided that the Emacs variable
'octave-help-files' is set correctly).  In this case, use 'info_program
("info-emacs-octave-help")'.

   If you use Octave from within Emacs, it is best to add these settings
to your '~/.emacs-octave' startup file (or the file pointed to by the
Emacs variable 'inferior-octave-startup-file').


File: octave.info,  Node: Grammar and Parser,  Next: Copying,  Prev: Emacs Octave Support,  Up: Top

Appendix I Grammar and Parser
*****************************

This appendix will eventually contain a semi-formal description of
Octave's language.

* Menu:

* Keywords::
* Parser::


File: octave.info,  Node: Keywords,  Next: Parser,  Up: Grammar and Parser

I.1 Keywords
============

The following identifiers are keywords, and may not be used as variable
or function names:

'__FILE__'               '__LINE__'               'break'
'case'                   'catch'                  'classdef'
'continue'               'do'                     'else'
'elseif'                 'end'                    'end_try_catch'
'end_unwind_protect'     'endclassdef'            'endenumeration'
'endevents'              'endfor'                 'endfunction'
'endif'                  'endmethods'             'endparfor'
'endproperties'          'endswitch'              'endwhile'
'enumeration'            'events'                 'for'
'function'               'global'                 'if'
'methods'                'otherwise'              'parfor'
'persistent'             'properties'             'return'
'static'                 'switch'                 'try'
'until'                  'unwind_protect'         'unwind_protect_cleanup'
'while'

   The function 'iskeyword' can be used to quickly check whether an
identifier is reserved by Octave.

 -- Built-in Function: iskeyword ()
 -- Built-in Function: iskeyword (NAME)
     Return true if NAME is an Octave keyword.  If NAME is omitted,
     return a list of keywords.

     See also: *note isvarname: XREFisvarname, *note exist: XREFexist.


File: octave.info,  Node: Parser,  Prev: Keywords,  Up: Grammar and Parser

I.2 Parser
==========

The parser has a number of variables that affect its internal operation.
These variables are generally documented in the manual alongside the
code that they affect.  For example, 'allow_noninteger_range_as_index'
is discussed in the section on index expressions.

   In addition, there are three non-specific parser customization
functions.  'add_input_event_hook' can be used to schedule a user
function for periodic evaluation.  'remove_input_event_hook' will stop a
user function from being evaluated periodically.

 -- Built-in Function: ID = add_input_event_hook (FCN)
 -- Built-in Function: ID = add_input_event_hook (FCN, DATA)
     Add the named function or function handle FCN to the list of
     functions to call periodically when Octave is waiting for input.
     The function should have the form

          FCN (DATA)

     If DATA is omitted, Octave calls the function without any
     arguments.

     The returned identifier may be used to remove the function handle
     from the list of input hook functions.

     See also: *note remove_input_event_hook:
     XREFremove_input_event_hook.

 -- Built-in Function: remove_input_event_hook (NAME)
 -- Built-in Function: remove_input_event_hook (FCN_ID)
     Remove the named function or function handle with the given
     identifier from the list of functions to call periodically when
     Octave is waiting for input.

     See also: *note add_input_event_hook: XREFadd_input_event_hook.

   Finally, when the parser cannot identify an input token it calls a
particular function to handle this.  By default, this is the internal
function "__unimplemented__" which makes suggestions about possible
Octave substitutes for MATLAB functions.

 -- Built-in Function: VAL = missing_function_hook ()
 -- Built-in Function: OLD_VAL = missing_function_hook (NEW_VAL)
 -- Built-in Function: missing_function_hook (NEW_VAL, "local")
     Query or set the internal variable that specifies the function to
     call when an unknown identifier is requested.

     When called from inside a function with the "local" option, the
     variable is changed locally for the function and any subroutines it
     calls.  The original variable value is restored when exiting the
     function.

     See also: *note missing_component_hook: XREFmissing_component_hook.


File: octave.info,  Node: Copying,  Next: Concept Index,  Prev: Grammar and Parser,  Up: Top

Appendix J GNU GENERAL PUBLIC LICENSE
*************************************

                        Version 3, 29 June 2007

     Copyright (C) 2007 Free Software Foundation, Inc. <http://fsf.org/>

     Everyone is permitted to copy and distribute verbatim copies of this
     license document, but changing it is not allowed.

Preamble
========

The GNU General Public License is a free, copyleft license for software
and other kinds of works.

   The licenses for most software and other practical works are designed
to take away your freedom to share and change the works.  By contrast,
the GNU General Public License is intended to guarantee your freedom to
share and change all versions of a program--to make sure it remains free
software for all its users.  We, the Free Software Foundation, use the
GNU General Public License for most of our software; it applies also to
any other work released this way by its authors.  You can apply it to
your programs, too.

   When we speak of free software, we are referring to freedom, not
price.  Our General Public Licenses are designed to make sure that you
have the freedom to distribute copies of free software (and charge for
them if you wish), that you receive source code or can get it if you
want it, that you can change the software or use pieces of it in new
free programs, and that you know you can do these things.

   To protect your rights, we need to prevent others from denying you
these rights or asking you to surrender the rights.  Therefore, you have
certain responsibilities if you distribute copies of the software, or if
you modify it: responsibilities to respect the freedom of others.

   For example, if you distribute copies of such a program, whether
gratis or for a fee, you must pass on to the recipients the same
freedoms that you received.  You must make sure that they, too, receive
or can get the source code.  And you must show them these terms so they
know their rights.

   Developers that use the GNU GPL protect your rights with two steps:
(1) assert copyright on the software, and (2) offer you this License
giving you legal permission to copy, distribute and/or modify it.

   For the developers' and authors' protection, the GPL clearly explains
that there is no warranty for this free software.  For both users' and
authors' sake, the GPL requires that modified versions be marked as
changed, so that their problems will not be attributed erroneously to
authors of previous versions.

   Some devices are designed to deny users access to install or run
modified versions of the software inside them, although the manufacturer
can do so.  This is fundamentally incompatible with the aim of
protecting users' freedom to change the software.  The systematic
pattern of such abuse occurs in the area of products for individuals to
use, which is precisely where it is most unacceptable.  Therefore, we
have designed this version of the GPL to prohibit the practice for those
products.  If such problems arise substantially in other domains, we
stand ready to extend this provision to those domains in future versions
of the GPL, as needed to protect the freedom of users.

   Finally, every program is threatened constantly by software patents.
States should not allow patents to restrict development and use of
software on general-purpose computers, but in those that do, we wish to
avoid the special danger that patents applied to a free program could
make it effectively proprietary.  To prevent this, the GPL assures that
patents cannot be used to render the program non-free.

   The precise terms and conditions for copying, distribution and
modification follow.

TERMS AND CONDITIONS
====================

  0. Definitions.

     "This License" refers to version 3 of the GNU General Public
     License.

     "Copyright" also means copyright-like laws that apply to other
     kinds of works, such as semiconductor masks.

     "The Program" refers to any copyrightable work licensed under this
     License.  Each licensee is addressed as "you".  "Licensees" and
     "recipients" may be individuals or organizations.

     To "modify" a work means to copy from or adapt all or part of the
     work in a fashion requiring copyright permission, other than the
     making of an exact copy.  The resulting work is called a "modified
     version" of the earlier work or a work "based on" the earlier work.

     A "covered work" means either the unmodified Program or a work
     based on the Program.

     To "propagate" a work means to do anything with it that, without
     permission, would make you directly or secondarily liable for
     infringement under applicable copyright law, except executing it on
     a computer or modifying a private copy.  Propagation includes
     copying, distribution (with or without modification), making
     available to the public, and in some countries other activities as
     well.

     To "convey" a work means any kind of propagation that enables other
     parties to make or receive copies.  Mere interaction with a user
     through a computer network, with no transfer of a copy, is not
     conveying.

     An interactive user interface displays "Appropriate Legal Notices"
     to the extent that it includes a convenient and prominently visible
     feature that (1) displays an appropriate copyright notice, and (2)
     tells the user that there is no warranty for the work (except to
     the extent that warranties are provided), that licensees may convey
     the work under this License, and how to view a copy of this
     License.  If the interface presents a list of user commands or
     options, such as a menu, a prominent item in the list meets this
     criterion.

  1. Source Code.

     The "source code" for a work means the preferred form of the work
     for making modifications to it.  "Object code" means any non-source
     form of a work.

     A "Standard Interface" means an interface that either is an
     official standard defined by a recognized standards body, or, in
     the case of interfaces specified for a particular programming
     language, one that is widely used among developers working in that
     language.

     The "System Libraries" of an executable work include anything,
     other than the work as a whole, that (a) is included in the normal
     form of packaging a Major Component, but which is not part of that
     Major Component, and (b) serves only to enable use of the work with
     that Major Component, or to implement a Standard Interface for
     which an implementation is available to the public in source code
     form.  A "Major Component", in this context, means a major
     essential component (kernel, window system, and so on) of the
     specific operating system (if any) on which the executable work
     runs, or a compiler used to produce the work, or an object code
     interpreter used to run it.

     The "Corresponding Source" for a work in object code form means all
     the source code needed to generate, install, and (for an executable
     work) run the object code and to modify the work, including scripts
     to control those activities.  However, it does not include the
     work's System Libraries, or general-purpose tools or generally
     available free programs which are used unmodified in performing
     those activities but which are not part of the work.  For example,
     Corresponding Source includes interface definition files associated
     with source files for the work, and the source code for shared
     libraries and dynamically linked subprograms that the work is
     specifically designed to require, such as by intimate data
     communication or control flow between those subprograms and other
     parts of the work.

     The Corresponding Source need not include anything that users can
     regenerate automatically from other parts of the Corresponding
     Source.

     The Corresponding Source for a work in source code form is that
     same work.

  2. Basic Permissions.

     All rights granted under this License are granted for the term of
     copyright on the Program, and are irrevocable provided the stated
     conditions are met.  This License explicitly affirms your unlimited
     permission to run the unmodified Program.  The output from running
     a covered work is covered by this License only if the output, given
     its content, constitutes a covered work.  This License acknowledges
     your rights of fair use or other equivalent, as provided by
     copyright law.

     You may make, run and propagate covered works that you do not
     convey, without conditions so long as your license otherwise
     remains in force.  You may convey covered works to others for the
     sole purpose of having them make modifications exclusively for you,
     or provide you with facilities for running those works, provided
     that you comply with the terms of this License in conveying all
     material for which you do not control copyright.  Those thus making
     or running the covered works for you must do so exclusively on your
     behalf, under your direction and control, on terms that prohibit
     them from making any copies of your copyrighted material outside
     their relationship with you.

     Conveying under any other circumstances is permitted solely under
     the conditions stated below.  Sublicensing is not allowed; section
     10 makes it unnecessary.

  3. Protecting Users' Legal Rights From Anti-Circumvention Law.

     No covered work shall be deemed part of an effective technological
     measure under any applicable law fulfilling obligations under
     article 11 of the WIPO copyright treaty adopted on 20 December
     1996, or similar laws prohibiting or restricting circumvention of
     such measures.

     When you convey a covered work, you waive any legal power to forbid
     circumvention of technological measures to the extent such
     circumvention is effected by exercising rights under this License
     with respect to the covered work, and you disclaim any intention to
     limit operation or modification of the work as a means of
     enforcing, against the work's users, your or third parties' legal
     rights to forbid circumvention of technological measures.

  4. Conveying Verbatim Copies.

     You may convey verbatim copies of the Program's source code as you
     receive it, in any medium, provided that you conspicuously and
     appropriately publish on each copy an appropriate copyright notice;
     keep intact all notices stating that this License and any
     non-permissive terms added in accord with section 7 apply to the
     code; keep intact all notices of the absence of any warranty; and
     give all recipients a copy of this License along with the Program.

     You may charge any price or no price for each copy that you convey,
     and you may offer support or warranty protection for a fee.

  5. Conveying Modified Source Versions.

     You may convey a work based on the Program, or the modifications to
     produce it from the Program, in the form of source code under the
     terms of section 4, provided that you also meet all of these
     conditions:

       a. The work must carry prominent notices stating that you
          modified it, and giving a relevant date.

       b. The work must carry prominent notices stating that it is
          released under this License and any conditions added under
          section 7.  This requirement modifies the requirement in
          section 4 to "keep intact all notices".

       c. You must license the entire work, as a whole, under this
          License to anyone who comes into possession of a copy.  This
          License will therefore apply, along with any applicable
          section 7 additional terms, to the whole of the work, and all
          its parts, regardless of how they are packaged.  This License
          gives no permission to license the work in any other way, but
          it does not invalidate such permission if you have separately
          received it.

       d. If the work has interactive user interfaces, each must display
          Appropriate Legal Notices; however, if the Program has
          interactive interfaces that do not display Appropriate Legal
          Notices, your work need not make them do so.

     A compilation of a covered work with other separate and independent
     works, which are not by their nature extensions of the covered
     work, and which are not combined with it such as to form a larger
     program, in or on a volume of a storage or distribution medium, is
     called an "aggregate" if the compilation and its resulting
     copyright are not used to limit the access or legal rights of the
     compilation's users beyond what the individual works permit.
     Inclusion of a covered work in an aggregate does not cause this
     License to apply to the other parts of the aggregate.

  6. Conveying Non-Source Forms.

     You may convey a covered work in object code form under the terms
     of sections 4 and 5, provided that you also convey the
     machine-readable Corresponding Source under the terms of this
     License, in one of these ways:

       a. Convey the object code in, or embodied in, a physical product
          (including a physical distribution medium), accompanied by the
          Corresponding Source fixed on a durable physical medium
          customarily used for software interchange.

       b. Convey the object code in, or embodied in, a physical product
          (including a physical distribution medium), accompanied by a
          written offer, valid for at least three years and valid for as
          long as you offer spare parts or customer support for that
          product model, to give anyone who possesses the object code
          either (1) a copy of the Corresponding Source for all the
          software in the product that is covered by this License, on a
          durable physical medium customarily used for software
          interchange, for a price no more than your reasonable cost of
          physically performing this conveying of source, or (2) access
          to copy the Corresponding Source from a network server at no
          charge.

       c. Convey individual copies of the object code with a copy of the
          written offer to provide the Corresponding Source.  This
          alternative is allowed only occasionally and noncommercially,
          and only if you received the object code with such an offer,
          in accord with subsection 6b.

       d. Convey the object code by offering access from a designated
          place (gratis or for a charge), and offer equivalent access to
          the Corresponding Source in the same way through the same
          place at no further charge.  You need not require recipients
          to copy the Corresponding Source along with the object code.
          If the place to copy the object code is a network server, the
          Corresponding Source may be on a different server (operated by
          you or a third party) that supports equivalent copying
          facilities, provided you maintain clear directions next to the
          object code saying where to find the Corresponding Source.
          Regardless of what server hosts the Corresponding Source, you
          remain obligated to ensure that it is available for as long as
          needed to satisfy these requirements.

       e. Convey the object code using peer-to-peer transmission,
          provided you inform other peers where the object code and
          Corresponding Source of the work are being offered to the
          general public at no charge under subsection 6d.

     A separable portion of the object code, whose source code is
     excluded from the Corresponding Source as a System Library, need
     not be included in conveying the object code work.

     A "User Product" is either (1) a "consumer product", which means
     any tangible personal property which is normally used for personal,
     family, or household purposes, or (2) anything designed or sold for
     incorporation into a dwelling.  In determining whether a product is
     a consumer product, doubtful cases shall be resolved in favor of
     coverage.  For a particular product received by a particular user,
     "normally used" refers to a typical or common use of that class of
     product, regardless of the status of the particular user or of the
     way in which the particular user actually uses, or expects or is
     expected to use, the product.  A product is a consumer product
     regardless of whether the product has substantial commercial,
     industrial or non-consumer uses, unless such uses represent the
     only significant mode of use of the product.

     "Installation Information" for a User Product means any methods,
     procedures, authorization keys, or other information required to
     install and execute modified versions of a covered work in that
     User Product from a modified version of its Corresponding Source.
     The information must suffice to ensure that the continued
     functioning of the modified object code is in no case prevented or
     interfered with solely because modification has been made.

     If you convey an object code work under this section in, or with,
     or specifically for use in, a User Product, and the conveying
     occurs as part of a transaction in which the right of possession
     and use of the User Product is transferred to the recipient in
     perpetuity or for a fixed term (regardless of how the transaction
     is characterized), the Corresponding Source conveyed under this
     section must be accompanied by the Installation Information.  But
     this requirement does not apply if neither you nor any third party
     retains the ability to install modified object code on the User
     Product (for example, the work has been installed in ROM).

     The requirement to provide Installation Information does not
     include a requirement to continue to provide support service,
     warranty, or updates for a work that has been modified or installed
     by the recipient, or for the User Product in which it has been
     modified or installed.  Access to a network may be denied when the
     modification itself materially and adversely affects the operation
     of the network or violates the rules and protocols for
     communication across the network.

     Corresponding Source conveyed, and Installation Information
     provided, in accord with this section must be in a format that is
     publicly documented (and with an implementation available to the
     public in source code form), and must require no special password
     or key for unpacking, reading or copying.

  7. Additional Terms.

     "Additional permissions" are terms that supplement the terms of
     this License by making exceptions from one or more of its
     conditions.  Additional permissions that are applicable to the
     entire Program shall be treated as though they were included in
     this License, to the extent that they are valid under applicable
     law.  If additional permissions apply only to part of the Program,
     that part may be used separately under those permissions, but the
     entire Program remains governed by this License without regard to
     the additional permissions.

     When you convey a copy of a covered work, you may at your option
     remove any additional permissions from that copy, or from any part
     of it.  (Additional permissions may be written to require their own
     removal in certain cases when you modify the work.)  You may place
     additional permissions on material, added by you to a covered work,
     for which you have or can give appropriate copyright permission.

     Notwithstanding any other provision of this License, for material
     you add to a covered work, you may (if authorized by the copyright
     holders of that material) supplement the terms of this License with
     terms:

       a. Disclaiming warranty or limiting liability differently from
          the terms of sections 15 and 16 of this License; or

       b. Requiring preservation of specified reasonable legal notices
          or author attributions in that material or in the Appropriate
          Legal Notices displayed by works containing it; or

       c. Prohibiting misrepresentation of the origin of that material,
          or requiring that modified versions of such material be marked
          in reasonable ways as different from the original version; or

       d. Limiting the use for publicity purposes of names of licensors
          or authors of the material; or

       e. Declining to grant rights under trademark law for use of some
          trade names, trademarks, or service marks; or

       f. Requiring indemnification of licensors and authors of that
          material by anyone who conveys the material (or modified
          versions of it) with contractual assumptions of liability to
          the recipient, for any liability that these contractual
          assumptions directly impose on those licensors and authors.

     All other non-permissive additional terms are considered "further
     restrictions" within the meaning of section 10.  If the Program as
     you received it, or any part of it, contains a notice stating that
     it is governed by this License along with a term that is a further
     restriction, you may remove that term.  If a license document
     contains a further restriction but permits relicensing or conveying
     under this License, you may add to a covered work material governed
     by the terms of that license document, provided that the further
     restriction does not survive such relicensing or conveying.

     If you add terms to a covered work in accord with this section, you
     must place, in the relevant source files, a statement of the
     additional terms that apply to those files, or a notice indicating
     where to find the applicable terms.

     Additional terms, permissive or non-permissive, may be stated in
     the form of a separately written license, or stated as exceptions;
     the above requirements apply either way.

  8. Termination.

     You may not propagate or modify a covered work except as expressly
     provided under this License.  Any attempt otherwise to propagate or
     modify it is void, and will automatically terminate your rights
     under this License (including any patent licenses granted under the
     third paragraph of section 11).

     However, if you cease all violation of this License, then your
     license from a particular copyright holder is reinstated (a)
     provisionally, unless and until the copyright holder explicitly and
     finally terminates your license, and (b) permanently, if the
     copyright holder fails to notify you of the violation by some
     reasonable means prior to 60 days after the cessation.

     Moreover, your license from a particular copyright holder is
     reinstated permanently if the copyright holder notifies you of the
     violation by some reasonable means, this is the first time you have
     received notice of violation of this License (for any work) from
     that copyright holder, and you cure the violation prior to 30 days
     after your receipt of the notice.

     Termination of your rights under this section does not terminate
     the licenses of parties who have received copies or rights from you
     under this License.  If your rights have been terminated and not
     permanently reinstated, you do not qualify to receive new licenses
     for the same material under section 10.

  9. Acceptance Not Required for Having Copies.

     You are not required to accept this License in order to receive or
     run a copy of the Program.  Ancillary propagation of a covered work
     occurring solely as a consequence of using peer-to-peer
     transmission to receive a copy likewise does not require
     acceptance.  However, nothing other than this License grants you
     permission to propagate or modify any covered work.  These actions
     infringe copyright if you do not accept this License.  Therefore,
     by modifying or propagating a covered work, you indicate your
     acceptance of this License to do so.

  10. Automatic Licensing of Downstream Recipients.

     Each time you convey a covered work, the recipient automatically
     receives a license from the original licensors, to run, modify and
     propagate that work, subject to this License.  You are not
     responsible for enforcing compliance by third parties with this
     License.

     An "entity transaction" is a transaction transferring control of an
     organization, or substantially all assets of one, or subdividing an
     organization, or merging organizations.  If propagation of a
     covered work results from an entity transaction, each party to that
     transaction who receives a copy of the work also receives whatever
     licenses to the work the party's predecessor in interest had or
     could give under the previous paragraph, plus a right to possession
     of the Corresponding Source of the work from the predecessor in
     interest, if the predecessor has it or can get it with reasonable
     efforts.

     You may not impose any further restrictions on the exercise of the
     rights granted or affirmed under this License.  For example, you
     may not impose a license fee, royalty, or other charge for exercise
     of rights granted under this License, and you may not initiate
     litigation (including a cross-claim or counterclaim in a lawsuit)
     alleging that any patent claim is infringed by making, using,
     selling, offering for sale, or importing the Program or any portion
     of it.

  11. Patents.

     A "contributor" is a copyright holder who authorizes use under this
     License of the Program or a work on which the Program is based.
     The work thus licensed is called the contributor's "contributor
     version".

     A contributor's "essential patent claims" are all patent claims
     owned or controlled by the contributor, whether already acquired or
     hereafter acquired, that would be infringed by some manner,
     permitted by this License, of making, using, or selling its
     contributor version, but do not include claims that would be
     infringed only as a consequence of further modification of the
     contributor version.  For purposes of this definition, "control"
     includes the right to grant patent sublicenses in a manner
     consistent with the requirements of this License.

     Each contributor grants you a non-exclusive, worldwide,
     royalty-free patent license under the contributor's essential
     patent claims, to make, use, sell, offer for sale, import and
     otherwise run, modify and propagate the contents of its contributor
     version.

     In the following three paragraphs, a "patent license" is any
     express agreement or commitment, however denominated, not to
     enforce a patent (such as an express permission to practice a
     patent or covenant not to sue for patent infringement).  To "grant"
     such a patent license to a party means to make such an agreement or
     commitment not to enforce a patent against the party.

     If you convey a covered work, knowingly relying on a patent
     license, and the Corresponding Source of the work is not available
     for anyone to copy, free of charge and under the terms of this
     License, through a publicly available network server or other
     readily accessible means, then you must either (1) cause the
     Corresponding Source to be so available, or (2) arrange to deprive
     yourself of the benefit of the patent license for this particular
     work, or (3) arrange, in a manner consistent with the requirements
     of this License, to extend the patent license to downstream
     recipients.  "Knowingly relying" means you have actual knowledge
     that, but for the patent license, your conveying the covered work
     in a country, or your recipient's use of the covered work in a
     country, would infringe one or more identifiable patents in that
     country that you have reason to believe are valid.

     If, pursuant to or in connection with a single transaction or
     arrangement, you convey, or propagate by procuring conveyance of, a
     covered work, and grant a patent license to some of the parties
     receiving the covered work authorizing them to use, propagate,
     modify or convey a specific copy of the covered work, then the
     patent license you grant is automatically extended to all
     recipients of the covered work and works based on it.

     A patent license is "discriminatory" if it does not include within
     the scope of its coverage, prohibits the exercise of, or is
     conditioned on the non-exercise of one or more of the rights that
     are specifically granted under this License.  You may not convey a
     covered work if you are a party to an arrangement with a third
     party that is in the business of distributing software, under which
     you make payment to the third party based on the extent of your
     activity of conveying the work, and under which the third party
     grants, to any of the parties who would receive the covered work
     from you, a discriminatory patent license (a) in connection with
     copies of the covered work conveyed by you (or copies made from
     those copies), or (b) primarily for and in connection with specific
     products or compilations that contain the covered work, unless you
     entered into that arrangement, or that patent license was granted,
     prior to 28 March 2007.

     Nothing in this License shall be construed as excluding or limiting
     any implied license or other defenses to infringement that may
     otherwise be available to you under applicable patent law.

  12. No Surrender of Others' Freedom.

     If conditions are imposed on you (whether by court order, agreement
     or otherwise) that contradict the conditions of this License, they
     do not excuse you from the conditions of this License.  If you
     cannot convey a covered work so as to satisfy simultaneously your
     obligations under this License and any other pertinent obligations,
     then as a consequence you may not convey it at all.  For example,
     if you agree to terms that obligate you to collect a royalty for
     further conveying from those to whom you convey the Program, the
     only way you could satisfy both those terms and this License would
     be to refrain entirely from conveying the Program.

  13. Use with the GNU Affero General Public License.

     Notwithstanding any other provision of this License, you have
     permission to link or combine any covered work with a work licensed
     under version 3 of the GNU Affero General Public License into a
     single combined work, and to convey the resulting work.  The terms
     of this License will continue to apply to the part which is the
     covered work, but the special requirements of the GNU Affero
     General Public License, section 13, concerning interaction through
     a network will apply to the combination as such.

  14. Revised Versions of this License.

     The Free Software Foundation may publish revised and/or new
     versions of the GNU General Public License from time to time.  Such
     new versions will be similar in spirit to the present version, but
     may differ in detail to address new problems or concerns.

     Each version is given a distinguishing version number.  If the
     Program specifies that a certain numbered version of the GNU
     General Public License "or any later version" applies to it, you
     have the option of following the terms and conditions either of
     that numbered version or of any later version published by the Free
     Software Foundation.  If the Program does not specify a version
     number of the GNU General Public License, you may choose any
     version ever published by the Free Software Foundation.

     If the Program specifies that a proxy can decide which future
     versions of the GNU General Public License can be used, that
     proxy's public statement of acceptance of a version permanently
     authorizes you to choose that version for the Program.

     Later license versions may give you additional or different
     permissions.  However, no additional obligations are imposed on any
     author or copyright holder as a result of your choosing to follow a
     later version.

  15. Disclaimer of Warranty.

     THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY
     APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE
     COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM "AS IS"
     WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED,
     INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
     MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE
     RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.
     SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL
     NECESSARY SERVICING, REPAIR OR CORRECTION.

  16. Limitation of Liability.

     IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN
     WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES
     AND/OR CONVEYS THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR
     DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR
     CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE
     THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA
     BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD
     PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER
     PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF
     THE POSSIBILITY OF SUCH DAMAGES.

  17. Interpretation of Sections 15 and 16.

     If the disclaimer of warranty and limitation of liability provided
     above cannot be given local legal effect according to their terms,
     reviewing courts shall apply local law that most closely
     approximates an absolute waiver of all civil liability in
     connection with the Program, unless a warranty or assumption of
     liability accompanies a copy of the Program in return for a fee.

END OF TERMS AND CONDITIONS
===========================

How to Apply These Terms to Your New Programs
=============================================

If you develop a new program, and you want it to be of the greatest
possible use to the public, the best way to achieve this is to make it
free software which everyone can redistribute and change under these
terms.

   To do so, attach the following notices to the program.  It is safest
to attach them to the start of each source file to most effectively
state the exclusion of warranty; and each file should have at least the
"copyright" line and a pointer to where the full notice is found.

     ONE LINE TO GIVE THE PROGRAM'S NAME AND A BRIEF IDEA OF WHAT IT DOES.
     Copyright (C) YEAR NAME OF AUTHOR

     This program is free software: you can redistribute it and/or modify
     it under the terms of the GNU General Public License as published by
     the Free Software Foundation, either version 3 of the License, or (at
     your option) any later version.

     This program is distributed in the hope that it will be useful, but
     WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
     General Public License for more details.

     You should have received a copy of the GNU General Public License
     along with this program.  If not, see <http://www.gnu.org/licenses/>.

   Also add information on how to contact you by electronic and paper
mail.

   If the program does terminal interaction, make it output a short
notice like this when it starts in an interactive mode:

     PROGRAM Copyright (C) YEAR NAME OF AUTHOR
     This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'.
     This is free software, and you are welcome to redistribute it
     under certain conditions; type 'show c' for details.

   The hypothetical commands 'show w' and 'show c' should show the
appropriate parts of the General Public License.  Of course, your
program's commands might be different; for a GUI interface, you would
use an "about box".

   You should also get your employer (if you work as a programmer) or
school, if any, to sign a "copyright disclaimer" for the program, if
necessary.  For more information on this, and how to apply and follow
the GNU GPL, see <http://www.gnu.org/licenses/>.

   The GNU General Public License does not permit incorporating your
program into proprietary programs.  If your program is a subroutine
library, you may consider it more useful to permit linking proprietary
applications with the library.  If this is what you want to do, use the
GNU Lesser General Public License instead of this License.  But first,
please read <http://www.gnu.org/philosophy/why-not-lgpl.html>.


File: octave.info,  Node: Concept Index,  Next: Function Index,  Prev: Copying,  Up: Top

Concept Index
*************

 [index ]
* Menu:

* '#':                                   Single Line Comments.
                                                              (line   6)
* '#!':                                  Executable Octave Programs.
                                                              (line   6)
* '#{':                                  Block Comments.      (line   6)
* '%':                                   Single Line Comments.
                                                              (line   6)
* '%{':                                  Block Comments.      (line   6)
* '--braindead':                         Command Line Options.
                                                              (line 142)
* '--built-in-docstrings-file FILENAME': Command Line Options.
                                                              (line   9)
* '--debug':                             Command Line Options.
                                                              (line  15)
* '--debug-jit':                         Command Line Options.
                                                              (line  21)
* '--doc-cache-file FILENAME':           Command Line Options.
                                                              (line  24)
* '--echo-commands':                     Command Line Options.
                                                              (line  31)
* '--exec-path PATH':                    Command Line Options.
                                                              (line  38)
* '--force-gui':                         Command Line Options.
                                                              (line  46)
* '--help':                              Command Line Options.
                                                              (line  51)
* '--image-path PATH':                   Command Line Options.
                                                              (line  54)
* '--info-file FILENAME':                Command Line Options.
                                                              (line  61)
* '--info-program PROGRAM':              Command Line Options.
                                                              (line  68)
* '--interactive':                       Command Line Options.
                                                              (line  76)
* '--jit-compiler':                      Command Line Options.
                                                              (line  82)
* '--line-editing':                      Command Line Options.
                                                              (line  85)
* '--no-gui':                            Command Line Options.
                                                              (line  88)
* '--no-history':                        Command Line Options.
                                                              (line  93)
* '--no-init-file':                      Command Line Options.
                                                              (line  96)
* '--no-init-path':                      Command Line Options.
                                                              (line  99)
* '--no-line-editing':                   Command Line Options.
                                                              (line 103)
* '--no-site-file':                      Command Line Options.
                                                              (line 106)
* '--no-window-system':                  Command Line Options.
                                                              (line 110)
* '--norc':                              Command Line Options.
                                                              (line 115)
* '--path PATH':                         Command Line Options.
                                                              (line 121)
* '--persist':                           Command Line Options.
                                                              (line 128)
* '--quiet':                             Command Line Options.
                                                              (line 134)
* '--silent':                            Command Line Options.
                                                              (line 134)
* '--texi-macros-file FILENAME':         Command Line Options.
                                                              (line 137)
* '--traditional':                       Command Line Options.
                                                              (line 142)
* '--verbose':                           Command Line Options.
                                                              (line 172)
* '--version':                           Command Line Options.
                                                              (line 176)
* '-?':                                  Command Line Options.
                                                              (line  51)
* '-d':                                  Command Line Options.
                                                              (line  15)
* '-f':                                  Command Line Options.
                                                              (line 115)
* '-h':                                  Command Line Options.
                                                              (line  51)
* '-H':                                  Command Line Options.
                                                              (line  93)
* '-i':                                  Command Line Options.
                                                              (line  76)
* '-p PATH':                             Command Line Options.
                                                              (line 121)
* '-q':                                  Command Line Options.
                                                              (line 134)
* '-V':                                  Command Line Options.
                                                              (line 172)
* '-v':                                  Command Line Options.
                                                              (line 176)
* '-x':                                  Command Line Options.
                                                              (line  31)
* '...' continuation marker:             Continuation Lines.  (line   6)
* '.octaverc':                           Startup Files.       (line  36)
* :end:                                  Index Expressions.   (line  46)
* '\' continuation marker:               Continuation Lines.  (line   6)
* '~/.inputrc':                          Customizing readline.
                                                              (line   6)
* '~/.octaverc':                         Startup Files.       (line  32)
* acknowledgements:                      Acknowledgements.    (line   6)
* addition:                              Arithmetic Ops.      (line   6)
* addition <1>:                          Operator Overloading.
                                                              (line   6)
* and operator:                          Boolean Expressions. (line   6)
* and operator <1>:                      Operator Overloading.
                                                              (line   6)
* anonymous functions:                   Function Handles Anonymous Functions Inline Functions.
                                                              (line   6)
* 'ans':                                 Variables.           (line  44)
* answers, incorrect:                    Bug Criteria.        (line  12)
* answers, incorrect <1>:                Bug Reporting.       (line  70)
* application-defined data:              Application-defined Data.
                                                              (line   6)
* apply:                                 Function Application.
                                                              (line   6)
* area series:                           Area Series.         (line   6)
* arguments in function call:            Calling Functions.   (line  15)
* arithmetic operators:                  Arithmetic Ops.      (line   6)
* arithmetic operators <1>:              Operator Overloading.
                                                              (line   6)
* array, creating a Java array:          Java Interface Functions.
                                                              (line  24)
* assignment expressions:                Assignment Ops.      (line   6)
* assignment operators:                  Assignment Ops.      (line   6)
* axes graphics object:                  Graphics Objects.    (line  19)
* axes properties:                       Axes Properties.     (line   6)
* bar series:                            Bar Series.          (line   6)
* batch processing:                      Executable Octave Programs.
                                                              (line   6)
* block comments:                        Block Comments.      (line   6)
* body of a loop:                        The while Statement. (line   6)
* boolean expressions:                   Boolean Expressions. (line   6)
* boolean expressions <1>:               Operator Overloading.
                                                              (line   6)
* boolean operators:                     Boolean Expressions. (line   6)
* boolean operators <1>:                 Operator Overloading.
                                                              (line   6)
* 'break' statement:                     The break Statement. (line   6)
* broadcast:                             Broadcasting.        (line   6)
* broadcasting:                          Broadcasting.        (line   6)
* BSX:                                   Broadcasting.        (line   6)
* bug criteria:                          Bug Criteria.        (line   6)
* bug tracker:                           Bug Tracker.         (line   6)
* bugs:                                  Reporting Bugs.      (line   6)
* bugs, investigating:                   Bug Reporting.       (line 102)
* bugs, known:                           Trouble.             (line   6)
* bugs, reporting:                       Bug Tracker.         (line   6)
* bugs, reporting <1>:                   Bug Reporting.       (line   6)
* built-in data types:                   Built-in Data Types. (line   6)
* built-in function:                     A Sample Function Description.
                                                              (line  47)
* callbacks:                             Callbacks.           (line   6)
* calling Java from Octave:              Java Interface.      (line   6)
* calling Octave from Java:              Java Interface.      (line   6)
* 'case' statement:                      The switch Statement.
                                                              (line   6)
* 'catch':                               The try Statement.   (line   6)
* cell arrays:                           Cell Array Objects.  (line   6)
* cell arrays <1>:                       Cell Arrays.         (line   6)
* character strings:                     String Objects.      (line   6)
* character strings <1>:                 Strings.             (line   6)
* Cholesky factorization:                Matrix Factorizations.
                                                              (line  12)
* Citations:                             Citing Octave in Publications.
                                                              (line   6)
* Citing Octave:                         Citing Octave in Publications.
                                                              (line   6)
* classes, making available to Octave:   How to make Java classes available?.
                                                              (line   6)
* classpath, adding new path:            Java Interface Functions.
                                                              (line 195)
* classpath, difference between static and dynamic: How to make Java classes available?.
                                                              (line   6)
* classpath, displaying:                 Java Interface Functions.
                                                              (line 161)
* classpath, dynamic:                    Java Interface Functions.
                                                              (line 161)
* classpath, dynamic <1>:                Java Interface Functions.
                                                              (line 195)
* classpath, removing path:              Java Interface Functions.
                                                              (line 205)
* classpath, setting:                    How to make Java classes available?.
                                                              (line   6)
* classpath, static:                     Java Interface Functions.
                                                              (line 161)
* 'classpath.txt':                       How to make Java classes available?.
                                                              (line   6)
* clearing the screen:                   Cursor Motion.       (line  56)
* code profiling:                        Profiling.           (line   6)
* coding standards:                      Tips and Standards.  (line   6)
* coding standards <1>:                  Contributing Guidelines.
                                                              (line   6)
* colors, graphics:                      Colors.              (line   6)
* comma separated lists:                 Comma Separated Lists.
                                                              (line   6)
* command and output logs:               Diary and Echo Commands.
                                                              (line   6)
* command completion:                    Commands For Completion.
                                                              (line   6)
* command descriptions:                  A Sample Command Description.
                                                              (line   6)
* command echoing:                       Diary and Echo Commands.
                                                              (line   6)
* command history:                       Commands For History.
                                                              (line   6)
* command options:                       Command Line Options.
                                                              (line   6)
* command-line editing:                  Command Line Editing.
                                                              (line   6)
* comments:                              Comments.            (line   6)
* comparison expressions:                Comparison Ops.      (line   6)
* comparison expressions <1>:            Operator Overloading.
                                                              (line   6)
* complex-conjugate transpose:           Arithmetic Ops.      (line   6)
* complex-conjugate transpose <1>:       Operator Overloading.
                                                              (line   6)
* containers:                            Data Containers.     (line   6)
* continuation lines:                    Continuation Lines.  (line   6)
* 'continue' statement:                  The continue Statement.
                                                              (line   6)
* contour series:                        Contour Groups.      (line   6)
* contributing to Octave:                How You Can Contribute to Octave.
                                                              (line   6)
* contributors:                          Preface.             (line   6)
* conversion specifications ('printf'):  Formatted Output.    (line  51)
* conversion specifications ('scanf'):   Formatted Input.     (line  94)
* copy-on-write:                         Miscellaneous Techniques.
                                                              (line  16)
* copyright:                             Copying.             (line   6)
* core dump:                             Bug Criteria.        (line   9)
* COW:                                   Miscellaneous Techniques.
                                                              (line  16)
* creating graphics objects:             Graphics Objects.    (line  40)
* cs-lists:                              Comma Separated Lists.
                                                              (line   6)
* customizing 'readline':                Customizing readline.
                                                              (line   6)
* customizing the prompt:                Customizing the Prompt.
                                                              (line   6)
* DAE:                                   Differential Equations.
                                                              (line  14)
* data sources in object groups:         Data Sources in Object Groups.
                                                              (line   6)
* data structures:                       Data Structure Objects.
                                                              (line   6)
* data structures <1>:                   Structures.          (line   6)
* data types:                            Data Types.          (line   6)
* data types, built-in:                  Built-in Data Types. (line   6)
* data types, user-defined:              User-defined Data Types.
                                                              (line   6)
* decrement operator:                    Assignment Ops.      (line 170)
* default arguments:                     Default Arguments.   (line   6)
* default graphics properties:           Managing Default Properties.
                                                              (line   6)
* defining functions:                    Functions and Scripts.
                                                              (line   6)
* deprecated functions:                  Obsolete Functions.  (line   6)
* description format:                    Format of Descriptions.
                                                              (line   6)
* diagonal and permutation matrices:     Diagonal and Permutation Matrices.
                                                              (line   6)
* diagonal matrix expressions:           Expressions Involving Diagonal Matrices.
                                                              (line   6)
* dialog, displaying a help dialog:      Dialog Box Functions.
                                                              (line  43)
* dialog, displaying a list dialog:      Dialog Box Functions.
                                                              (line 100)
* dialog, displaying a question dialog:  Dialog Box Functions.
                                                              (line 156)
* dialog, displaying a warning dialog:   Dialog Box Functions.
                                                              (line   9)
* dialog, displaying a warning dialog <1>: Dialog Box Functions.
                                                              (line 187)
* dialog, displaying an error dialog:    Dialog Box Functions.
                                                              (line  28)
* dialog, displaying an input dialog:    Dialog Box Functions.
                                                              (line  58)
* diary of commands and output:          Diary and Echo Commands.
                                                              (line   6)
* differential equations:                Differential Equations.
                                                              (line  15)
* diffs, submitting:                     Sending Patches.     (line   6)
* distribution of Octave:                Distribution.        (line   6)
* division:                              Arithmetic Ops.      (line   6)
* division <1>:                          Operator Overloading.
                                                              (line   6)
* 'do-until' statement:                  The do-until Statement.
                                                              (line   6)
* documentation fonts:                   Fonts.               (line   6)
* documentation notation:                Evaluation Notation. (line   6)
* documenting functions:                 Comments and the Help System.
                                                              (line   6)
* documenting Octave programs:           Comments.            (line   6)
* documenting user scripts:              Comments and the Help System.
                                                              (line   6)
* Dulmage-Mendelsohn decomposition:      Mathematical Considerations.
                                                              (line 364)
* dynamic classpath:                     Java Interface Functions.
                                                              (line 161)
* dynamic classpath <1>:                 How to make Java classes available?.
                                                              (line   6)
* dynamic classpath, adding new path:    Java Interface Functions.
                                                              (line 195)
* dynamic naming:                        Creating Structures. (line   6)
* dynamic-linking:                       External Code Interface.
                                                              (line   6)
* Dynamically Linked Functions:          External Code Interface.
                                                              (line   6)
* echoing executing commands:            Diary and Echo Commands.
                                                              (line   6)
* editing the command line:              Command Line Editing.
                                                              (line   6)
* element-by-element evaluation:         Element-by-element Boolean Operators.
                                                              (line   6)
* 'else' statement:                      The if Statement.    (line   6)
* 'elseif' statement:                    The if Statement.    (line   6)
* Emacs TAGS files:                      Using Octave Mode.   (line 254)
* 'end' statement:                       Statements.          (line  16)
* 'end', indexing:                       Index Expressions.   (line  46)
* 'endfor' statement:                    The for Statement.   (line   6)
* 'endfunction' statement:               Defining Functions.  (line   6)
* 'endif' statement:                     The if Statement.    (line   6)
* 'endswitch' statement:                 The switch Statement.
                                                              (line   6)
* 'endwhile' statement:                  The while Statement. (line   6)
* 'end_try_catch':                       The try Statement.   (line   6)
* 'end_unwind_protect':                  The unwind_protect Statement.
                                                              (line   6)
* equality operator:                     Comparison Ops.      (line   6)
* equality operator <1>:                 Operator Overloading.
                                                              (line   6)
* equality, tests for:                   Comparison Ops.      (line   6)
* equality, tests for <1>:               Operator Overloading.
                                                              (line   6)
* equations, nonlinear:                  Nonlinear Equations. (line   6)
* erroneous messages:                    Bug Criteria.        (line  21)
* erroneous results:                     Bug Criteria.        (line  12)
* erroneous results <1>:                 Bug Reporting.       (line  70)
* error bar series:                      Error Bar Series.    (line   6)
* error ids:                             Catching Errors.     (line 131)
* error message notation:                Error Messages.      (line   6)
* error messages:                        Errors.              (line   6)
* error messages, incorrect:             Bug Criteria.        (line  21)
* escape sequence notation:              Escape Sequences in String Constants.
                                                              (line   6)
* evaluation notation:                   Evaluation Notation. (line   6)
* executable scripts:                    Executable Octave Programs.
                                                              (line   6)
* execution speed:                       Miscellaneous Techniques.
                                                              (line   6)
* exiting octave:                        Running Octave.      (line  19)
* exiting octave <1>:                    Quitting Octave.     (line   6)
* exponentiation:                        Arithmetic Ops.      (line   6)
* exponentiation <1>:                    Operator Overloading.
                                                              (line   6)
* expression, range:                     Ranges.              (line   6)
* expressions:                           Expressions.         (line   6)
* expressions, assignment:               Assignment Ops.      (line   6)
* expressions, boolean:                  Boolean Expressions. (line   6)
* expressions, boolean <1>:              Operator Overloading.
                                                              (line   6)
* expressions, comparison:               Comparison Ops.      (line   6)
* expressions, comparison <1>:           Operator Overloading.
                                                              (line   6)
* expressions, logical:                  Boolean Expressions. (line   6)
* expressions, logical <1>:              Operator Overloading.
                                                              (line   6)
* factorial function:                    Recursion.           (line   6)
* fatal signal:                          Bug Criteria.        (line   9)
* field, returning value of Java object field: Java Interface Functions.
                                                              (line  75)
* field, setting value of Java object field: Java Interface Functions.
                                                              (line 102)
* fields, displaying available fields of a Java object: Java Interface Functions.
                                                              (line  56)
* figure graphics object:                Graphics Objects.    (line  16)
* figure properties:                     Figure Properties.   (line   6)
* finding minimums:                      Minimizers.          (line   6)
* flag character ('printf'):             Output Conversion Syntax.
                                                              (line  28)
* flag character ('scanf'):              Input Conversion Syntax.
                                                              (line  34)
* 'for' statement:                       The for Statement.   (line   6)
* Frobenius norm:                        Basic Matrix Functions.
                                                              (line 277)
* function application:                  Function Application.
                                                              (line   6)
* function descriptions:                 A Sample Function Description.
                                                              (line   6)
* function file:                         A Sample Function Description.
                                                              (line  43)
* function file <1>:                     Function Files.      (line   6)
* 'function' statement:                  Defining Functions.  (line   6)
* functions, deprecated:                 Obsolete Functions.  (line   6)
* functions, obsolete:                   Obsolete Functions.  (line   6)
* functions, user-defined:               Functions and Scripts.
                                                              (line   6)
* funding Octave development:            How You Can Contribute to Octave.
                                                              (line   6)
* general p-norm:                        Basic Matrix Functions.
                                                              (line 280)
* 'global' statement:                    Global Variables.    (line   6)
* global variables:                      Global Variables.    (line   6)
* grammar rules:                         Grammar and Parser.  (line   6)
* graphics:                              Plotting.            (line   6)
* graphics colors:                       Colors.              (line   6)
* graphics data structures:              Graphics Data Structures.
                                                              (line   6)
* graphics line styles:                  Line Styles.         (line   6)
* graphics marker styles:                Marker Styles.       (line   6)
* graphics object properties:            Graphics Object Properties.
                                                              (line   6)
* graphics object, axes:                 Graphics Objects.    (line  19)
* graphics object, figure:               Graphics Objects.    (line  16)
* graphics object, image:                Graphics Objects.    (line  29)
* graphics object, line:                 Graphics Objects.    (line  23)
* graphics object, patch:                Graphics Objects.    (line  32)
* graphics object, root figure:          Graphics Objects.    (line  12)
* graphics object, surface:              Graphics Objects.    (line  35)
* graphics object, text:                 Graphics Objects.    (line  26)
* graphics objects:                      Graphics Objects.    (line   6)
* graphics objects, saving:              Graphics Objects.    (line 459)
* graphics properties, default:          Managing Default Properties.
                                                              (line   6)
* graphics toolkits:                     Graphics Toolkits.   (line   6)
* greater than operator:                 Comparison Ops.      (line   6)
* greater than operator <1>:             Operator Overloading.
                                                              (line   6)
* group objects:                         Quiver Group.        (line   6)
* group objects <1>:                     Scatter Group.       (line   6)
* group objects <2>:                     Stair Group.         (line   6)
* group objects <3>:                     Surface Group.       (line   6)
* handle functions:                      Graphics Objects.    (line 217)
* handle, function handles:              Function Handles Anonymous Functions Inline Functions.
                                                              (line   6)
* header comments:                       Function Headers.    (line   6)
* help, online:                          Getting Help.        (line   6)
* help, user-defined functions:          Comments and the Help System.
                                                              (line   6)
* help, where to find:                   Service.             (line   6)
* Hermitian operator:                    Arithmetic Ops.      (line   6)
* Hermitian operator <1>:                Operator Overloading.
                                                              (line   6)
* Hessenberg decomposition:              Matrix Factorizations.
                                                              (line 140)
* history:                               Preface.             (line   6)
* history of commands:                   Commands For History.
                                                              (line   6)
* 'if' statement:                        The if Statement.    (line   6)
* image graphics object:                 Graphics Objects.    (line  29)
* image properties:                      Image Properties.    (line   6)
* improving Octave:                      Bug Criteria.        (line  28)
* improving Octave <1>:                  Sending Patches.     (line   6)
* incorrect error messages:              Bug Criteria.        (line  21)
* incorrect output:                      Bug Criteria.        (line  12)
* incorrect output <1>:                  Bug Reporting.       (line  70)
* incorrect results:                     Bug Criteria.        (line  12)
* incorrect results <1>:                 Bug Reporting.       (line  70)
* increment operator:                    Assignment Ops.      (line 170)
* infinity norm:                         Basic Matrix Functions.
                                                              (line 273)
* initialization:                        Startup Files.       (line   6)
* inline, inline functions:              Function Handles Anonymous Functions Inline Functions.
                                                              (line   6)
* input conversions, for 'scanf':        Table of Input Conversions.
                                                              (line   6)
* input history:                         Commands For History.
                                                              (line   6)
* installation trouble:                  Trouble.             (line   6)
* installing Octave:                     Installation.        (line   6)
* instance, how to create:               How to create an instance of a Java class?.
                                                              (line   6)
* introduction:                          Introduction.        (line   6)
* introduction to graphics structures:   Introduction to Graphics Structures.
                                                              (line   6)
* invalid input:                         Bug Criteria.        (line  23)
* Java, calling from Octave:             Java Interface.      (line   6)
* Java, using with Octave:               Java Interface.      (line   6)
* 'javaclasspath.txt':                   How to make Java classes available?.
                                                              (line   6)
* Kendall's Tau:                         Correlation and Regression Analysis.
                                                              (line  76)
* keywords:                              Keywords.            (line   6)
* known causes of trouble:               Trouble.             (line   6)
* language definition:                   Grammar and Parser.  (line   6)
* less than operator:                    Comparison Ops.      (line   6)
* less than operator <1>:                Operator Overloading.
                                                              (line   6)
* line graphics object:                  Graphics Objects.    (line  23)
* line properties:                       Line Properties.     (line   6)
* line series:                           Line Series.         (line   6)
* line styles, graphics:                 Line Styles.         (line   6)
* linear algebra:                        Linear Algebra.      (line   6)
* linear algebra, techniques:            Techniques Used for Linear Algebra.
                                                              (line   6)
* loadable function:                     A Sample Function Description.
                                                              (line  51)
* loading data:                          Simple File I/O.     (line   6)
* local minimum:                         Minimizers.          (line   6)
* logging commands and output:           Diary and Echo Commands.
                                                              (line   6)
* logical expressions:                   Boolean Expressions. (line   6)
* logical expressions <1>:               Operator Overloading.
                                                              (line   6)
* logical operators:                     Boolean Expressions. (line   6)
* logical operators <1>:                 Operator Overloading.
                                                              (line   6)
* loop:                                  The while Statement. (line   6)
* looping over structure elements:       Looping Over Structure Elements.
                                                              (line   6)
* LP:                                    Optimization.        (line  18)
* LU decomposition:                      Matrix Factorizations.
                                                              (line 163)
* LU decomposition <1>:                  Iterative Techniques.
                                                              (line 279)
* lvalue:                                Assignment Ops.      (line  33)
* map:                                   Function Application.
                                                              (line   6)
* mapping function:                      A Sample Function Description.
                                                              (line  57)
* marker styles, graphics:               Marker Styles.       (line   6)
* matching failure, in 'scanf':          Formatted Input.     (line  99)
* matrices:                              Matrices.            (line   6)
* matrices, diagonal and permutation:    Diagonal and Permutation Matrices.
                                                              (line   6)
* matrix factorizations:                 Matrix Factorizations.
                                                              (line   6)
* matrix functions, basic:               Basic Matrix Functions.
                                                              (line   6)
* matrix multiplication:                 Arithmetic Ops.      (line   6)
* matrix multiplication <1>:             Operator Overloading.
                                                              (line   6)
* matrix, functions of:                  Functions of a Matrix.
                                                              (line   6)
* matrix, permutation functions:         Permutation Matrix Functions.
                                                              (line   6)
* matrix, specialized solvers:           Specialized Solvers. (line   6)
* matrix, zero elements:                 Zeros Treatment.     (line   6)
* maximum field width ('scanf'):         Input Conversion Syntax.
                                                              (line  42)
* memory management:                     Miscellaneous Techniques.
                                                              (line  16)
* memory, displaying Java memory status: Java Interface Functions.
                                                              (line 242)
* memory, limitations:                   How can I handle memory limitations?.
                                                              (line   6)
* messages, error:                       Errors.              (line   6)
* method, invoking a method of a Java object: Java Interface Functions.
                                                              (line 139)
* methods, displaying available methods of a Java object: Java Interface Functions.
                                                              (line 117)
* mex:                                   Mex-Files.           (line   6)
* mex-files:                             Mex-Files.           (line   6)
* minimum field width ('printf'):        Output Conversion Syntax.
                                                              (line  35)
* missing data:                          Missing Data.        (line   6)
* mkoctfile:                             Oct-Files.           (line   6)
* multi-line comments:                   Block Comments.      (line   6)
* multiplication:                        Arithmetic Ops.      (line   6)
* multiplication <1>:                    Operator Overloading.
                                                              (line   6)
* negation:                              Arithmetic Ops.      (line   6)
* negation <1>:                          Operator Overloading.
                                                              (line   6)
* NLP:                                   Optimization.        (line  17)
* nonlinear equations:                   Nonlinear Equations. (line   6)
* nonlinear programming:                 Optimization.        (line  18)
* not operator:                          Boolean Expressions. (line   6)
* not operator <1>:                      Operator Overloading.
                                                              (line   6)
* numeric constant:                      Numeric Objects.     (line   6)
* numeric constant <1>:                  Numeric Data Types.  (line   6)
* numeric value:                         Numeric Objects.     (line   6)
* numeric value <1>:                     Numeric Data Types.  (line   6)
* object groups:                         Object Groups.       (line   6)
* object, creating a Java object:        Java Interface Functions.
                                                              (line  10)
* object, how to create:                 How to create an instance of a Java class?.
                                                              (line   6)
* obsolete functions:                    Obsolete Functions.  (line   6)
* oct:                                   Oct-Files.           (line   6)
* oct-files:                             Oct-Files.           (line   6)
* Octave and MATLAB, how to distinguish between: How to distinguish between Octave and Matlab?.
                                                              (line   6)
* Octave API:                            External Code Interface.
                                                              (line   6)
* Octave command options:                Command Line Options.
                                                              (line   6)
* Octave development:                    Contributing Guidelines.
                                                              (line   6)
* Octave, calling from Java:             Java Interface.      (line   6)
* 'octave-tags':                         Using Octave Mode.   (line 254)
* ODE:                                   Differential Equations.
                                                              (line  15)
* online help:                           Getting Help.        (line   6)
* operator precedence:                   Operator Precedence. (line   6)
* operators, arithmetic:                 Arithmetic Ops.      (line   6)
* operators, arithmetic <1>:             Operator Overloading.
                                                              (line   6)
* operators, assignment:                 Assignment Ops.      (line   6)
* operators, boolean:                    Boolean Expressions. (line   6)
* operators, boolean <1>:                Operator Overloading.
                                                              (line   6)
* operators, decrement:                  Assignment Ops.      (line 169)
* operators, increment:                  Assignment Ops.      (line 170)
* operators, logical:                    Boolean Expressions. (line   6)
* operators, logical <1>:                Operator Overloading.
                                                              (line   6)
* operators, relational:                 Comparison Ops.      (line   6)
* operators, relational <1>:             Operator Overloading.
                                                              (line   6)
* optimization:                          Miscellaneous Techniques.
                                                              (line   6)
* optimization <1>:                      Optimization.        (line  18)
* options, Octave command:               Command Line Options.
                                                              (line   6)
* or operator:                           Boolean Expressions. (line   6)
* or operator <1>:                       Operator Overloading.
                                                              (line   6)
* oregonator:                            Ordinary Differential Equations.
                                                              (line 147)
* 'otherwise' statement:                 The switch Statement.
                                                              (line   6)
* output conversions, for 'printf':      Table of Output Conversions.
                                                              (line   6)
* parser:                                Parser.              (line   6)
* patch graphics object:                 Graphics Objects.    (line  32)
* patch properties:                      Patch Properties.    (line   6)
* patches, submitting:                   Sending Patches.     (line   6)
* path, adding to classpath:             Java Interface Functions.
                                                              (line 195)
* path, removing from classpath:         Java Interface Functions.
                                                              (line 205)
* permutation matrix functions:          Permutation Matrix Functions.
                                                              (line   6)
* 'persistent' statement:                Persistent Variables.
                                                              (line   6)
* persistent variables:                  Persistent Variables.
                                                              (line   6)
* personal startup file:                 Startup Files.       (line  32)
* PKG_ADD:                               Creating Packages.   (line  45)
* PKG_DEL:                               Creating Packages.   (line  63)
* plotting:                              Plotting.            (line   6)
* plotting, high-level:                  High-Level Plotting. (line   6)
* plotting, multiple plot windows:       Multiple Plot Windows.
                                                              (line   6)
* plotting, multiple plots per figure:   Multiple Plots on One Page.
                                                              (line   6)
* plotting, saving and printing plots:   Printing and Saving Plots.
                                                              (line   6)
* plotting, three-dimensional:           Three-Dimensional Plots.
                                                              (line   6)
* plotting, two-dimensional functions:   Two-dimensional Function Plotting.
                                                              (line   6)
* plotting, window manipulation:         Manipulation of Plot Windows.
                                                              (line   6)
* precision ('printf'):                  Output Conversion Syntax.
                                                              (line  47)
* printing notation:                     Printing Notation.   (line   6)
* printing plots:                        Printing and Saving Plots.
                                                              (line   6)
* profiler:                              Profiling.           (line   6)
* program, self contained:               Executable Octave Programs.
                                                              (line   6)
* Progress Bar:                          Progress Bar.        (line   6)
* project startup file:                  Startup Files.       (line  36)
* prompt customization:                  Customizing the Prompt.
                                                              (line   6)
* pseudoinverse:                         Basic Matrix Functions.
                                                              (line 353)
* pseudoinverse <1>:                     Expressions Involving Diagonal Matrices.
                                                              (line  27)
* QP:                                    Optimization.        (line  18)
* QR factorization:                      Matrix Factorizations.
                                                              (line 261)
* quadratic programming:                 Optimization.        (line  18)
* quitting octave:                       Running Octave.      (line  19)
* quitting octave <1>:                   Quitting Octave.     (line   6)
* quiver group:                          Quiver Group.        (line   6)
* quotient:                              Arithmetic Ops.      (line   6)
* quotient <1>:                          Operator Overloading.
                                                              (line   6)
* range expressions:                     Ranges.              (line   6)
* 'readline' customization:              Customizing readline.
                                                              (line   6)
* recycling:                             Broadcasting.        (line   6)
* relational operators:                  Comparison Ops.      (line   6)
* relational operators <1>:              Operator Overloading.
                                                              (line   6)
* reporting bugs:                        Reporting Bugs.      (line   6)
* reporting bugs <1>:                    Bug Tracker.         (line   6)
* results, incorrect:                    Bug Criteria.        (line  12)
* results, incorrect <1>:                Bug Reporting.       (line  70)
* root figure graphics object:           Graphics Objects.    (line  12)
* root figure properties:                Root Figure Properties.
                                                              (line   6)
* saving data:                           Simple File I/O.     (line   6)
* saving graphics objects:               Graphics Objects.    (line 459)
* saving plots:                          Printing and Saving Plots.
                                                              (line   6)
* scatter group:                         Scatter Group.       (line   6)
* Schur decomposition:                   Matrix Factorizations.
                                                              (line 502)
* script files:                          Functions and Scripts.
                                                              (line   6)
* scripts:                               Executable Octave Programs.
                                                              (line   6)
* self contained programs:               Executable Octave Programs.
                                                              (line   6)
* series objects:                        Area Series.         (line   6)
* series objects <1>:                    Bar Series.          (line   6)
* series objects <2>:                    Contour Groups.      (line   6)
* series objects <3>:                    Error Bar Series.    (line   6)
* series objects <4>:                    Line Series.         (line   6)
* series objects <5>:                    Stem Series.         (line   6)
* short-circuit evaluation:              Short-circuit Boolean Operators.
                                                              (line   6)
* side effect:                           Assignment Ops.      (line  26)
* SIMD:                                  Broadcasting.        (line   6)
* singular value decomposition:          Matrix Factorizations.
                                                              (line 555)
* site startup file:                     Startup Files.       (line  11)
* Spearman's Rho:                        Correlation and Regression Analysis.
                                                              (line  61)
* speedups:                              Miscellaneous Techniques.
                                                              (line   6)
* stair group:                           Stair Group.         (line   6)
* standards of coding style:             Tips and Standards.  (line   6)
* startup:                               Startup Files.       (line   6)
* startup files:                         Startup Files.       (line  10)
* statements:                            Statements.          (line   6)
* static classpath:                      Java Interface Functions.
                                                              (line 161)
* static classpath <1>:                  How to make Java classes available?.
                                                              (line   6)
* stem series:                           Stem Series.         (line   6)
* strings:                               String Objects.      (line   6)
* strings <1>:                           Strings.             (line   6)
* structural rank:                       Sparse Linear Algebra.
                                                              (line 253)
* structure elements, looping over:      Looping Over Structure Elements.
                                                              (line   6)
* structures:                            Data Structure Objects.
                                                              (line   6)
* structures <1>:                        Structures.          (line   6)
* submitting diffs:                      Sending Patches.     (line   6)
* submitting patches:                    Sending Patches.     (line   6)
* subtraction:                           Arithmetic Ops.      (line   6)
* subtraction <1>:                       Operator Overloading.
                                                              (line   6)
* suggestions:                           Bug Criteria.        (line  28)
* surface graphics object:               Graphics Objects.    (line  35)
* surface group:                         Surface Group.       (line   6)
* surface properties:                    Surface Properties.  (line   6)
* 'switch' statement:                    The switch Statement.
                                                              (line   6)
* symbols, translation table:            Which TeX symbols are implemented in dialog functions?.
                                                              (line   6)
* TAGS:                                  Using Octave Mode.   (line 254)
* test functions:                        Test and Demo Functions.
                                                              (line   6)
* tests for equality:                    Comparison Ops.      (line   6)
* tests for equality <1>:                Operator Overloading.
                                                              (line   6)
* TeX symbols, translation table:        Which TeX symbols are implemented in dialog functions?.
                                                              (line   6)
* text graphics object:                  Graphics Objects.    (line  26)
* text properties:                       Text Properties.     (line   6)
* tips:                                  Tips and Standards.  (line   6)
* toolkit customization:                 Customizing Toolkit Behavior.
                                                              (line   6)
* toolkits, graphics:                    Graphics Toolkits.   (line   6)
* translation table for TeX symbols:     Which TeX symbols are implemented in dialog functions?.
                                                              (line   6)
* transpose:                             Arithmetic Ops.      (line   6)
* transpose <1>:                         Operator Overloading.
                                                              (line   6)
* transpose, complex-conjugate:          Arithmetic Ops.      (line   6)
* transpose, complex-conjugate <1>:      Operator Overloading.
                                                              (line   6)
* troubleshooting:                       Trouble.             (line   6)
* 'try' statement:                       The try Statement.   (line   6)
* unary minus:                           Arithmetic Ops.      (line   6)
* unary minus <1>:                       Operator Overloading.
                                                              (line   6)
* undefined behavior:                    Bug Criteria.        (line  15)
* undefined function value:              Bug Criteria.        (line  15)
* 'unwind_protect' statement:            The unwind_protect Statement.
                                                              (line   6)
* 'unwind_protect_cleanup':              The unwind_protect Statement.
                                                              (line   6)
* use of comments:                       Comments.            (line   6)
* user-defined data types:               User-defined Data Types.
                                                              (line   6)
* user-defined functions:                Functions and Scripts.
                                                              (line   6)
* user-defined variables:                Variables.           (line   6)
* using Octave with Java:                Java Interface.      (line   6)
* 'varargin':                            Variable-length Argument Lists.
                                                              (line   6)
* 'varargout':                           Variable-length Return Lists.
                                                              (line   6)
* variable-length argument lists:        Variable-length Argument Lists.
                                                              (line   6)
* variable-length return lists:          Variable-length Return Lists.
                                                              (line   6)
* variables, global:                     Global Variables.    (line   6)
* variables, persistent:                 Persistent Variables.
                                                              (line   6)
* variables, user-defined:               Variables.           (line   6)
* vectorization:                         Vectorization and Faster Code Execution.
                                                              (line   6)
* vectorize:                             Vectorization and Faster Code Execution.
                                                              (line   6)
* version startup file:                  Startup Files.       (line  21)
* warning ids:                           Issuing Warnings.    (line  96)
* warranty:                              Copying.             (line   6)
* 'while' statement:                     The while Statement. (line   6)
* wrong answers:                         Bug Criteria.        (line  12)
* wrong answers <1>:                     Bug Reporting.       (line  70)


File: octave.info,  Node: Function Index,  Next: Operator Index,  Prev: Concept Index,  Up: Top

Function Index
**************

 [index ]
* Menu:

* abs:                                   Complex Arithmetic. (line    9)
* accumarray:                            Accumulation.       (line   10)
* accumarray <1>:                        Accumulation.       (line   11)
* accumdim:                              Accumulation.       (line  100)
* acos:                                  Trigonometry.       (line   70)
* acosd:                                 Trigonometry.       (line  214)
* acosh:                                 Trigonometry.       (line  133)
* acot:                                  Trigonometry.       (line   90)
* acotd:                                 Trigonometry.       (line  240)
* acoth:                                 Trigonometry.       (line  153)
* acsc:                                  Trigonometry.       (line   85)
* acscd:                                 Trigonometry.       (line  235)
* acsch:                                 Trigonometry.       (line  148)
* addlistener:                           Object Groups.      (line  121)
* addpath:                               Manipulating the Load Path.
                                                             (line   21)
* addpath <1>:                           Manipulating the Load Path.
                                                             (line   22)
* addpref:                               User-Defined Preferences.
                                                             (line   45)
* addproperty:                           Object Groups.      (line   51)
* addproperty <1>:                       Object Groups.      (line   52)
* addtodate:                             Timing Utilities.   (line  627)
* add_input_event_hook:                  Parser.             (line   16)
* add_input_event_hook <1>:              Parser.             (line   17)
* airy:                                  Special Functions.  (line    6)
* all:                                   Finding Elements and Checking Conditions.
                                                             (line   31)
* all <1>:                               Finding Elements and Checking Conditions.
                                                             (line   32)
* allchild:                              Graphics Objects.   (line  441)
* allow_noninteger_range_as_index:       Advanced Indexing.  (line  168)
* allow_noninteger_range_as_index <1>:   Advanced Indexing.  (line  169)
* allow_noninteger_range_as_index <2>:   Advanced Indexing.  (line  171)
* amd:                                   Mathematical Considerations.
                                                             (line  120)
* amd <1>:                               Mathematical Considerations.
                                                             (line  121)
* ancestor:                              Graphics Objects.   (line  425)
* ancestor <1>:                          Graphics Objects.   (line  426)
* and:                                   Element-by-element Boolean Operators.
                                                             (line   65)
* and <1>:                               Element-by-element Boolean Operators.
                                                             (line   66)
* angle:                                 Complex Arithmetic. (line   18)
* anova:                                 Tests.              (line   38)
* any:                                   Finding Elements and Checking Conditions.
                                                             (line   11)
* any <1>:                               Finding Elements and Checking Conditions.
                                                             (line   12)
* arch_fit:                              Signal Processing.  (line  375)
* arch_rnd:                              Signal Processing.  (line  396)
* arch_test:                             Signal Processing.  (line  406)
* area:                                  Two-Dimensional Plots.
                                                             (line 1524)
* area <1>:                              Two-Dimensional Plots.
                                                             (line 1525)
* area <2>:                              Two-Dimensional Plots.
                                                             (line 1526)
* area <3>:                              Two-Dimensional Plots.
                                                             (line 1527)
* area <4>:                              Two-Dimensional Plots.
                                                             (line 1528)
* area <5>:                              Two-Dimensional Plots.
                                                             (line 1529)
* arg:                                   Complex Arithmetic. (line   17)
* argnames:                              Inline Functions.   (line   42)
* argv:                                  Command Line Options.
                                                             (line  186)
* arma_rnd:                              Signal Processing.  (line  437)
* arrayfun:                              Function Application.
                                                             (line   13)
* arrayfun <1>:                          Function Application.
                                                             (line   14)
* arrayfun <2>:                          Function Application.
                                                             (line   15)
* arrayfun <3>:                          Function Application.
                                                             (line   16)
* arrayfun <4>:                          Function Application.
                                                             (line   17)
* arrayfun <5>:                          Function Application.
                                                             (line   18)
* ascii:                                 FTP Objects.        (line   79)
* asctime:                               Timing Utilities.   (line  153)
* asec:                                  Trigonometry.       (line   80)
* asecd:                                 Trigonometry.       (line  230)
* asech:                                 Trigonometry.       (line  143)
* asin:                                  Trigonometry.       (line   65)
* asind:                                 Trigonometry.       (line  209)
* asinh:                                 Trigonometry.       (line  128)
* assert:                                Test Functions.     (line  319)
* assert <1>:                            Test Functions.     (line  320)
* assert <2>:                            Test Functions.     (line  321)
* assert <3>:                            Test Functions.     (line  322)
* assert <4>:                            Test Functions.     (line  323)
* assignin:                              Evaluation in a Different Context.
                                                             (line   75)
* atan:                                  Trigonometry.       (line   75)
* atan2:                                 Trigonometry.       (line  158)
* atan2d:                                Trigonometry.       (line  224)
* atand:                                 Trigonometry.       (line  219)
* atanh:                                 Trigonometry.       (line  138)
* atexit:                                Quitting Octave.    (line   12)
* atexit <1>:                            Quitting Octave.    (line   13)
* autoload:                              Overloading and Autoloading.
                                                             (line   47)
* autoload <1>:                          Overloading and Autoloading.
                                                             (line   48)
* autoload <2>:                          Overloading and Autoloading.
                                                             (line   49)
* autoreg_matrix:                        Signal Processing.  (line  451)
* autumn:                                Representing Images.
                                                             (line  177)
* autumn <1>:                            Representing Images.
                                                             (line  178)
* available_graphics_toolkits:           Graphics Toolkits.  (line   26)
* axes:                                  Graphics Objects.   (line   44)
* axes <1>:                              Graphics Objects.   (line   45)
* axes <2>:                              Graphics Objects.   (line   46)
* axes <3>:                              Graphics Objects.   (line   47)
* axis:                                  Axis Configuration. (line   10)
* axis <1>:                              Axis Configuration. (line   11)
* axis <2>:                              Axis Configuration. (line   12)
* axis <3>:                              Axis Configuration. (line   13)
* axis <4>:                              Axis Configuration. (line   14)
* axis <5>:                              Axis Configuration. (line   15)
* axis <6>:                              Axis Configuration. (line   16)
* axis <7>:                              Axis Configuration. (line   17)
* balance:                               Basic Matrix Functions.
                                                             (line    6)
* balance <1>:                           Basic Matrix Functions.
                                                             (line    7)
* balance <2>:                           Basic Matrix Functions.
                                                             (line    8)
* balance <3>:                           Basic Matrix Functions.
                                                             (line    9)
* balance <4>:                           Basic Matrix Functions.
                                                             (line   10)
* bar:                                   Two-Dimensional Plots.
                                                             (line  297)
* bar <1>:                               Two-Dimensional Plots.
                                                             (line  298)
* bar <2>:                               Two-Dimensional Plots.
                                                             (line  299)
* bar <3>:                               Two-Dimensional Plots.
                                                             (line  300)
* bar <4>:                               Two-Dimensional Plots.
                                                             (line  301)
* bar <5>:                               Two-Dimensional Plots.
                                                             (line  302)
* bar <6>:                               Two-Dimensional Plots.
                                                             (line  303)
* barh:                                  Two-Dimensional Plots.
                                                             (line  373)
* barh <1>:                              Two-Dimensional Plots.
                                                             (line  374)
* barh <2>:                              Two-Dimensional Plots.
                                                             (line  375)
* barh <3>:                              Two-Dimensional Plots.
                                                             (line  376)
* barh <4>:                              Two-Dimensional Plots.
                                                             (line  377)
* barh <5>:                              Two-Dimensional Plots.
                                                             (line  378)
* barh <6>:                              Two-Dimensional Plots.
                                                             (line  379)
* bartlett:                              Signal Processing.  (line  458)
* bartlett_test:                         Tests.              (line   61)
* base2dec:                              String Conversions. (line  112)
* base64_decode:                         Base64 and Binary Data Transmission.
                                                             (line   15)
* base64_decode <1>:                     Base64 and Binary Data Transmission.
                                                             (line   16)
* base64_encode:                         Base64 and Binary Data Transmission.
                                                             (line   10)
* beep:                                  Raising Errors.     (line  155)
* beep_on_error:                         Raising Errors.     (line  161)
* beep_on_error <1>:                     Raising Errors.     (line  162)
* beep_on_error <2>:                     Raising Errors.     (line  163)
* besselh:                               Special Functions.  (line   43)
* besseli:                               Special Functions.  (line   41)
* besselj:                               Special Functions.  (line   39)
* besselk:                               Special Functions.  (line   42)
* bessely:                               Special Functions.  (line   40)
* beta:                                  Special Functions.  (line   96)
* betacdf:                               Distributions.      (line   57)
* betainc:                               Special Functions.  (line  103)
* betaincinv:                            Special Functions.  (line  118)
* betainv:                               Distributions.      (line   61)
* betaln:                                Special Functions.  (line  127)
* betapdf:                               Distributions.      (line   53)
* betarnd:                               Random Number Generation.
                                                             (line   43)
* betarnd <1>:                           Random Number Generation.
                                                             (line   44)
* betarnd <2>:                           Random Number Generation.
                                                             (line   45)
* betarnd <3>:                           Random Number Generation.
                                                             (line   46)
* bicg:                                  Specialized Solvers.
                                                             (line    6)
* bicg <1>:                              Specialized Solvers.
                                                             (line    7)
* bicg <2>:                              Specialized Solvers.
                                                             (line    8)
* bicgstab:                              Specialized Solvers.
                                                             (line   52)
* bicgstab <1>:                          Specialized Solvers.
                                                             (line   53)
* bicgstab <2>:                          Specialized Solvers.
                                                             (line   54)
* bicubic:                               Multi-dimensional Interpolation.
                                                             (line  180)
* bin2dec:                               String Conversions. (line   13)
* binary:                                FTP Objects.        (line   87)
* bincoeff:                              Special Functions.  (line  137)
* binocdf:                               Distributions.      (line   71)
* binoinv:                               Distributions.      (line   77)
* binopdf:                               Distributions.      (line   65)
* binornd:                               Random Number Generation.
                                                             (line   60)
* binornd <1>:                           Random Number Generation.
                                                             (line   61)
* binornd <2>:                           Random Number Generation.
                                                             (line   62)
* binornd <3>:                           Random Number Generation.
                                                             (line   63)
* bitand:                                Bit Manipulations.  (line   76)
* bitcmp:                                Bit Manipulations.  (line  105)
* bitget:                                Bit Manipulations.  (line   23)
* bitmax:                                Bit Manipulations.  (line   58)
* bitmax <1>:                            Bit Manipulations.  (line   59)
* bitmax <2>:                            Bit Manipulations.  (line   60)
* bitor:                                 Bit Manipulations.  (line   84)
* bitpack:                               Built-in Data Types.
                                                             (line  100)
* bitset:                                Bit Manipulations.  (line   10)
* bitset <1>:                            Bit Manipulations.  (line   11)
* bitshift:                              Bit Manipulations.  (line  124)
* bitshift <1>:                          Bit Manipulations.  (line  125)
* bitunpack:                             Built-in Data Types.
                                                             (line  126)
* bitxor:                                Bit Manipulations.  (line   92)
* blackman:                              Signal Processing.  (line  465)
* blanks:                                Creating Strings.   (line   12)
* blkdiag:                               Rearranging Matrices.
                                                             (line  513)
* blkmm:                                 Functions of a Matrix.
                                                             (line   74)
* bone:                                  Representing Images.
                                                             (line  185)
* bone <1>:                              Representing Images.
                                                             (line  186)
* box:                                   Plot Annotations.   (line  217)
* box <1>:                               Plot Annotations.   (line  218)
* box <2>:                               Plot Annotations.   (line  219)
* box <3>:                               Plot Annotations.   (line  220)
* brighten:                              Representing Images.
                                                             (line  375)
* brighten <1>:                          Representing Images.
                                                             (line  376)
* brighten <2>:                          Representing Images.
                                                             (line  377)
* bsxfun:                                Broadcasting.       (line   85)
* builtin:                               Overloading and Autoloading.
                                                             (line   14)
* built_in_docstrings_file:              Getting Help.       (line  196)
* built_in_docstrings_file <1>:          Getting Help.       (line  197)
* built_in_docstrings_file <2>:          Getting Help.       (line  198)
* bunzip2:                               File Archiving Utilities.
                                                             (line    6)
* bunzip2 <1>:                           File Archiving Utilities.
                                                             (line    7)
* byte_size:                             Matrices and Arrays in Oct-Files.
                                                             (line   93)
* bzip2:                                 File Archiving Utilities.
                                                             (line   91)
* bzip2 <1>:                             File Archiving Utilities.
                                                             (line   92)
* calendar:                              Timing Utilities.   (line  636)
* calendar <1>:                          Timing Utilities.   (line  637)
* calendar <2>:                          Timing Utilities.   (line  638)
* calendar <3>:                          Timing Utilities.   (line  639)
* canonicalize_file_name:                Filesystem Utilities.
                                                             (line  505)
* cart2pol:                              Coordinate Transformations.
                                                             (line    6)
* cart2pol <1>:                          Coordinate Transformations.
                                                             (line    7)
* cart2pol <2>:                          Coordinate Transformations.
                                                             (line    8)
* cart2pol <3>:                          Coordinate Transformations.
                                                             (line    9)
* cart2pol <4>:                          Coordinate Transformations.
                                                             (line   10)
* cart2sph:                              Coordinate Transformations.
                                                             (line   47)
* cart2sph <1>:                          Coordinate Transformations.
                                                             (line   48)
* cart2sph <2>:                          Coordinate Transformations.
                                                             (line   49)
* cast:                                  Built-in Data Types.
                                                             (line   43)
* cat:                                   Rearranging Matrices.
                                                             (line  102)
* cauchy_cdf:                            Distributions.      (line   90)
* cauchy_cdf <1>:                        Distributions.      (line   91)
* cauchy_inv:                            Distributions.      (line   97)
* cauchy_inv <1>:                        Distributions.      (line   98)
* cauchy_pdf:                            Distributions.      (line   83)
* cauchy_pdf <1>:                        Distributions.      (line   84)
* cauchy_rnd:                            Random Number Generation.
                                                             (line   78)
* cauchy_rnd <1>:                        Random Number Generation.
                                                             (line   79)
* cauchy_rnd <2>:                        Random Number Generation.
                                                             (line   80)
* cauchy_rnd <3>:                        Random Number Generation.
                                                             (line   81)
* caxis:                                 Axis Configuration. (line  110)
* caxis <1>:                             Axis Configuration. (line  111)
* caxis <2>:                             Axis Configuration. (line  112)
* caxis <3>:                             Axis Configuration. (line  113)
* caxis <4>:                             Axis Configuration. (line  114)
* cbrt:                                  Exponents and Logarithms.
                                                             (line   91)
* ccolamd:                               Mathematical Considerations.
                                                             (line  152)
* ccolamd <1>:                           Mathematical Considerations.
                                                             (line  153)
* ccolamd <2>:                           Mathematical Considerations.
                                                             (line  154)
* ccolamd <3>:                           Mathematical Considerations.
                                                             (line  155)
* cd:                                    A Sample Command Description.
                                                             (line   12)
* cd <1>:                                FTP Objects.        (line   60)
* cd <2>:                                FTP Objects.        (line   61)
* cd <3>:                                Current Working Directory.
                                                             (line    6)
* cd <4>:                                Current Working Directory.
                                                             (line    7)
* cd <5>:                                Current Working Directory.
                                                             (line    8)
* ceil:                                  Utility Functions.  (line    6)
* cell:                                  Creating Cell Arrays.
                                                             (line   44)
* cell <1>:                              Creating Cell Arrays.
                                                             (line   45)
* cell <2>:                              Creating Cell Arrays.
                                                             (line   46)
* cell <3>:                              Creating Cell Arrays.
                                                             (line   47)
* cell2mat:                              Processing Data in Cell Arrays.
                                                             (line   17)
* cell2struct:                           Processing Data in Cell Arrays.
                                                             (line   26)
* cell2struct <1>:                       Processing Data in Cell Arrays.
                                                             (line   27)
* celldisp:                              Basic Usage of Cell Arrays.
                                                             (line   53)
* celldisp <1>:                          Basic Usage of Cell Arrays.
                                                             (line   54)
* cellfun:                               Function Application.
                                                             (line  111)
* cellfun <1>:                           Function Application.
                                                             (line  112)
* cellfun <2>:                           Function Application.
                                                             (line  113)
* cellfun <3>:                           Function Application.
                                                             (line  114)
* cellfun <4>:                           Function Application.
                                                             (line  115)
* cellfun <5>:                           Function Application.
                                                             (line  116)
* cellfun <6>:                           Function Application.
                                                             (line  117)
* cellfun <7>:                           Function Application.
                                                             (line  118)
* cellindexmat:                          Indexing Cell Arrays.
                                                             (line  113)
* cellslices:                            Creating Cell Arrays.
                                                             (line  128)
* cellstr:                               Cell Arrays of Strings.
                                                             (line   25)
* center:                                Basic Statistical Functions.
                                                             (line   11)
* center <1>:                            Basic Statistical Functions.
                                                             (line   12)
* cgs:                                   Specialized Solvers.
                                                             (line   98)
* cgs <1>:                               Specialized Solvers.
                                                             (line   99)
* cgs <2>:                               Specialized Solvers.
                                                             (line  100)
* char:                                  Concatenating Strings.
                                                             (line   92)
* char <1>:                              Concatenating Strings.
                                                             (line   93)
* char <2>:                              Concatenating Strings.
                                                             (line   94)
* char <3>:                              Concatenating Strings.
                                                             (line   95)
* chdir:                                 A Sample Command Description.
                                                             (line   13)
* chdir <1>:                             Current Working Directory.
                                                             (line    9)
* chi2cdf:                               Distributions.      (line  109)
* chi2inv:                               Distributions.      (line  114)
* chi2pdf:                               Distributions.      (line  104)
* chi2rnd:                               Random Number Generation.
                                                             (line   95)
* chi2rnd <1>:                           Random Number Generation.
                                                             (line   96)
* chi2rnd <2>:                           Random Number Generation.
                                                             (line   97)
* chi2rnd <3>:                           Random Number Generation.
                                                             (line   98)
* chisquare_test_homogeneity:            Tests.              (line   74)
* chisquare_test_independence:           Tests.              (line   89)
* chol:                                  Matrix Factorizations.
                                                             (line    6)
* chol <1>:                              Matrix Factorizations.
                                                             (line    7)
* chol <2>:                              Matrix Factorizations.
                                                             (line    8)
* chol <3>:                              Matrix Factorizations.
                                                             (line    9)
* chol <4>:                              Matrix Factorizations.
                                                             (line   10)
* chol <5>:                              Matrix Factorizations.
                                                             (line   11)
* chol2inv:                              Matrix Factorizations.
                                                             (line   61)
* choldelete:                            Matrix Factorizations.
                                                             (line  115)
* cholinsert:                            Matrix Factorizations.
                                                             (line   93)
* cholinsert <1>:                        Matrix Factorizations.
                                                             (line   94)
* cholinv:                               Matrix Factorizations.
                                                             (line   54)
* cholshift:                             Matrix Factorizations.
                                                             (line  125)
* cholupdate:                            Matrix Factorizations.
                                                             (line   70)
* chop:                                  Utility Functions.  (line  371)
* circshift:                             Rearranging Matrices.
                                                             (line  237)
* citation:                              Citing Octave in Publications.
                                                             (line   13)
* citation <1>:                          Citing Octave in Publications.
                                                             (line   14)
* cla:                                   Manipulation of Plot Windows.
                                                             (line  178)
* cla <1>:                               Manipulation of Plot Windows.
                                                             (line  179)
* cla <2>:                               Manipulation of Plot Windows.
                                                             (line  180)
* cla <3>:                               Manipulation of Plot Windows.
                                                             (line  181)
* clabel:                                Plot Annotations.   (line  176)
* clabel <1>:                            Plot Annotations.   (line  177)
* clabel <2>:                            Plot Annotations.   (line  178)
* clabel <3>:                            Plot Annotations.   (line  179)
* clabel <4>:                            Plot Annotations.   (line  180)
* clabel <5>:                            Plot Annotations.   (line  181)
* class:                                 Built-in Data Types.
                                                             (line   16)
* class <1>:                             Built-in Data Types.
                                                             (line   17)
* class <2>:                             Built-in Data Types.
                                                             (line   18)
* clc:                                   Cursor Motion.      (line   59)
* clear:                                 Status of Variables.
                                                             (line  228)
* clf:                                   Manipulation of Plot Windows.
                                                             (line  154)
* clf <1>:                               Manipulation of Plot Windows.
                                                             (line  155)
* clf <2>:                               Manipulation of Plot Windows.
                                                             (line  156)
* clf <3>:                               Manipulation of Plot Windows.
                                                             (line  157)
* clf <4>:                               Manipulation of Plot Windows.
                                                             (line  158)
* clock:                                 Timing Utilities.   (line  327)
* cloglog:                               Basic Statistical Functions.
                                                             (line  153)
* close:                                 Manipulation of Plot Windows.
                                                             (line  215)
* close <1>:                             Manipulation of Plot Windows.
                                                             (line  216)
* close <2>:                             Manipulation of Plot Windows.
                                                             (line  217)
* close <3>:                             Manipulation of Plot Windows.
                                                             (line  218)
* close <4>:                             FTP Objects.        (line   34)
* closereq:                              Manipulation of Plot Windows.
                                                             (line  241)
* cmpermute:                             Representing Images.
                                                             (line  464)
* cmpermute <1>:                         Representing Images.
                                                             (line  465)
* cmunique:                              Representing Images.
                                                             (line  431)
* cmunique <1>:                          Representing Images.
                                                             (line  432)
* cmunique <2>:                          Representing Images.
                                                             (line  433)
* colamd:                                Mathematical Considerations.
                                                             (line  232)
* colamd <1>:                            Mathematical Considerations.
                                                             (line  233)
* colamd <2>:                            Mathematical Considerations.
                                                             (line  234)
* colamd <3>:                            Mathematical Considerations.
                                                             (line  235)
* colloc:                                Orthogonal Collocation.
                                                             (line    6)
* colon:                                 Defining Indexing And Indexed Assignment.
                                                             (line  196)
* colon <1>:                             Defining Indexing And Indexed Assignment.
                                                             (line  197)
* colorbar:                              Plot Annotations.   (line  256)
* colorbar <1>:                          Plot Annotations.   (line  257)
* colorbar <2>:                          Plot Annotations.   (line  258)
* colorbar <3>:                          Plot Annotations.   (line  259)
* colorbar <4>:                          Plot Annotations.   (line  260)
* colorbar <5>:                          Plot Annotations.   (line  261)
* colorbar <6>:                          Plot Annotations.   (line  262)
* colorbar <7>:                          Plot Annotations.   (line  263)
* colorbar <8>:                          Plot Annotations.   (line  264)
* colorcube:                             Representing Images.
                                                             (line  193)
* colorcube <1>:                         Representing Images.
                                                             (line  194)
* colormap:                              Representing Images.
                                                             (line  115)
* colormap <1>:                          Representing Images.
                                                             (line  116)
* colormap <2>:                          Representing Images.
                                                             (line  117)
* colormap <3>:                          Representing Images.
                                                             (line  118)
* colormap <4>:                          Representing Images.
                                                             (line  119)
* colormap <5>:                          Representing Images.
                                                             (line  120)
* colormap <6>:                          Representing Images.
                                                             (line  121)
* colormap <7>:                          Representing Images.
                                                             (line  122)
* colormap <8>:                          Representing Images.
                                                             (line  123)
* colperm:                               Mathematical Considerations.
                                                             (line  298)
* colstyle:                              Marker Styles.      (line   27)
* columns:                               Object Sizes.       (line   22)
* comet:                                 Two-Dimensional Plots.
                                                             (line 1560)
* comet <1>:                             Two-Dimensional Plots.
                                                             (line 1561)
* comet <2>:                             Two-Dimensional Plots.
                                                             (line 1562)
* comet <3>:                             Two-Dimensional Plots.
                                                             (line 1563)
* comet3:                                Two-Dimensional Plots.
                                                             (line 1577)
* comet3 <1>:                            Two-Dimensional Plots.
                                                             (line 1578)
* comet3 <2>:                            Two-Dimensional Plots.
                                                             (line 1579)
* comet3 <3>:                            Two-Dimensional Plots.
                                                             (line 1580)
* command_line_path:                     Manipulating the Load Path.
                                                             (line  138)
* common_size:                           Finding Elements and Checking Conditions.
                                                             (line  131)
* commutation_matrix:                    Special Functions.  (line  157)
* compan:                                Finding Roots.      (line   47)
* compare_versions:                      System Information. (line  152)
* compass:                               Two-Dimensional Plots.
                                                             (line 1431)
* compass <1>:                           Two-Dimensional Plots.
                                                             (line 1432)
* compass <2>:                           Two-Dimensional Plots.
                                                             (line 1433)
* compass <3>:                           Two-Dimensional Plots.
                                                             (line 1434)
* compass <4>:                           Two-Dimensional Plots.
                                                             (line 1435)
* completion_append_char:                Commands For Completion.
                                                             (line   16)
* completion_append_char <1>:            Commands For Completion.
                                                             (line   17)
* completion_append_char <2>:            Commands For Completion.
                                                             (line   18)
* completion_matches:                    Commands For Completion.
                                                             (line   28)
* complex:                               Numeric Data Types. (line   53)
* complex <1>:                           Numeric Data Types. (line   54)
* computer:                              System Information. (line    6)
* computer <1>:                          System Information. (line    7)
* cond:                                  Basic Matrix Functions.
                                                             (line   41)
* cond <1>:                              Basic Matrix Functions.
                                                             (line   42)
* condest:                               Sparse Linear Algebra.
                                                             (line  132)
* condest <1>:                           Sparse Linear Algebra.
                                                             (line  133)
* condest <2>:                           Sparse Linear Algebra.
                                                             (line  134)
* condest <3>:                           Sparse Linear Algebra.
                                                             (line  135)
* condest <4>:                           Sparse Linear Algebra.
                                                             (line  136)
* confirm_recursive_rmdir:               Filesystem Utilities.
                                                             (line  132)
* confirm_recursive_rmdir <1>:           Filesystem Utilities.
                                                             (line  133)
* confirm_recursive_rmdir <2>:           Filesystem Utilities.
                                                             (line  134)
* conj:                                  Complex Arithmetic. (line   27)
* contour:                               Two-Dimensional Plots.
                                                             (line  863)
* contour <1>:                           Two-Dimensional Plots.
                                                             (line  864)
* contour <2>:                           Two-Dimensional Plots.
                                                             (line  865)
* contour <3>:                           Two-Dimensional Plots.
                                                             (line  866)
* contour <4>:                           Two-Dimensional Plots.
                                                             (line  867)
* contour <5>:                           Two-Dimensional Plots.
                                                             (line  868)
* contour <6>:                           Two-Dimensional Plots.
                                                             (line  869)
* contour3:                              Two-Dimensional Plots.
                                                             (line  982)
* contour3 <1>:                          Two-Dimensional Plots.
                                                             (line  983)
* contour3 <2>:                          Two-Dimensional Plots.
                                                             (line  984)
* contour3 <3>:                          Two-Dimensional Plots.
                                                             (line  985)
* contour3 <4>:                          Two-Dimensional Plots.
                                                             (line  986)
* contour3 <5>:                          Two-Dimensional Plots.
                                                             (line  987)
* contour3 <6>:                          Two-Dimensional Plots.
                                                             (line  988)
* contourc:                              Two-Dimensional Plots.
                                                             (line  941)
* contourc <1>:                          Two-Dimensional Plots.
                                                             (line  942)
* contourc <2>:                          Two-Dimensional Plots.
                                                             (line  943)
* contourc <3>:                          Two-Dimensional Plots.
                                                             (line  944)
* contourf:                              Two-Dimensional Plots.
                                                             (line  901)
* contourf <1>:                          Two-Dimensional Plots.
                                                             (line  902)
* contourf <2>:                          Two-Dimensional Plots.
                                                             (line  903)
* contourf <3>:                          Two-Dimensional Plots.
                                                             (line  904)
* contourf <4>:                          Two-Dimensional Plots.
                                                             (line  905)
* contourf <5>:                          Two-Dimensional Plots.
                                                             (line  906)
* contourf <6>:                          Two-Dimensional Plots.
                                                             (line  907)
* contrast:                              Representing Images.
                                                             (line  345)
* contrast <1>:                          Representing Images.
                                                             (line  346)
* conv:                                  Products of Polynomials.
                                                             (line    6)
* conv <1>:                              Products of Polynomials.
                                                             (line    7)
* conv2:                                 Products of Polynomials.
                                                             (line   59)
* conv2 <1>:                             Products of Polynomials.
                                                             (line   60)
* conv2 <2>:                             Products of Polynomials.
                                                             (line   61)
* convhull:                              Convex Hull.        (line   11)
* convhull <1>:                          Convex Hull.        (line   12)
* convhulln:                             Convex Hull.        (line   32)
* convhulln <1>:                         Convex Hull.        (line   33)
* convhulln <2>:                         Convex Hull.        (line   34)
* convn:                                 Products of Polynomials.
                                                             (line   27)
* convn <1>:                             Products of Polynomials.
                                                             (line   28)
* cool:                                  Representing Images.
                                                             (line  204)
* cool <1>:                              Representing Images.
                                                             (line  205)
* copper:                                Representing Images.
                                                             (line  212)
* copper <1>:                            Representing Images.
                                                             (line  213)
* copyfile:                              Filesystem Utilities.
                                                             (line   44)
* copyfile <1>:                          Filesystem Utilities.
                                                             (line   45)
* copyobj:                               Graphics Objects.   (line  501)
* copyobj <1>:                           Graphics Objects.   (line  502)
* corr:                                  Correlation and Regression Analysis.
                                                             (line   42)
* corr <1>:                              Correlation and Regression Analysis.
                                                             (line   43)
* cor_test:                              Tests.              (line  100)
* cos:                                   Trigonometry.       (line   35)
* cosd:                                  Trigonometry.       (line  181)
* cosh:                                  Trigonometry.       (line  101)
* cot:                                   Trigonometry.       (line   59)
* cotd:                                  Trigonometry.       (line  204)
* coth:                                  Trigonometry.       (line  123)
* cov:                                   Correlation and Regression Analysis.
                                                             (line    6)
* cov <1>:                               Correlation and Regression Analysis.
                                                             (line    7)
* cov <2>:                               Correlation and Regression Analysis.
                                                             (line    8)
* cov <3>:                               Correlation and Regression Analysis.
                                                             (line    9)
* cplxpair:                              Complex Arithmetic. (line   32)
* cplxpair <1>:                          Complex Arithmetic. (line   33)
* cplxpair <2>:                          Complex Arithmetic. (line   34)
* cputime:                               Timing Utilities.   (line  372)
* crash_dumps_octave_core:               Saving Data on Unexpected Exits.
                                                             (line   12)
* crash_dumps_octave_core <1>:           Saving Data on Unexpected Exits.
                                                             (line   13)
* crash_dumps_octave_core <2>:           Saving Data on Unexpected Exits.
                                                             (line   14)
* cross:                                 Utility Functions.  (line  234)
* cross <1>:                             Utility Functions.  (line  235)
* csc:                                   Trigonometry.       (line   53)
* cscd:                                  Trigonometry.       (line  199)
* csch:                                  Trigonometry.       (line  118)
* cstrcat:                               Concatenating Strings.
                                                             (line  188)
* csvread:                               Simple File I/O.    (line  416)
* csvread <1>:                           Simple File I/O.    (line  417)
* csvwrite:                              Simple File I/O.    (line  404)
* csvwrite <1>:                          Simple File I/O.    (line  405)
* csymamd:                               Mathematical Considerations.
                                                             (line  304)
* csymamd <1>:                           Mathematical Considerations.
                                                             (line  305)
* csymamd <2>:                           Mathematical Considerations.
                                                             (line  306)
* csymamd <3>:                           Mathematical Considerations.
                                                             (line  307)
* ctime:                                 Timing Utilities.   (line   74)
* ctranspose:                            Arithmetic Ops.     (line  122)
* cummax:                                Utility Functions.  (line  127)
* cummax <1>:                            Utility Functions.  (line  128)
* cummax <2>:                            Utility Functions.  (line  129)
* cummin:                                Utility Functions.  (line  149)
* cummin <1>:                            Utility Functions.  (line  150)
* cummin <2>:                            Utility Functions.  (line  151)
* cumprod:                               Sums and Products.  (line   54)
* cumprod <1>:                           Sums and Products.  (line   55)
* cumsum:                                Sums and Products.  (line   41)
* cumsum <1>:                            Sums and Products.  (line   42)
* cumsum <2>:                            Sums and Products.  (line   43)
* cumsum <3>:                            Sums and Products.  (line   44)
* cumsum <4>:                            Sums and Products.  (line   45)
* cumtrapz:                              Functions of One Variable.
                                                             (line  468)
* cumtrapz <1>:                          Functions of One Variable.
                                                             (line  469)
* cumtrapz <2>:                          Functions of One Variable.
                                                             (line  470)
* curl:                                  Utility Functions.  (line  266)
* curl <1>:                              Utility Functions.  (line  267)
* curl <2>:                              Utility Functions.  (line  268)
* curl <3>:                              Utility Functions.  (line  269)
* curl <4>:                              Utility Functions.  (line  270)
* cylinder:                              Three-dimensional Geometric Shapes.
                                                             (line    6)
* cylinder <1>:                          Three-dimensional Geometric Shapes.
                                                             (line    7)
* cylinder <2>:                          Three-dimensional Geometric Shapes.
                                                             (line    8)
* cylinder <3>:                          Three-dimensional Geometric Shapes.
                                                             (line    9)
* cylinder <4>:                          Three-dimensional Geometric Shapes.
                                                             (line   10)
* daspect:                               Aspect Ratio.       (line   10)
* daspect <1>:                           Aspect Ratio.       (line   11)
* daspect <2>:                           Aspect Ratio.       (line   12)
* daspect <3>:                           Aspect Ratio.       (line   13)
* daspect <4>:                           Aspect Ratio.       (line   14)
* daspk:                                 Differential-Algebraic Equations.
                                                             (line   13)
* daspk_options:                         Differential-Algebraic Equations.
                                                             (line   80)
* daspk_options <1>:                     Differential-Algebraic Equations.
                                                             (line   81)
* daspk_options <2>:                     Differential-Algebraic Equations.
                                                             (line   82)
* dasrt:                                 Differential-Algebraic Equations.
                                                             (line  371)
* dasrt <1>:                             Differential-Algebraic Equations.
                                                             (line  373)
* dasrt <2>:                             Differential-Algebraic Equations.
                                                             (line  374)
* dasrt <3>:                             Differential-Algebraic Equations.
                                                             (line  375)
* dasrt_options:                         Differential-Algebraic Equations.
                                                             (line  475)
* dasrt_options <1>:                     Differential-Algebraic Equations.
                                                             (line  476)
* dasrt_options <2>:                     Differential-Algebraic Equations.
                                                             (line  477)
* dassl:                                 Differential-Algebraic Equations.
                                                             (line  244)
* dassl_options:                         Differential-Algebraic Equations.
                                                             (line  312)
* dassl_options <1>:                     Differential-Algebraic Equations.
                                                             (line  313)
* dassl_options <2>:                     Differential-Algebraic Equations.
                                                             (line  314)
* date:                                  Timing Utilities.   (line  345)
* datenum:                               Timing Utilities.   (line  459)
* datenum <1>:                           Timing Utilities.   (line  460)
* datenum <2>:                           Timing Utilities.   (line  461)
* datenum <3>:                           Timing Utilities.   (line  462)
* datenum <4>:                           Timing Utilities.   (line  463)
* datenum <5>:                           Timing Utilities.   (line  465)
* datenum <6>:                           Timing Utilities.   (line  466)
* datenum <7>:                           Timing Utilities.   (line  467)
* datestr:                               Timing Utilities.   (line  515)
* datestr <1>:                           Timing Utilities.   (line  516)
* datestr <2>:                           Timing Utilities.   (line  517)
* datetick:                              Timing Utilities.   (line  688)
* datetick <1>:                          Timing Utilities.   (line  689)
* datetick <2>:                          Timing Utilities.   (line  690)
* datetick <3>:                          Timing Utilities.   (line  691)
* datetick <4>:                          Timing Utilities.   (line  692)
* datetick <5>:                          Timing Utilities.   (line  693)
* datevec:                               Timing Utilities.   (line  601)
* datevec <1>:                           Timing Utilities.   (line  602)
* datevec <2>:                           Timing Utilities.   (line  603)
* datevec <3>:                           Timing Utilities.   (line  604)
* datevec <4>:                           Timing Utilities.   (line  605)
* dawson:                                Special Functions.  (line  175)
* dbclear:                               Breakpoints.        (line   84)
* dbclear <1>:                           Breakpoints.        (line   85)
* dbclear <2>:                           Breakpoints.        (line   86)
* dbcont:                                Leaving Debug Mode. (line    9)
* dbdown:                                Call Stack.         (line   59)
* dbdown <1>:                            Call Stack.         (line   60)
* dblist:                                Debug Mode.         (line   40)
* dblist <1>:                            Debug Mode.         (line   41)
* dblquad:                               Functions of Multiple Variables.
                                                             (line   44)
* dblquad <1>:                           Functions of Multiple Variables.
                                                             (line   45)
* dblquad <2>:                           Functions of Multiple Variables.
                                                             (line   46)
* dblquad <3>:                           Functions of Multiple Variables.
                                                             (line   47)
* dbnext:                                Debug Mode.         (line   64)
* dbquit:                                Leaving Debug Mode. (line   18)
* dbstack:                               Call Stack.         (line   14)
* dbstack <1>:                           Call Stack.         (line   15)
* dbstack <2>:                           Call Stack.         (line   16)
* dbstack <3>:                           Call Stack.         (line   17)
* dbstatus:                              Breakpoints.        (line   57)
* dbstatus <1>:                          Breakpoints.        (line   58)
* dbstatus <2>:                          Breakpoints.        (line   59)
* dbstep:                                Debug Mode.         (line   60)
* dbstep <1>:                            Debug Mode.         (line   61)
* dbstep <2>:                            Debug Mode.         (line   62)
* dbstep <3>:                            Debug Mode.         (line   63)
* dbstop:                                Breakpoints.        (line    9)
* dbstop <1>:                            Breakpoints.        (line   10)
* dbstop <2>:                            Breakpoints.        (line   11)
* dbtype:                                Debug Mode.         (line   18)
* dbtype <1>:                            Debug Mode.         (line   19)
* dbtype <2>:                            Debug Mode.         (line   20)
* dbtype <3>:                            Debug Mode.         (line   21)
* dbtype <4>:                            Debug Mode.         (line   22)
* dbtype <5>:                            Debug Mode.         (line   23)
* dbtype <6>:                            Debug Mode.         (line   24)
* dbtype <7>:                            Debug Mode.         (line   25)
* dbup:                                  Call Stack.         (line   52)
* dbup <1>:                              Call Stack.         (line   53)
* dbwhere:                               Debug Mode.         (line   11)
* deal:                                  Variable-length Return Lists.
                                                             (line   33)
* deal <1>:                              Variable-length Return Lists.
                                                             (line   34)
* deblank:                               Manipulating Strings.
                                                             (line   20)
* debug_java:                            Java Interface Functions.
                                                             (line  315)
* debug_java <1>:                        Java Interface Functions.
                                                             (line  316)
* debug_java <2>:                        Java Interface Functions.
                                                             (line  317)
* debug_jit:                             JIT Compiler.       (line   61)
* debug_jit <1>:                         JIT Compiler.       (line   62)
* debug_jit <2>:                         JIT Compiler.       (line   63)
* debug_on_error:                        Entering Debug Mode.
                                                             (line   45)
* debug_on_error <1>:                    Entering Debug Mode.
                                                             (line   46)
* debug_on_error <2>:                    Entering Debug Mode.
                                                             (line   47)
* debug_on_interrupt:                    Entering Debug Mode.
                                                             (line   14)
* debug_on_interrupt <1>:                Entering Debug Mode.
                                                             (line   15)
* debug_on_interrupt <2>:                Entering Debug Mode.
                                                             (line   16)
* debug_on_warning:                      Entering Debug Mode.
                                                             (line   31)
* debug_on_warning <1>:                  Entering Debug Mode.
                                                             (line   32)
* debug_on_warning <2>:                  Entering Debug Mode.
                                                             (line   33)
* dec2base:                              String Conversions. (line   87)
* dec2base <1>:                          String Conversions. (line   88)
* dec2bin:                               String Conversions. (line   35)
* dec2hex:                               String Conversions. (line   52)
* deconv:                                Products of Polynomials.
                                                             (line   47)
* del2:                                  Utility Functions.  (line  288)
* del2 <1>:                              Utility Functions.  (line  289)
* del2 <2>:                              Utility Functions.  (line  290)
* delaunay:                              Delaunay Triangulation.
                                                             (line   17)
* delaunay <1>:                          Delaunay Triangulation.
                                                             (line   18)
* delaunay <2>:                          Delaunay Triangulation.
                                                             (line   19)
* delaunay <3>:                          Delaunay Triangulation.
                                                             (line   20)
* delaunay3:                             Delaunay Triangulation.
                                                             (line   68)
* delaunay3 <1>:                         Delaunay Triangulation.
                                                             (line   69)
* delaunayn:                             Delaunay Triangulation.
                                                             (line   97)
* delaunayn <1>:                         Delaunay Triangulation.
                                                             (line   98)
* delete:                                Manipulation of Plot Windows.
                                                             (line  205)
* delete <1>:                            Manipulation of Plot Windows.
                                                             (line  206)
* delete <2>:                            FTP Objects.        (line   94)
* dellistener:                           Object Groups.      (line  149)
* demo:                                  Demonstration Functions.
                                                             (line    6)
* demo <1>:                              Demonstration Functions.
                                                             (line    7)
* demo <2>:                              Demonstration Functions.
                                                             (line    8)
* demo <3>:                              Demonstration Functions.
                                                             (line    9)
* det:                                   Basic Matrix Functions.
                                                             (line   63)
* det <1>:                               Basic Matrix Functions.
                                                             (line   64)
* detrend:                               Signal Processing.  (line  471)
* diag:                                  Rearranging Matrices.
                                                             (line  489)
* diag <1>:                              Rearranging Matrices.
                                                             (line  490)
* diag <2>:                              Rearranging Matrices.
                                                             (line  491)
* diag <3>:                              Rearranging Matrices.
                                                             (line  492)
* diag <4>:                              Rearranging Matrices.
                                                             (line  493)
* diary:                                 Diary and Echo Commands.
                                                             (line   10)
* diary <1>:                             Diary and Echo Commands.
                                                             (line   11)
* diary <2>:                             Diary and Echo Commands.
                                                             (line   12)
* diary <3>:                             Diary and Echo Commands.
                                                             (line   13)
* diff:                                  Finding Elements and Checking Conditions.
                                                             (line   77)
* diff <1>:                              Finding Elements and Checking Conditions.
                                                             (line   78)
* diff <2>:                              Finding Elements and Checking Conditions.
                                                             (line   79)
* diffpara:                              Signal Processing.  (line  487)
* diffuse:                               Three-Dimensional Plots.
                                                             (line  632)
* dims:                                  Matrices and Arrays in Oct-Files.
                                                             (line   96)
* dir:                                   FTP Objects.        (line   73)
* dir <1>:                               Current Working Directory.
                                                             (line   63)
* dir <2>:                               Current Working Directory.
                                                             (line   64)
* dir <3>:                               Current Working Directory.
                                                             (line   65)
* discrete_cdf:                          Distributions.      (line  123)
* discrete_inv:                          Distributions.      (line  128)
* discrete_pdf:                          Distributions.      (line  118)
* discrete_rnd:                          Random Number Generation.
                                                             (line  112)
* discrete_rnd <1>:                      Random Number Generation.
                                                             (line  113)
* discrete_rnd <2>:                      Random Number Generation.
                                                             (line  114)
* discrete_rnd <3>:                      Random Number Generation.
                                                             (line  115)
* disp:                                  Terminal Output.    (line   21)
* display:                               Manipulating Classes.
                                                             (line   13)
* divergence:                            Utility Functions.  (line  249)
* divergence <1>:                        Utility Functions.  (line  250)
* divergence <2>:                        Utility Functions.  (line  251)
* divergence <3>:                        Utility Functions.  (line  252)
* dlmread:                               Simple File I/O.    (line  376)
* dlmread <1>:                           Simple File I/O.    (line  377)
* dlmread <2>:                           Simple File I/O.    (line  378)
* dlmread <3>:                           Simple File I/O.    (line  379)
* dlmread <4>:                           Simple File I/O.    (line  380)
* dlmwrite:                              Simple File I/O.    (line  323)
* dlmwrite <1>:                          Simple File I/O.    (line  324)
* dlmwrite <2>:                          Simple File I/O.    (line  325)
* dlmwrite <3>:                          Simple File I/O.    (line  326)
* dlmwrite <4>:                          Simple File I/O.    (line  327)
* dmperm:                                Mathematical Considerations.
                                                             (line  361)
* dmperm <1>:                            Mathematical Considerations.
                                                             (line  362)
* doc:                                   Getting Help.       (line   37)
* doc_cache_create:                      Getting Help.       (line  230)
* doc_cache_file:                        Getting Help.       (line  173)
* doc_cache_file <1>:                    Getting Help.       (line  174)
* doc_cache_file <2>:                    Getting Help.       (line  175)
* dos:                                   Controlling Subprocesses.
                                                             (line   69)
* dos <1>:                               Controlling Subprocesses.
                                                             (line   70)
* dos <2>:                               Controlling Subprocesses.
                                                             (line   71)
* dos <3>:                               Controlling Subprocesses.
                                                             (line   72)
* dot:                                   Utility Functions.  (line  222)
* double:                                Numeric Data Types. (line   48)
* do_braindead_shortcircuit_evaluation:  Short-circuit Boolean Operators.
                                                             (line   79)
* do_braindead_shortcircuit_evaluation <1>: Short-circuit Boolean Operators.
                                                             (line   80)
* do_braindead_shortcircuit_evaluation <2>: Short-circuit Boolean Operators.
                                                             (line   82)
* do_string_escapes:                     String Conversions. (line  300)
* drawnow:                               Manipulation of Plot Windows.
                                                             (line   10)
* drawnow <1>:                           Manipulation of Plot Windows.
                                                             (line   11)
* drawnow <2>:                           Manipulation of Plot Windows.
                                                             (line   12)
* dsearch:                               Identifying Points in Triangulation.
                                                             (line   99)
* dsearch <1>:                           Identifying Points in Triangulation.
                                                             (line  100)
* dsearchn:                              Identifying Points in Triangulation.
                                                             (line  107)
* dsearchn <1>:                          Identifying Points in Triangulation.
                                                             (line  108)
* dsearchn <2>:                          Identifying Points in Triangulation.
                                                             (line  109)
* dsearchn <3>:                          Identifying Points in Triangulation.
                                                             (line  110)
* dump_prefs:                            Startup Files.      (line   52)
* dump_prefs <1>:                        Startup Files.      (line   53)
* dup2:                                  Controlling Subprocesses.
                                                             (line  237)
* duplication_matrix:                    Special Functions.  (line  167)
* durbinlevinson:                        Signal Processing.  (line  503)
* e:                                     Mathematical Constants.
                                                             (line    6)
* e <1>:                                 Mathematical Constants.
                                                             (line    7)
* e <2>:                                 Mathematical Constants.
                                                             (line    8)
* e <3>:                                 Mathematical Constants.
                                                             (line    9)
* e <4>:                                 Mathematical Constants.
                                                             (line   10)
* echo:                                  Diary and Echo Commands.
                                                             (line   37)
* echo_executing_commands:               Diary and Echo Commands.
                                                             (line   59)
* echo_executing_commands <1>:           Diary and Echo Commands.
                                                             (line   60)
* echo_executing_commands <2>:           Diary and Echo Commands.
                                                             (line   61)
* edit:                                  Function Files.     (line   51)
* edit <1>:                              Function Files.     (line   52)
* edit <2>:                              Function Files.     (line   53)
* EDITOR:                                Commands For History.
                                                             (line  239)
* EDITOR <1>:                            Commands For History.
                                                             (line  240)
* EDITOR <2>:                            Commands For History.
                                                             (line  241)
* edit_history:                          Commands For History.
                                                             (line   85)
* edit_history <1>:                      Commands For History.
                                                             (line   86)
* edit_history <2>:                      Commands For History.
                                                             (line   87)
* eig:                                   Basic Matrix Functions.
                                                             (line   79)
* eig <1>:                               Basic Matrix Functions.
                                                             (line   80)
* eig <2>:                               Basic Matrix Functions.
                                                             (line   81)
* eig <3>:                               Basic Matrix Functions.
                                                             (line   82)
* eigs:                                  Sparse Linear Algebra.
                                                             (line  358)
* eigs <1>:                              Sparse Linear Algebra.
                                                             (line  359)
* eigs <2>:                              Sparse Linear Algebra.
                                                             (line  360)
* eigs <3>:                              Sparse Linear Algebra.
                                                             (line  361)
* eigs <4>:                              Sparse Linear Algebra.
                                                             (line  362)
* eigs <5>:                              Sparse Linear Algebra.
                                                             (line  363)
* eigs <6>:                              Sparse Linear Algebra.
                                                             (line  364)
* eigs <7>:                              Sparse Linear Algebra.
                                                             (line  365)
* eigs <8>:                              Sparse Linear Algebra.
                                                             (line  366)
* eigs <9>:                              Sparse Linear Algebra.
                                                             (line  367)
* eigs <10>:                             Sparse Linear Algebra.
                                                             (line  368)
* eigs <11>:                             Sparse Linear Algebra.
                                                             (line  369)
* eigs <12>:                             Sparse Linear Algebra.
                                                             (line  370)
* eigs <13>:                             Sparse Linear Algebra.
                                                             (line  371)
* eigs <14>:                             Sparse Linear Algebra.
                                                             (line  372)
* eigs <15>:                             Sparse Linear Algebra.
                                                             (line  373)
* eigs <16>:                             Sparse Linear Algebra.
                                                             (line  374)
* eigs <17>:                             Sparse Linear Algebra.
                                                             (line  375)
* eigs <18>:                             Sparse Linear Algebra.
                                                             (line  376)
* eigs <19>:                             Sparse Linear Algebra.
                                                             (line  377)
* elem:                                  Matrices and Arrays in Oct-Files.
                                                             (line   78)
* ellipj:                                Special Functions.  (line  184)
* ellipj <1>:                            Special Functions.  (line  185)
* ellipke:                               Special Functions.  (line  215)
* ellipke <1>:                           Special Functions.  (line  216)
* ellipke <2>:                           Special Functions.  (line  217)
* ellipsoid:                             Three-dimensional Geometric Shapes.
                                                             (line   62)
* ellipsoid <1>:                         Three-dimensional Geometric Shapes.
                                                             (line   63)
* ellipsoid <2>:                         Three-dimensional Geometric Shapes.
                                                             (line   64)
* ellipsoid <3>:                         Three-dimensional Geometric Shapes.
                                                             (line   65)
* empirical_cdf:                         Distributions.      (line  138)
* empirical_inv:                         Distributions.      (line  143)
* empirical_pdf:                         Distributions.      (line  133)
* empirical_rnd:                         Random Number Generation.
                                                             (line  129)
* empirical_rnd <1>:                     Random Number Generation.
                                                             (line  130)
* empirical_rnd <2>:                     Random Number Generation.
                                                             (line  131)
* empirical_rnd <3>:                     Random Number Generation.
                                                             (line  132)
* endgrent:                              Group Database Functions.
                                                             (line   41)
* endpwent:                              Password Database Functions.
                                                             (line   52)
* eomday:                                Timing Utilities.   (line  681)
* eps:                                   Mathematical Constants.
                                                             (line  119)
* eps <1>:                               Mathematical Constants.
                                                             (line  120)
* eps <2>:                               Mathematical Constants.
                                                             (line  121)
* eps <3>:                               Mathematical Constants.
                                                             (line  122)
* eps <4>:                               Mathematical Constants.
                                                             (line  123)
* eq:                                    Comparison Ops.     (line   53)
* erf:                                   Special Functions.  (line  234)
* erfc:                                  Special Functions.  (line  247)
* erfcinv:                               Special Functions.  (line  281)
* erfcx:                                 Special Functions.  (line  254)
* erfi:                                  Special Functions.  (line  263)
* erfinv:                                Special Functions.  (line  272)
* errno:                                 Catching Errors.    (line  186)
* errno <1>:                             Catching Errors.    (line  187)
* errno <2>:                             Catching Errors.    (line  188)
* errno_list:                            Catching Errors.    (line  194)
* error:                                 Raising Errors.     (line   20)
* error <1>:                             Raising Errors.     (line   21)
* errorbar:                              Two-Dimensional Plots.
                                                             (line 1039)
* errorbar <1>:                          Two-Dimensional Plots.
                                                             (line 1040)
* errorbar <2>:                          Two-Dimensional Plots.
                                                             (line 1041)
* errorbar <3>:                          Two-Dimensional Plots.
                                                             (line 1042)
* errorbar <4>:                          Two-Dimensional Plots.
                                                             (line 1043)
* errorbar <5>:                          Two-Dimensional Plots.
                                                             (line 1044)
* errorbar <6>:                          Two-Dimensional Plots.
                                                             (line 1045)
* errorbar <7>:                          Two-Dimensional Plots.
                                                             (line 1046)
* errorbar <8>:                          Two-Dimensional Plots.
                                                             (line 1047)
* errorbar <9>:                          Two-Dimensional Plots.
                                                             (line 1048)
* errordlg:                              Dialog Box Functions.
                                                             (line   28)
* errordlg <1>:                          Dialog Box Functions.
                                                             (line   29)
* etime:                                 Timing Utilities.   (line  357)
* etree:                                 Information.        (line  136)
* etree <1>:                             Information.        (line  137)
* etree <2>:                             Information.        (line  138)
* etreeplot:                             Information.        (line  149)
* etreeplot <1>:                         Information.        (line  150)
* eval:                                  Evaluation.         (line   14)
* eval <1>:                              Evaluation.         (line   15)
* evalin:                                Evaluation in a Different Context.
                                                             (line   68)
* evalin <1>:                            Evaluation in a Different Context.
                                                             (line   69)
* example:                               Demonstration Functions.
                                                             (line   64)
* example <1>:                           Demonstration Functions.
                                                             (line   65)
* example <2>:                           Demonstration Functions.
                                                             (line   66)
* example <3>:                           Demonstration Functions.
                                                             (line   67)
* example <4>:                           Demonstration Functions.
                                                             (line   68)
* exec:                                  Controlling Subprocesses.
                                                             (line  215)
* EXEC_PATH:                             Controlling Subprocesses.
                                                             (line  173)
* EXEC_PATH <1>:                         Controlling Subprocesses.
                                                             (line  174)
* EXEC_PATH <2>:                         Controlling Subprocesses.
                                                             (line  175)
* exist:                                 Status of Variables.
                                                             (line  181)
* exit:                                  Quitting Octave.    (line    6)
* exp:                                   Exponents and Logarithms.
                                                             (line    6)
* expcdf:                                Distributions.      (line  152)
* expint:                                Special Functions.  (line  290)
* expinv:                                Distributions.      (line  158)
* expm:                                  Functions of a Matrix.
                                                             (line    6)
* expm1:                                 Exponents and Logarithms.
                                                             (line   12)
* exppdf:                                Distributions.      (line  148)
* exprnd:                                Random Number Generation.
                                                             (line  146)
* exprnd <1>:                            Random Number Generation.
                                                             (line  147)
* exprnd <2>:                            Random Number Generation.
                                                             (line  148)
* exprnd <3>:                            Random Number Generation.
                                                             (line  149)
* eye:                                   Special Utility Matrices.
                                                             (line    6)
* eye <1>:                               Special Utility Matrices.
                                                             (line    7)
* eye <2>:                               Special Utility Matrices.
                                                             (line    8)
* eye <3>:                               Special Utility Matrices.
                                                             (line    9)
* ezcontour:                             Two-dimensional Function Plotting.
                                                             (line  115)
* ezcontour <1>:                         Two-dimensional Function Plotting.
                                                             (line  116)
* ezcontour <2>:                         Two-dimensional Function Plotting.
                                                             (line  117)
* ezcontour <3>:                         Two-dimensional Function Plotting.
                                                             (line  118)
* ezcontour <4>:                         Two-dimensional Function Plotting.
                                                             (line  119)
* ezcontourf:                            Two-dimensional Function Plotting.
                                                             (line  150)
* ezcontourf <1>:                        Two-dimensional Function Plotting.
                                                             (line  151)
* ezcontourf <2>:                        Two-dimensional Function Plotting.
                                                             (line  152)
* ezcontourf <3>:                        Two-dimensional Function Plotting.
                                                             (line  153)
* ezcontourf <4>:                        Two-dimensional Function Plotting.
                                                             (line  154)
* ezmesh:                                Three-dimensional Function Plotting.
                                                             (line   38)
* ezmesh <1>:                            Three-dimensional Function Plotting.
                                                             (line   39)
* ezmesh <2>:                            Three-dimensional Function Plotting.
                                                             (line   40)
* ezmesh <3>:                            Three-dimensional Function Plotting.
                                                             (line   41)
* ezmesh <4>:                            Three-dimensional Function Plotting.
                                                             (line   42)
* ezmesh <5>:                            Three-dimensional Function Plotting.
                                                             (line   43)
* ezmesh <6>:                            Three-dimensional Function Plotting.
                                                             (line   44)
* ezmeshc:                               Three-dimensional Function Plotting.
                                                             (line   88)
* ezmeshc <1>:                           Three-dimensional Function Plotting.
                                                             (line   89)
* ezmeshc <2>:                           Three-dimensional Function Plotting.
                                                             (line   90)
* ezmeshc <3>:                           Three-dimensional Function Plotting.
                                                             (line   91)
* ezmeshc <4>:                           Three-dimensional Function Plotting.
                                                             (line   92)
* ezmeshc <5>:                           Three-dimensional Function Plotting.
                                                             (line   93)
* ezmeshc <6>:                           Three-dimensional Function Plotting.
                                                             (line   94)
* ezplot:                                Two-dimensional Function Plotting.
                                                             (line   65)
* ezplot <1>:                            Two-dimensional Function Plotting.
                                                             (line   66)
* ezplot <2>:                            Two-dimensional Function Plotting.
                                                             (line   67)
* ezplot <3>:                            Two-dimensional Function Plotting.
                                                             (line   68)
* ezplot <4>:                            Two-dimensional Function Plotting.
                                                             (line   69)
* ezplot <5>:                            Two-dimensional Function Plotting.
                                                             (line   70)
* ezplot <6>:                            Two-dimensional Function Plotting.
                                                             (line   71)
* ezplot3:                               Three-dimensional Function Plotting.
                                                             (line    6)
* ezplot3 <1>:                           Three-dimensional Function Plotting.
                                                             (line    7)
* ezplot3 <2>:                           Three-dimensional Function Plotting.
                                                             (line    8)
* ezplot3 <3>:                           Three-dimensional Function Plotting.
                                                             (line    9)
* ezplot3 <4>:                           Three-dimensional Function Plotting.
                                                             (line   10)
* ezpolar:                               Two-dimensional Function Plotting.
                                                             (line  185)
* ezpolar <1>:                           Two-dimensional Function Plotting.
                                                             (line  186)
* ezpolar <2>:                           Two-dimensional Function Plotting.
                                                             (line  187)
* ezpolar <3>:                           Two-dimensional Function Plotting.
                                                             (line  188)
* ezpolar <4>:                           Two-dimensional Function Plotting.
                                                             (line  189)
* ezsurf:                                Three-dimensional Function Plotting.
                                                             (line  132)
* ezsurf <1>:                            Three-dimensional Function Plotting.
                                                             (line  133)
* ezsurf <2>:                            Three-dimensional Function Plotting.
                                                             (line  134)
* ezsurf <3>:                            Three-dimensional Function Plotting.
                                                             (line  135)
* ezsurf <4>:                            Three-dimensional Function Plotting.
                                                             (line  136)
* ezsurf <5>:                            Three-dimensional Function Plotting.
                                                             (line  137)
* ezsurf <6>:                            Three-dimensional Function Plotting.
                                                             (line  138)
* ezsurfc:                               Three-dimensional Function Plotting.
                                                             (line  182)
* ezsurfc <1>:                           Three-dimensional Function Plotting.
                                                             (line  183)
* ezsurfc <2>:                           Three-dimensional Function Plotting.
                                                             (line  184)
* ezsurfc <3>:                           Three-dimensional Function Plotting.
                                                             (line  185)
* ezsurfc <4>:                           Three-dimensional Function Plotting.
                                                             (line  186)
* ezsurfc <5>:                           Three-dimensional Function Plotting.
                                                             (line  187)
* ezsurfc <6>:                           Three-dimensional Function Plotting.
                                                             (line  188)
* factor:                                Utility Functions.  (line  325)
* factor <1>:                            Utility Functions.  (line  326)
* factorial:                             Utility Functions.  (line  317)
* fail:                                  Test Functions.     (line  355)
* fail <1>:                              Test Functions.     (line  356)
* fail <2>:                              Test Functions.     (line  357)
* false:                                 Logical Values.     (line   60)
* false <1>:                             Logical Values.     (line   61)
* false <2>:                             Logical Values.     (line   62)
* fcdf:                                  Distributions.      (line  166)
* fclear:                                EOF and Errors.     (line   44)
* fclose:                                Opening and Closing Files.
                                                             (line  109)
* fclose <1>:                            Opening and Closing Files.
                                                             (line  110)
* fcntl:                                 Controlling Subprocesses.
                                                             (line  401)
* fdisp:                                 Simple File I/O.    (line  308)
* feather:                               Two-Dimensional Plots.
                                                             (line 1459)
* feather <1>:                           Two-Dimensional Plots.
                                                             (line 1460)
* feather <2>:                           Two-Dimensional Plots.
                                                             (line 1461)
* feather <3>:                           Two-Dimensional Plots.
                                                             (line 1462)
* feather <4>:                           Two-Dimensional Plots.
                                                             (line 1463)
* feof:                                  EOF and Errors.     (line   24)
* ferror:                                EOF and Errors.     (line   32)
* ferror <1>:                            EOF and Errors.     (line   33)
* feval:                                 Calling a Function by its Name.
                                                             (line   50)
* fflush:                                Paging Screen Output.
                                                             (line  102)
* fft:                                   Signal Processing.  (line   10)
* fft <1>:                               Signal Processing.  (line   11)
* fft <2>:                               Signal Processing.  (line   12)
* fft2:                                  Signal Processing.  (line   57)
* fft2 <1>:                              Signal Processing.  (line   58)
* fftconv:                               Signal Processing.  (line  213)
* fftconv <1>:                           Signal Processing.  (line  214)
* fftfilt:                               Signal Processing.  (line  228)
* fftfilt <1>:                           Signal Processing.  (line  229)
* fftn:                                  Signal Processing.  (line   85)
* fftn <1>:                              Signal Processing.  (line   86)
* fftshift:                              Signal Processing.  (line  513)
* fftshift <1>:                          Signal Processing.  (line  514)
* fftw:                                  Signal Processing.  (line  127)
* fftw <1>:                              Signal Processing.  (line  128)
* fftw <2>:                              Signal Processing.  (line  129)
* fftw <3>:                              Signal Processing.  (line  130)
* fftw <4>:                              Signal Processing.  (line  131)
* fftw <5>:                              Signal Processing.  (line  132)
* fgetl:                                 Line-Oriented Input.
                                                             (line   18)
* fgetl <1>:                             Line-Oriented Input.
                                                             (line   19)
* fgets:                                 Line-Oriented Input.
                                                             (line   33)
* fgets <1>:                             Line-Oriented Input.
                                                             (line   34)
* fieldnames:                            Manipulating Structures.
                                                             (line   14)
* fieldnames <1>:                        Manipulating Structures.
                                                             (line   15)
* fieldnames <2>:                        Manipulating Structures.
                                                             (line   16)
* fieldnames <3>:                        Manipulating Structures.
                                                             (line   17)
* figure:                                Multiple Plot Windows.
                                                             (line   17)
* figure <1>:                            Multiple Plot Windows.
                                                             (line   18)
* figure <2>:                            Multiple Plot Windows.
                                                             (line   19)
* figure <3>:                            Multiple Plot Windows.
                                                             (line   20)
* figure <4>:                            Multiple Plot Windows.
                                                             (line   21)
* fileattrib:                            Filesystem Utilities.
                                                             (line  301)
* filemarker:                            Filesystem Utilities.
                                                             (line  456)
* filemarker <1>:                        Filesystem Utilities.
                                                             (line  457)
* filemarker <2>:                        Filesystem Utilities.
                                                             (line  458)
* fileparts:                             Filesystem Utilities.
                                                             (line  480)
* fileread:                              Simple File I/O.    (line  286)
* filesep:                               Filesystem Utilities.
                                                             (line  444)
* filesep <1>:                           Filesystem Utilities.
                                                             (line  445)
* file_in_loadpath:                      Manipulating the Load Path.
                                                             (line  112)
* file_in_loadpath <1>:                  Manipulating the Load Path.
                                                             (line  113)
* file_in_path:                          Filesystem Utilities.
                                                             (line  423)
* file_in_path <1>:                      Filesystem Utilities.
                                                             (line  424)
* fill:                                  Graphics Objects.   (line  142)
* fill <1>:                              Graphics Objects.   (line  143)
* fill <2>:                              Graphics Objects.   (line  144)
* fill <3>:                              Graphics Objects.   (line  145)
* fill <4>:                              Graphics Objects.   (line  146)
* filter:                                Signal Processing.  (line  245)
* filter <1>:                            Signal Processing.  (line  246)
* filter <2>:                            Signal Processing.  (line  247)
* filter <3>:                            Signal Processing.  (line  248)
* filter2:                               Signal Processing.  (line  289)
* filter2 <1>:                           Signal Processing.  (line  290)
* find:                                  Finding Elements and Checking Conditions.
                                                             (line  146)
* find <1>:                              Finding Elements and Checking Conditions.
                                                             (line  147)
* find <2>:                              Finding Elements and Checking Conditions.
                                                             (line  148)
* find <3>:                              Finding Elements and Checking Conditions.
                                                             (line  149)
* find <4>:                              Finding Elements and Checking Conditions.
                                                             (line  150)
* findall:                               Searching Properties.
                                                             (line   58)
* findall <1>:                           Searching Properties.
                                                             (line   59)
* findall <2>:                           Searching Properties.
                                                             (line   60)
* findall <3>:                           Searching Properties.
                                                             (line   62)
* findall <4>:                           Searching Properties.
                                                             (line   63)
* findall <5>:                           Searching Properties.
                                                             (line   64)
* findall <6>:                           Searching Properties.
                                                             (line   65)
* findall <7>:                           Searching Properties.
                                                             (line   66)
* findfigs:                              Graphics Objects.   (line  452)
* findobj:                               Searching Properties.
                                                             (line    6)
* findobj <1>:                           Searching Properties.
                                                             (line    7)
* findobj <2>:                           Searching Properties.
                                                             (line    8)
* findobj <3>:                           Searching Properties.
                                                             (line   10)
* findobj <4>:                           Searching Properties.
                                                             (line   11)
* findobj <5>:                           Searching Properties.
                                                             (line   12)
* findobj <6>:                           Searching Properties.
                                                             (line   13)
* findobj <7>:                           Searching Properties.
                                                             (line   14)
* findstr:                               Manipulating Strings.
                                                             (line   55)
* findstr <1>:                           Manipulating Strings.
                                                             (line   56)
* find_dir_in_path:                      Manipulating the Load Path.
                                                             (line  146)
* find_dir_in_path <1>:                  Manipulating the Load Path.
                                                             (line  147)
* finite:                                Finding Elements and Checking Conditions.
                                                             (line  121)
* finv:                                  Distributions.      (line  170)
* fix:                                   Utility Functions.  (line   17)
* fixed_point_format:                    Matrices.           (line  204)
* fixed_point_format <1>:                Matrices.           (line  205)
* fixed_point_format <2>:                Matrices.           (line  206)
* flag:                                  Representing Images.
                                                             (line  220)
* flag <1>:                              Representing Images.
                                                             (line  221)
* flintmax:                              Integer Data Types. (line  160)
* flintmax <1>:                          Integer Data Types. (line  161)
* flintmax <2>:                          Integer Data Types. (line  162)
* flipdim:                               Rearranging Matrices.
                                                             (line   36)
* flipdim <1>:                           Rearranging Matrices.
                                                             (line   37)
* fliplr:                                Rearranging Matrices.
                                                             (line    6)
* flipud:                                Rearranging Matrices.
                                                             (line   21)
* floor:                                 Utility Functions.  (line   28)
* fminbnd:                               Minimizers.         (line   19)
* fminsearch:                            Minimizers.         (line  114)
* fminsearch <1>:                        Minimizers.         (line  115)
* fminsearch <2>:                        Minimizers.         (line  116)
* fminunc:                               Minimizers.         (line   50)
* fminunc <1>:                           Minimizers.         (line   51)
* fminunc <2>:                           Minimizers.         (line   52)
* fmod:                                  Utility Functions.  (line  382)
* fnmatch:                               Filesystem Utilities.
                                                             (line  413)
* foo:                                   A Sample Function Description.
                                                             (line   13)
* foo <1>:                               A Sample Function Description.
                                                             (line   14)
* foo <2>:                               A Sample Function Description.
                                                             (line   15)
* fopen:                                 Opening and Closing Files.
                                                             (line   19)
* fopen <1>:                             Opening and Closing Files.
                                                             (line   20)
* fopen <2>:                             Opening and Closing Files.
                                                             (line   21)
* fork:                                  Controlling Subprocesses.
                                                             (line  195)
* format:                                Terminal Output.    (line   68)
* format <1>:                            Terminal Output.    (line   69)
* formula:                               Inline Functions.   (line   49)
* fortran_vec:                           Matrices and Arrays in Oct-Files.
                                                             (line  108)
* fpdf:                                  Distributions.      (line  162)
* fplot:                                 Two-dimensional Function Plotting.
                                                             (line   18)
* fplot <1>:                             Two-dimensional Function Plotting.
                                                             (line   19)
* fplot <2>:                             Two-dimensional Function Plotting.
                                                             (line   20)
* fplot <3>:                             Two-dimensional Function Plotting.
                                                             (line   21)
* fplot <4>:                             Two-dimensional Function Plotting.
                                                             (line   22)
* fprintf:                               Formatted Output.   (line   24)
* fputs:                                 Simple Output.      (line   16)
* fractdiff:                             Signal Processing.  (line  537)
* fread:                                 Binary I/O.         (line   12)
* freport:                               EOF and Errors.     (line   49)
* freqz:                                 Signal Processing.  (line  309)
* freqz <1>:                             Signal Processing.  (line  310)
* freqz <2>:                             Signal Processing.  (line  311)
* freqz <3>:                             Signal Processing.  (line  312)
* freqz <4>:                             Signal Processing.  (line  313)
* freqz <5>:                             Signal Processing.  (line  314)
* freqz <6>:                             Signal Processing.  (line  315)
* freqz_plot:                            Signal Processing.  (line  352)
* freqz_plot <1>:                        Signal Processing.  (line  353)
* frewind:                               File Positioning.   (line   52)
* frnd:                                  Random Number Generation.
                                                             (line  163)
* frnd <1>:                              Random Number Generation.
                                                             (line  164)
* frnd <2>:                              Random Number Generation.
                                                             (line  165)
* frnd <3>:                              Random Number Generation.
                                                             (line  166)
* fscanf:                                Formatted Input.    (line   11)
* fscanf <1>:                            Formatted Input.    (line   13)
* fseek:                                 File Positioning.   (line   16)
* fseek <1>:                             File Positioning.   (line   17)
* fseek <2>:                             File Positioning.   (line   18)
* fskipl:                                Line-Oriented Input.
                                                             (line   48)
* fskipl <1>:                            Line-Oriented Input.
                                                             (line   49)
* fskipl <2>:                            Line-Oriented Input.
                                                             (line   50)
* fsolve:                                Solvers.            (line   15)
* fsolve <1>:                            Solvers.            (line   16)
* ftell:                                 File Positioning.   (line    9)
* ftp:                                   FTP Objects.        (line   10)
* ftp <1>:                               FTP Objects.        (line   11)
* full:                                  Creating Sparse Matrices.
                                                             (line  188)
* fullfile:                              Filesystem Utilities.
                                                             (line  486)
* func2str:                              Function Handles.   (line   81)
* functions:                             Function Handles.   (line   42)
* fwrite:                                Binary I/O.         (line  163)
* fzero:                                 Solvers.            (line  177)
* fzero <1>:                             Solvers.            (line  178)
* fzero <2>:                             Solvers.            (line  179)
* f_test_regression:                     Tests.              (line  140)
* gallery:                               Famous Matrices.    (line    8)
* gallery <1>:                           Famous Matrices.    (line    9)
* gallery <2>:                           Famous Matrices.    (line   12)
* gallery <3>:                           Famous Matrices.    (line   13)
* gallery <4>:                           Famous Matrices.    (line   16)
* gallery <5>:                           Famous Matrices.    (line   17)
* gallery <6>:                           Famous Matrices.    (line   20)
* gallery <7>:                           Famous Matrices.    (line   21)
* gallery <8>:                           Famous Matrices.    (line   24)
* gallery <9>:                           Famous Matrices.    (line   25)
* gallery <10>:                          Famous Matrices.    (line   26)
* gallery <11>:                          Famous Matrices.    (line   29)
* gallery <12>:                          Famous Matrices.    (line   32)
* gallery <13>:                          Famous Matrices.    (line   33)
* gallery <14>:                          Famous Matrices.    (line   36)
* gallery <15>:                          Famous Matrices.    (line   37)
* gallery <16>:                          Famous Matrices.    (line   40)
* gallery <17>:                          Famous Matrices.    (line   41)
* gallery <18>:                          Famous Matrices.    (line   42)
* gallery <19>:                          Famous Matrices.    (line   45)
* gallery <20>:                          Famous Matrices.    (line   46)
* gallery <21>:                          Famous Matrices.    (line   47)
* gallery <22>:                          Famous Matrices.    (line   50)
* gallery <23>:                          Famous Matrices.    (line   51)
* gallery <24>:                          Famous Matrices.    (line   52)
* gallery <25>:                          Famous Matrices.    (line   55)
* gallery <26>:                          Famous Matrices.    (line   56)
* gallery <27>:                          Famous Matrices.    (line   59)
* gallery <28>:                          Famous Matrices.    (line   62)
* gallery <29>:                          Famous Matrices.    (line   63)
* gallery <30>:                          Famous Matrices.    (line   64)
* gallery <31>:                          Famous Matrices.    (line   67)
* gallery <32>:                          Famous Matrices.    (line   68)
* gallery <33>:                          Famous Matrices.    (line   71)
* gallery <34>:                          Famous Matrices.    (line   78)
* gallery <35>:                          Famous Matrices.    (line   79)
* gallery <36>:                          Famous Matrices.    (line   80)
* gallery <37>:                          Famous Matrices.    (line   83)
* gallery <38>:                          Famous Matrices.    (line   84)
* gallery <39>:                          Famous Matrices.    (line   87)
* gallery <40>:                          Famous Matrices.    (line   88)
* gallery <41>:                          Famous Matrices.    (line   92)
* gallery <42>:                          Famous Matrices.    (line   93)
* gallery <43>:                          Famous Matrices.    (line   96)
* gallery <44>:                          Famous Matrices.    (line   97)
* gallery <45>:                          Famous Matrices.    (line   98)
* gallery <46>:                          Famous Matrices.    (line  100)
* gallery <47>:                          Famous Matrices.    (line  102)
* gallery <48>:                          Famous Matrices.    (line  119)
* gallery <49>:                          Famous Matrices.    (line  120)
* gallery <50>:                          Famous Matrices.    (line  123)
* gallery <51>:                          Famous Matrices.    (line  126)
* gallery <52>:                          Famous Matrices.    (line  127)
* gallery <53>:                          Famous Matrices.    (line  130)
* gallery <54>:                          Famous Matrices.    (line  131)
* gallery <55>:                          Famous Matrices.    (line  134)
* gallery <56>:                          Famous Matrices.    (line  135)
* gallery <57>:                          Famous Matrices.    (line  136)
* gallery <58>:                          Famous Matrices.    (line  139)
* gallery <59>:                          Famous Matrices.    (line  140)
* gallery <60>:                          Famous Matrices.    (line  143)
* gallery <61>:                          Famous Matrices.    (line  144)
* gallery <62>:                          Famous Matrices.    (line  145)
* gallery <63>:                          Famous Matrices.    (line  148)
* gallery <64>:                          Famous Matrices.    (line  149)
* gallery <65>:                          Famous Matrices.    (line  152)
* gallery <66>:                          Famous Matrices.    (line  155)
* gallery <67>:                          Famous Matrices.    (line  158)
* gallery <68>:                          Famous Matrices.    (line  161)
* gallery <69>:                          Famous Matrices.    (line  164)
* gallery <70>:                          Famous Matrices.    (line  165)
* gallery <71>:                          Famous Matrices.    (line  168)
* gallery <72>:                          Famous Matrices.    (line  172)
* gallery <73>:                          Famous Matrices.    (line  173)
* gallery <74>:                          Famous Matrices.    (line  174)
* gallery <75>:                          Famous Matrices.    (line  190)
* gallery <76>:                          Famous Matrices.    (line  191)
* gallery <77>:                          Famous Matrices.    (line  194)
* gallery <78>:                          Famous Matrices.    (line  198)
* gallery <79>:                          Famous Matrices.    (line  199)
* gallery <80>:                          Famous Matrices.    (line  202)
* gallery <81>:                          Famous Matrices.    (line  205)
* gallery <82>:                          Famous Matrices.    (line  206)
* gallery <83>:                          Famous Matrices.    (line  210)
* gallery <84>:                          Famous Matrices.    (line  213)
* gallery <85>:                          Famous Matrices.    (line  214)
* gallery <86>:                          Famous Matrices.    (line  217)
* gallery <87>:                          Famous Matrices.    (line  218)
* gallery <88>:                          Famous Matrices.    (line  219)
* gallery <89>:                          Famous Matrices.    (line  220)
* gallery <90>:                          Famous Matrices.    (line  221)
* gallery <91>:                          Famous Matrices.    (line  224)
* gallery <92>:                          Famous Matrices.    (line  228)
* gallery <93>:                          Famous Matrices.    (line  231)
* gallery <94>:                          Famous Matrices.    (line  234)
* gallery <95>:                          Famous Matrices.    (line  235)
* gallery <96>:                          Famous Matrices.    (line  238)
* gallery <97>:                          Famous Matrices.    (line  239)
* gallery <98>:                          Famous Matrices.    (line  240)
* gallery <99>:                          Famous Matrices.    (line  241)
* gallery <100>:                         Famous Matrices.    (line  244)
* gallery <101>:                         Famous Matrices.    (line  245)
* gallery <102>:                         Famous Matrices.    (line  246)
* gallery <103>:                         Famous Matrices.    (line  247)
* gallery <104>:                         Famous Matrices.    (line  248)
* gallery <105>:                         Famous Matrices.    (line  249)
* gallery <106>:                         Famous Matrices.    (line  252)
* gallery <107>:                         Famous Matrices.    (line  253)
* gallery <108>:                         Famous Matrices.    (line  254)
* gallery <109>:                         Famous Matrices.    (line  257)
* gallery <110>:                         Famous Matrices.    (line  258)
* gallery <111>:                         Famous Matrices.    (line  259)
* gallery <112>:                         Famous Matrices.    (line  263)
* gallery <113>:                         Famous Matrices.    (line  264)
* gallery <114>:                         Famous Matrices.    (line  265)
* gallery <115>:                         Famous Matrices.    (line  281)
* gallery <116>:                         Famous Matrices.    (line  282)
* gallery <117>:                         Famous Matrices.    (line  285)
* gamcdf:                                Distributions.      (line  179)
* gaminv:                                Distributions.      (line  184)
* gamma:                                 Special Functions.  (line  312)
* gammainc:                              Special Functions.  (line  323)
* gammainc <1>:                          Special Functions.  (line  324)
* gammainc <2>:                          Special Functions.  (line  325)
* gammaln:                               Special Functions.  (line  414)
* gampdf:                                Distributions.      (line  174)
* gamrnd:                                Random Number Generation.
                                                             (line  180)
* gamrnd <1>:                            Random Number Generation.
                                                             (line  181)
* gamrnd <2>:                            Random Number Generation.
                                                             (line  182)
* gamrnd <3>:                            Random Number Generation.
                                                             (line  183)
* gca:                                   Graphics Objects.   (line  288)
* gcbf:                                  Callbacks.          (line   70)
* gcbo:                                  Callbacks.          (line   52)
* gcbo <1>:                              Callbacks.          (line   53)
* gcd:                                   Utility Functions.  (line  340)
* gcd <1>:                               Utility Functions.  (line  341)
* gcf:                                   Graphics Objects.   (line  260)
* gco:                                   Graphics Objects.   (line  314)
* gco <1>:                               Graphics Objects.   (line  315)
* ge:                                    Comparison Ops.     (line   62)
* genpath:                               Manipulating the Load Path.
                                                             (line   38)
* genpath <1>:                           Manipulating the Load Path.
                                                             (line   39)
* genvarname:                            Variables.          (line   58)
* genvarname <1>:                        Variables.          (line   59)
* geocdf:                                Distributions.      (line  196)
* geoinv:                                Distributions.      (line  203)
* geopdf:                                Distributions.      (line  189)
* geornd:                                Random Number Generation.
                                                             (line  197)
* geornd <1>:                            Random Number Generation.
                                                             (line  198)
* geornd <2>:                            Random Number Generation.
                                                             (line  199)
* geornd <3>:                            Random Number Generation.
                                                             (line  200)
* get:                                   Graphics Objects.   (line  382)
* get <1>:                               Graphics Objects.   (line  383)
* getappdata:                            Application-defined Data.
                                                             (line   19)
* getappdata <1>:                        Application-defined Data.
                                                             (line   20)
* getegid:                               Process ID Information.
                                                             (line   21)
* getenv:                                Environment Variables.
                                                             (line    6)
* geteuid:                               Process ID Information.
                                                             (line   15)
* getfield:                              Manipulating Structures.
                                                             (line  107)
* getfield <1>:                          Manipulating Structures.
                                                             (line  108)
* getgid:                                Process ID Information.
                                                             (line   24)
* getgrent:                              Group Database Functions.
                                                             (line   24)
* getgrgid:                              Group Database Functions.
                                                             (line   28)
* getgrnam:                              Group Database Functions.
                                                             (line   33)
* gethostname:                           Networking Utilities.
                                                             (line   12)
* getpgrp:                               Process ID Information.
                                                             (line    6)
* getpid:                                Process ID Information.
                                                             (line    9)
* getppid:                               Process ID Information.
                                                             (line   12)
* getpref:                               User-Defined Preferences.
                                                             (line    6)
* getpwent:                              Password Database Functions.
                                                             (line   33)
* getpwnam:                              Password Database Functions.
                                                             (line   43)
* getpwuid:                              Password Database Functions.
                                                             (line   38)
* getrusage:                             System Information. (line  240)
* getuid:                                Process ID Information.
                                                             (line   18)
* get_first_help_sentence:               Getting Help.       (line  258)
* get_first_help_sentence <1>:           Getting Help.       (line  259)
* get_help_text:                         Getting Help.       (line  244)
* get_help_text_from_file:               Getting Help.       (line  251)
* ginput:                                Interacting with Plots.
                                                             (line   11)
* ginput <1>:                            Interacting with Plots.
                                                             (line   12)
* givens:                                Basic Matrix Functions.
                                                             (line   94)
* givens <1>:                            Basic Matrix Functions.
                                                             (line   95)
* glob:                                  Filesystem Utilities.
                                                             (line  370)
* glpk:                                  Linear Programming. (line   15)
* gls:                                   Linear Least Squares.
                                                             (line   41)
* gmap40:                                Representing Images.
                                                             (line  361)
* gmap40 <1>:                            Representing Images.
                                                             (line  362)
* gmres:                                 Specialized Solvers.
                                                             (line  143)
* gmres <1>:                             Specialized Solvers.
                                                             (line  144)
* gmres <2>:                             Specialized Solvers.
                                                             (line  145)
* gmtime:                                Timing Utilities.   (line   86)
* gnuplot_binary:                        Customizing Toolkit Behavior.
                                                             (line   10)
* gnuplot_binary <1>:                    Customizing Toolkit Behavior.
                                                             (line   11)
* gplot:                                 Information.        (line  157)
* gplot <1>:                             Information.        (line  158)
* gplot <2>:                             Information.        (line  159)
* gradient:                              Utility Functions.  (line  182)
* gradient <1>:                          Utility Functions.  (line  183)
* gradient <2>:                          Utility Functions.  (line  184)
* gradient <3>:                          Utility Functions.  (line  185)
* gradient <4>:                          Utility Functions.  (line  186)
* gradient <5>:                          Utility Functions.  (line  187)
* gradient <6>:                          Utility Functions.  (line  188)
* graphics_toolkit:                      Graphics Toolkits.  (line    6)
* graphics_toolkit <1>:                  Graphics Toolkits.  (line    7)
* graphics_toolkit <2>:                  Graphics Toolkits.  (line    8)
* graphics_toolkit <3>:                  Graphics Toolkits.  (line    9)
* gray:                                  Representing Images.
                                                             (line  229)
* gray <1>:                              Representing Images.
                                                             (line  230)
* gray2ind:                              Representing Images.
                                                             (line   37)
* gray2ind <1>:                          Representing Images.
                                                             (line   38)
* gray2ind <2>:                          Representing Images.
                                                             (line   39)
* gray2ind <3>:                          Representing Images.
                                                             (line   40)
* gray2ind <4>:                          Representing Images.
                                                             (line   41)
* grid:                                  Plot Annotations.   (line  231)
* grid <1>:                              Plot Annotations.   (line  232)
* grid <2>:                              Plot Annotations.   (line  233)
* grid <3>:                              Plot Annotations.   (line  234)
* grid <4>:                              Plot Annotations.   (line  235)
* grid <5>:                              Plot Annotations.   (line  236)
* grid <6>:                              Plot Annotations.   (line  237)
* griddata:                              Interpolation on Scattered Data.
                                                             (line   15)
* griddata <1>:                          Interpolation on Scattered Data.
                                                             (line   16)
* griddata <2>:                          Interpolation on Scattered Data.
                                                             (line   17)
* griddata3:                             Interpolation on Scattered Data.
                                                             (line   32)
* griddata3 <1>:                         Interpolation on Scattered Data.
                                                             (line   33)
* griddata3 <2>:                         Interpolation on Scattered Data.
                                                             (line   34)
* griddatan:                             Interpolation on Scattered Data.
                                                             (line   52)
* griddatan <1>:                         Interpolation on Scattered Data.
                                                             (line   53)
* griddatan <2>:                         Interpolation on Scattered Data.
                                                             (line   54)
* gt:                                    Comparison Ops.     (line   68)
* gtext:                                 Interacting with Plots.
                                                             (line   38)
* gtext <1>:                             Interacting with Plots.
                                                             (line   39)
* gtext <2>:                             Interacting with Plots.
                                                             (line   40)
* gtext <3>:                             Interacting with Plots.
                                                             (line   41)
* gtext <4>:                             Interacting with Plots.
                                                             (line   42)
* guidata:                               GUI Utility Functions.
                                                             (line   15)
* guidata <1>:                           GUI Utility Functions.
                                                             (line   16)
* guihandles:                            GUI Utility Functions.
                                                             (line   30)
* guihandles <1>:                        GUI Utility Functions.
                                                             (line   31)
* gui_mode:                              Customizing Toolkit Behavior.
                                                             (line   21)
* gui_mode <1>:                          Customizing Toolkit Behavior.
                                                             (line   22)
* gunzip:                                File Archiving Utilities.
                                                             (line   25)
* gzip:                                  File Archiving Utilities.
                                                             (line   14)
* gzip <1>:                              File Archiving Utilities.
                                                             (line   15)
* hadamard:                              Famous Matrices.    (line  288)
* hamming:                               Signal Processing.  (line  541)
* hankel:                                Famous Matrices.    (line  311)
* hankel <1>:                            Famous Matrices.    (line  312)
* hanning:                               Signal Processing.  (line  547)
* hdl2struct:                            Graphics Objects.   (line  472)
* help:                                  Getting Help.       (line   14)
* help <1>:                              Getting Help.       (line   15)
* help <2>:                              Getting Help.       (line   16)
* helpdlg:                               Dialog Box Functions.
                                                             (line   43)
* helpdlg <1>:                           Dialog Box Functions.
                                                             (line   44)
* hess:                                  Matrix Factorizations.
                                                             (line  138)
* hess <1>:                              Matrix Factorizations.
                                                             (line  139)
* hex2dec:                               String Conversions. (line   69)
* hex2num:                               String Conversions. (line  158)
* hex2num <1>:                           String Conversions. (line  159)
* hggroup:                               Object Groups.      (line   12)
* hggroup <1>:                           Object Groups.      (line   13)
* hggroup <2>:                           Object Groups.      (line   14)
* hggroup <3>:                           Object Groups.      (line   15)
* hidden:                                Three-Dimensional Plots.
                                                             (line  160)
* hidden <1>:                            Three-Dimensional Plots.
                                                             (line  161)
* hidden <2>:                            Three-Dimensional Plots.
                                                             (line  162)
* hidden <3>:                            Three-Dimensional Plots.
                                                             (line  163)
* hilb:                                  Famous Matrices.    (line  328)
* hist:                                  Two-Dimensional Plots.
                                                             (line  423)
* hist <1>:                              Two-Dimensional Plots.
                                                             (line  424)
* hist <2>:                              Two-Dimensional Plots.
                                                             (line  425)
* hist <3>:                              Two-Dimensional Plots.
                                                             (line  426)
* hist <4>:                              Two-Dimensional Plots.
                                                             (line  427)
* hist <5>:                              Two-Dimensional Plots.
                                                             (line  428)
* hist <6>:                              Two-Dimensional Plots.
                                                             (line  429)
* histc:                                 Basic Statistical Functions.
                                                             (line   38)
* histc <1>:                             Basic Statistical Functions.
                                                             (line   39)
* histc <2>:                             Basic Statistical Functions.
                                                             (line   40)
* history:                               Commands For History.
                                                             (line   50)
* history <1>:                           Commands For History.
                                                             (line   51)
* history <2>:                           Commands For History.
                                                             (line   52)
* history <3>:                           Commands For History.
                                                             (line   53)
* history_control:                       Commands For History.
                                                             (line  169)
* history_control <1>:                   Commands For History.
                                                             (line  170)
* history_file:                          Commands For History.
                                                             (line  194)
* history_file <1>:                      Commands For History.
                                                             (line  195)
* history_save:                          Commands For History.
                                                             (line  153)
* history_save <1>:                      Commands For History.
                                                             (line  154)
* history_save <2>:                      Commands For History.
                                                             (line  155)
* history_size:                          Commands For History.
                                                             (line  206)
* history_size <1>:                      Commands For History.
                                                             (line  207)
* history_timestamp_format_string:       Commands For History.
                                                             (line  218)
* history_timestamp_format_string <1>:   Commands For History.
                                                             (line  219)
* history_timestamp_format_string <2>:   Commands For History.
                                                             (line  221)
* hold:                                  Manipulation of Plot Windows.
                                                             (line  102)
* hold <1>:                              Manipulation of Plot Windows.
                                                             (line  103)
* hold <2>:                              Manipulation of Plot Windows.
                                                             (line  104)
* hold <3>:                              Manipulation of Plot Windows.
                                                             (line  105)
* hold <4>:                              Manipulation of Plot Windows.
                                                             (line  106)
* home:                                  Cursor Motion.      (line   60)
* horzcat:                               Rearranging Matrices.
                                                             (line  134)
* hot:                                   Representing Images.
                                                             (line  237)
* hot <1>:                               Representing Images.
                                                             (line  238)
* hotelling_test:                        Tests.              (line  155)
* hotelling_test_2:                      Tests.              (line  170)
* housh:                                 Matrix Factorizations.
                                                             (line  618)
* hsv:                                   Representing Images.
                                                             (line  246)
* hsv2rgb:                               Color Conversion.   (line   25)
* hsv2rgb <1>:                           Color Conversion.   (line   26)
* hurst:                                 Signal Processing.  (line  553)
* hygecdf:                               Distributions.      (line  220)
* hygeinv:                               Distributions.      (line  230)
* hygepdf:                               Distributions.      (line  210)
* hygernd:                               Random Number Generation.
                                                             (line  217)
* hygernd <1>:                           Random Number Generation.
                                                             (line  218)
* hygernd <2>:                           Random Number Generation.
                                                             (line  219)
* hygernd <3>:                           Random Number Generation.
                                                             (line  220)
* hypot:                                 Utility Functions.  (line  171)
* hypot <1>:                             Utility Functions.  (line  172)
* i:                                     Mathematical Constants.
                                                             (line   45)
* I:                                     Mathematical Constants.
                                                             (line   45)
* I <1>:                                 Mathematical Constants.
                                                             (line   46)
* I <2>:                                 Mathematical Constants.
                                                             (line   47)
* I <3>:                                 Mathematical Constants.
                                                             (line   48)
* I <4>:                                 Mathematical Constants.
                                                             (line   49)
* idivide:                               Integer Arithmetic. (line   25)
* ifelse:                                Short-circuit Boolean Operators.
                                                             (line  105)
* ifft:                                  Signal Processing.  (line   33)
* ifft <1>:                              Signal Processing.  (line   34)
* ifft <2>:                              Signal Processing.  (line   35)
* ifft2:                                 Signal Processing.  (line   71)
* ifft2 <1>:                             Signal Processing.  (line   72)
* ifftn:                                 Signal Processing.  (line  100)
* ifftn <1>:                             Signal Processing.  (line  101)
* ifftshift:                             Signal Processing.  (line  532)
* ifftshift <1>:                         Signal Processing.  (line  533)
* ignore_function_time_stamp:            Function Files.     (line  151)
* ignore_function_time_stamp <1>:        Function Files.     (line  152)
* imag:                                  Complex Arithmetic. (line   53)
* image:                                 Displaying Images.  (line   55)
* image <1>:                             Displaying Images.  (line   56)
* image <2>:                             Displaying Images.  (line   57)
* image <3>:                             Displaying Images.  (line   58)
* image <4>:                             Displaying Images.  (line   59)
* imagesc:                               Displaying Images.  (line   97)
* imagesc <1>:                           Displaying Images.  (line   98)
* imagesc <2>:                           Displaying Images.  (line   99)
* imagesc <3>:                           Displaying Images.  (line  100)
* imagesc <4>:                           Displaying Images.  (line  101)
* imagesc <5>:                           Displaying Images.  (line  102)
* imagesc <6>:                           Displaying Images.  (line  103)
* IMAGE_PATH:                            Loading and Saving Images.
                                                             (line  146)
* IMAGE_PATH <1>:                        Loading and Saving Images.
                                                             (line  147)
* IMAGE_PATH <2>:                        Loading and Saving Images.
                                                             (line  148)
* imfinfo:                               Loading and Saving Images.
                                                             (line  165)
* imfinfo <1>:                           Loading and Saving Images.
                                                             (line  166)
* imfinfo <2>:                           Loading and Saving Images.
                                                             (line  167)
* imformats:                             Loading and Saving Images.
                                                             (line  317)
* imformats <1>:                         Loading and Saving Images.
                                                             (line  318)
* imformats <2>:                         Loading and Saving Images.
                                                             (line  319)
* imformats <3>:                         Loading and Saving Images.
                                                             (line  320)
* imformats <4>:                         Loading and Saving Images.
                                                             (line  321)
* imformats <5>:                         Loading and Saving Images.
                                                             (line  322)
* imformats <6>:                         Loading and Saving Images.
                                                             (line  323)
* importdata:                            Simple File I/O.    (line  528)
* importdata <1>:                        Simple File I/O.    (line  529)
* importdata <2>:                        Simple File I/O.    (line  530)
* importdata <3>:                        Simple File I/O.    (line  531)
* importdata <4>:                        Simple File I/O.    (line  532)
* imread:                                Loading and Saving Images.
                                                             (line   17)
* imread <1>:                            Loading and Saving Images.
                                                             (line   18)
* imread <2>:                            Loading and Saving Images.
                                                             (line   19)
* imread <3>:                            Loading and Saving Images.
                                                             (line   20)
* imread <4>:                            Loading and Saving Images.
                                                             (line   21)
* imshow:                                Displaying Images.  (line   10)
* imshow <1>:                            Displaying Images.  (line   11)
* imshow <2>:                            Displaying Images.  (line   12)
* imshow <3>:                            Displaying Images.  (line   13)
* imshow <4>:                            Displaying Images.  (line   14)
* imshow <5>:                            Displaying Images.  (line   15)
* imshow <6>:                            Displaying Images.  (line   16)
* imwrite:                               Loading and Saving Images.
                                                             (line   71)
* imwrite <1>:                           Loading and Saving Images.
                                                             (line   72)
* imwrite <2>:                           Loading and Saving Images.
                                                             (line   73)
* imwrite <3>:                           Loading and Saving Images.
                                                             (line   74)
* ind2gray:                              Representing Images.
                                                             (line   53)
* ind2rgb:                               Representing Images.
                                                             (line   95)
* ind2rgb <1>:                           Representing Images.
                                                             (line   96)
* ind2sub:                               Advanced Indexing.  (line  146)
* index:                                 Manipulating Strings.
                                                             (line   87)
* index <1>:                             Manipulating Strings.
                                                             (line   88)
* inf:                                   Mathematical Constants.
                                                             (line   68)
* Inf:                                   Mathematical Constants.
                                                             (line   68)
* Inf <1>:                               Mathematical Constants.
                                                             (line   69)
* Inf <2>:                               Mathematical Constants.
                                                             (line   70)
* Inf <3>:                               Mathematical Constants.
                                                             (line   71)
* Inf <4>:                               Mathematical Constants.
                                                             (line   72)
* inferiorto:                            Precedence of Objects.
                                                             (line   21)
* info:                                  Getting Help.       (line   87)
* info_file:                             Getting Help.       (line   97)
* info_file <1>:                         Getting Help.       (line   98)
* info_file <2>:                         Getting Help.       (line   99)
* info_program:                          Getting Help.       (line  116)
* info_program <1>:                      Getting Help.       (line  117)
* info_program <2>:                      Getting Help.       (line  118)
* inline:                                Inline Functions.   (line   14)
* inline <1>:                            Inline Functions.   (line   15)
* inline <2>:                            Inline Functions.   (line   16)
* inpolygon:                             Voronoi Diagrams.   (line  129)
* input:                                 Terminal Input.     (line   11)
* input <1>:                             Terminal Input.     (line   12)
* inputdlg:                              Dialog Box Functions.
                                                             (line   58)
* inputdlg <1>:                          Dialog Box Functions.
                                                             (line   59)
* inputdlg <2>:                          Dialog Box Functions.
                                                             (line   60)
* inputdlg <3>:                          Dialog Box Functions.
                                                             (line   61)
* inputname:                             Defining Functions. (line  172)
* int16:                                 Integer Data Types. (line   52)
* int2str:                               Converting Numerical Data to Strings.
                                                             (line   94)
* int32:                                 Integer Data Types. (line   66)
* int64:                                 Integer Data Types. (line   80)
* int8:                                  Integer Data Types. (line   38)
* interp1:                               One-dimensional Interpolation.
                                                             (line   11)
* interp1 <1>:                           One-dimensional Interpolation.
                                                             (line   12)
* interp1 <2>:                           One-dimensional Interpolation.
                                                             (line   13)
* interp1 <3>:                           One-dimensional Interpolation.
                                                             (line   14)
* interp1 <4>:                           One-dimensional Interpolation.
                                                             (line   15)
* interp1 <5>:                           One-dimensional Interpolation.
                                                             (line   16)
* interp1 <6>:                           One-dimensional Interpolation.
                                                             (line   17)
* interp2:                               Multi-dimensional Interpolation.
                                                             (line   10)
* interp2 <1>:                           Multi-dimensional Interpolation.
                                                             (line   11)
* interp2 <2>:                           Multi-dimensional Interpolation.
                                                             (line   12)
* interp2 <3>:                           Multi-dimensional Interpolation.
                                                             (line   13)
* interp2 <4>:                           Multi-dimensional Interpolation.
                                                             (line   14)
* interp3:                               Multi-dimensional Interpolation.
                                                             (line   62)
* interp3 <1>:                           Multi-dimensional Interpolation.
                                                             (line   63)
* interp3 <2>:                           Multi-dimensional Interpolation.
                                                             (line   64)
* interp3 <3>:                           Multi-dimensional Interpolation.
                                                             (line   65)
* interp3 <4>:                           Multi-dimensional Interpolation.
                                                             (line   66)
* interp3 <5>:                           Multi-dimensional Interpolation.
                                                             (line   67)
* interpft:                              One-dimensional Interpolation.
                                                             (line  119)
* interpft <1>:                          One-dimensional Interpolation.
                                                             (line  120)
* interpn:                               Multi-dimensional Interpolation.
                                                             (line  108)
* interpn <1>:                           Multi-dimensional Interpolation.
                                                             (line  109)
* interpn <2>:                           Multi-dimensional Interpolation.
                                                             (line  110)
* interpn <3>:                           Multi-dimensional Interpolation.
                                                             (line  111)
* interpn <4>:                           Multi-dimensional Interpolation.
                                                             (line  112)
* interpn <5>:                           Multi-dimensional Interpolation.
                                                             (line  113)
* intersect:                             Set Operations.     (line   76)
* intersect <1>:                         Set Operations.     (line   77)
* intmax:                                Integer Data Types. (line   94)
* intmin:                                Integer Data Types. (line  127)
* inv:                                   Basic Matrix Functions.
                                                             (line  111)
* inv <1>:                               Basic Matrix Functions.
                                                             (line  112)
* invhilb:                               Famous Matrices.    (line  347)
* ipermute:                              Rearranging Matrices.
                                                             (line  163)
* iqr:                                   Descriptive Statistics.
                                                             (line   96)
* iqr <1>:                               Descriptive Statistics.
                                                             (line   97)
* isa:                                   Built-in Data Types.
                                                             (line   25)
* isalnum:                               Character Class Functions.
                                                             (line   15)
* isalpha:                               Character Class Functions.
                                                             (line   24)
* isappdata:                             Application-defined Data.
                                                             (line   36)
* isargout:                              Ignoring Arguments. (line   30)
* isascii:                               Character Class Functions.
                                                             (line  107)
* isaxes:                                Graphics Objects.   (line  238)
* isbool:                                Predicates for Numeric Objects.
                                                             (line  133)
* iscell:                                Basic Usage of Cell Arrays.
                                                             (line   83)
* iscellstr:                             Cell Arrays of Strings.
                                                             (line   59)
* ischar:                                Character Arrays.   (line   25)
* iscntrl:                               Character Class Functions.
                                                             (line   86)
* iscolormap:                            Representing Images.
                                                             (line   27)
* iscolumn:                              Predicates for Numeric Objects.
                                                             (line   84)
* iscomplex:                             Predicates for Numeric Objects.
                                                             (line   51)
* isdebugmode:                           Debug Mode.         (line   51)
* isdefinite:                            Predicates for Numeric Objects.
                                                             (line  122)
* isdefinite <1>:                        Predicates for Numeric Objects.
                                                             (line  123)
* isdeployed:                            System Information. (line   84)
* isdigit:                               Character Class Functions.
                                                             (line   57)
* isdir:                                 Filesystem Utilities.
                                                             (line  351)
* isempty:                               Object Sizes.       (line   96)
* isequal:                               Comparison Ops.     (line   74)
* isequaln:                              Comparison Ops.     (line   79)
* isfield:                               Manipulating Structures.
                                                             (line   35)
* isfield <1>:                           Manipulating Structures.
                                                             (line   36)
* isfigure:                              Graphics Objects.   (line  247)
* isfinite:                              Finding Elements and Checking Conditions.
                                                             (line  120)
* isfloat:                               Predicates for Numeric Objects.
                                                             (line   35)
* isglobal:                              Global Variables.   (line   64)
* isgraph:                               Character Class Functions.
                                                             (line   93)
* isguirunning:                          GUI Utility Functions.
                                                             (line   48)
* ishandle:                              Graphics Objects.   (line  221)
* ishermitian:                           Predicates for Numeric Objects.
                                                             (line  112)
* ishermitian <1>:                       Predicates for Numeric Objects.
                                                             (line  113)
* ishghandle:                            Graphics Objects.   (line  230)
* ishold:                                Manipulation of Plot Windows.
                                                             (line  136)
* ishold <1>:                            Manipulation of Plot Windows.
                                                             (line  137)
* ishold <2>:                            Manipulation of Plot Windows.
                                                             (line  138)
* isieee:                                System Information. (line   79)
* isindex:                               Advanced Indexing.  (line  159)
* isindex <1>:                           Advanced Indexing.  (line  160)
* isinf:                                 Finding Elements and Checking Conditions.
                                                             (line   99)
* isinteger:                             Integer Data Types. (line   28)
* isjava:                                Java Interface Functions.
                                                             (line   47)
* iskeyword:                             Keywords.           (line   28)
* iskeyword <1>:                         Keywords.           (line   29)
* isletter:                              Character Class Functions.
                                                             (line   34)
* islogical:                             Predicates for Numeric Objects.
                                                             (line  132)
* islower:                               Character Class Functions.
                                                             (line   43)
* ismac:                                 System Information. (line   73)
* ismatrix:                              Predicates for Numeric Objects.
                                                             (line   58)
* ismember:                              Set Operations.     (line   16)
* ismember <1>:                          Set Operations.     (line   17)
* ismember <2>:                          Set Operations.     (line   18)
* ismethod:                              Creating a Class.   (line  119)
* isna:                                  Missing Data.       (line   32)
* isnan:                                 Finding Elements and Checking Conditions.
                                                             (line  109)
* isnull:                                Object Sizes.       (line  102)
* isnumeric:                             Predicates for Numeric Objects.
                                                             (line   24)
* isobject:                              Creating a Class.   (line   97)
* isocolors:                             Three-Dimensional Plots.
                                                             (line  517)
* isocolors <1>:                         Three-Dimensional Plots.
                                                             (line  518)
* isocolors <2>:                         Three-Dimensional Plots.
                                                             (line  519)
* isocolors <3>:                         Three-Dimensional Plots.
                                                             (line  520)
* isocolors <4>:                         Three-Dimensional Plots.
                                                             (line  521)
* isocolors <5>:                         Three-Dimensional Plots.
                                                             (line  522)
* isonormals:                            Three-Dimensional Plots.
                                                             (line  445)
* isonormals <1>:                        Three-Dimensional Plots.
                                                             (line  446)
* isonormals <2>:                        Three-Dimensional Plots.
                                                             (line  447)
* isonormals <3>:                        Three-Dimensional Plots.
                                                             (line  448)
* isonormals <4>:                        Three-Dimensional Plots.
                                                             (line  449)
* isonormals <5>:                        Three-Dimensional Plots.
                                                             (line  450)
* isosurface:                            Three-Dimensional Plots.
                                                             (line  356)
* isosurface <1>:                        Three-Dimensional Plots.
                                                             (line  357)
* isosurface <2>:                        Three-Dimensional Plots.
                                                             (line  358)
* isosurface <3>:                        Three-Dimensional Plots.
                                                             (line  359)
* isosurface <4>:                        Three-Dimensional Plots.
                                                             (line  360)
* isosurface <5>:                        Three-Dimensional Plots.
                                                             (line  361)
* isosurface <6>:                        Three-Dimensional Plots.
                                                             (line  362)
* ispc:                                  System Information. (line   61)
* ispref:                                User-Defined Preferences.
                                                             (line   75)
* isprime:                               Predicates for Numeric Objects.
                                                             (line  140)
* isprint:                               Character Class Functions.
                                                             (line  100)
* isprop:                                Introduction to Graphics Structures.
                                                             (line  103)
* ispunct:                               Character Class Functions.
                                                             (line   71)
* isreal:                                Predicates for Numeric Objects.
                                                             (line   43)
* isrow:                                 Predicates for Numeric Objects.
                                                             (line   77)
* isscalar:                              Predicates for Numeric Objects.
                                                             (line   90)
* issorted:                              Rearranging Matrices.
                                                             (line  359)
* issorted <1>:                          Rearranging Matrices.
                                                             (line  360)
* issorted <2>:                          Rearranging Matrices.
                                                             (line  361)
* isspace:                               Character Class Functions.
                                                             (line   78)
* issparse:                              Information.        (line   22)
* issquare:                              Predicates for Numeric Objects.
                                                             (line   96)
* isstrprop:                             Character Class Functions.
                                                             (line  112)
* isstruct:                              Creating Structures.
                                                             (line  159)
* issymmetric:                           Predicates for Numeric Objects.
                                                             (line  102)
* issymmetric <1>:                       Predicates for Numeric Objects.
                                                             (line  103)
* isunix:                                System Information. (line   67)
* isupper:                               Character Class Functions.
                                                             (line   50)
* isvarname:                             Variables.          (line   52)
* isvector:                              Predicates for Numeric Objects.
                                                             (line   68)
* isxdigit:                              Character Class Functions.
                                                             (line   65)
* is_absolute_filename:                  Filesystem Utilities.
                                                             (line  523)
* is_dq_string:                          Escape Sequences in String Constants.
                                                             (line   76)
* is_function_handle:                    Function Handles.   (line   36)
* is_leap_year:                          Timing Utilities.   (line  385)
* is_leap_year <1>:                      Timing Utilities.   (line  386)
* is_rooted_relative_filename:           Filesystem Utilities.
                                                             (line  530)
* is_sq_string:                          Escape Sequences in String Constants.
                                                             (line   82)
* is_valid_file_id:                      Opening and Closing Files.
                                                             (line  117)
* j:                                     Mathematical Constants.
                                                             (line   45)
* J:                                     Mathematical Constants.
                                                             (line   45)
* javaaddpath:                           Java Interface Functions.
                                                             (line  195)
* javaaddpath <1>:                       Java Interface Functions.
                                                             (line  195)
* javaaddpath <2>:                       Java Interface Functions.
                                                             (line  196)
* javaArray:                             Java Interface Functions.
                                                             (line   24)
* javaArray <1>:                         Java Interface Functions.
                                                             (line   25)
* javaclasspath:                         Java Interface Functions.
                                                             (line  161)
* javaclasspath <1>:                     Java Interface Functions.
                                                             (line  162)
* javaclasspath <2>:                     Java Interface Functions.
                                                             (line  163)
* javaclasspath <3>:                     Java Interface Functions.
                                                             (line  164)
* javamem:                               Java Interface Functions.
                                                             (line  242)
* javamem <1>:                           Java Interface Functions.
                                                             (line  243)
* javaMethod:                            Java Interface Functions.
                                                             (line  139)
* javaMethod <1>:                        Java Interface Functions.
                                                             (line  140)
* javaObject:                            Java Interface Functions.
                                                             (line   10)
* javaObject <1>:                        Java Interface Functions.
                                                             (line   11)
* javarmpath:                            Java Interface Functions.
                                                             (line  205)
* javarmpath <1>:                        Java Interface Functions.
                                                             (line  206)
* java_get:                              Java Interface Functions.
                                                             (line   87)
* java_matrix_autoconversion:            Java Interface Functions.
                                                             (line  283)
* java_matrix_autoconversion <1>:        Java Interface Functions.
                                                             (line  284)
* java_matrix_autoconversion <2>:        Java Interface Functions.
                                                             (line  285)
* java_set:                              Java Interface Functions.
                                                             (line  102)
* java_unsigned_autoconversion:          Java Interface Functions.
                                                             (line  298)
* java_unsigned_autoconversion <1>:      Java Interface Functions.
                                                             (line  299)
* java_unsigned_autoconversion <2>:      Java Interface Functions.
                                                             (line  300)
* jet:                                   Representing Images.
                                                             (line  259)
* jet <1>:                               Representing Images.
                                                             (line  260)
* jit_enable:                            JIT Compiler.       (line   30)
* jit_enable <1>:                        JIT Compiler.       (line   31)
* jit_enable <2>:                        JIT Compiler.       (line   32)
* jit_startcnt:                          JIT Compiler.       (line   44)
* jit_startcnt <1>:                      JIT Compiler.       (line   45)
* jit_startcnt <2>:                      JIT Compiler.       (line   46)
* kbhit:                                 Terminal Input.     (line   73)
* kbhit <1>:                             Terminal Input.     (line   74)
* kendall:                               Correlation and Regression Analysis.
                                                             (line   74)
* kendall <1>:                           Correlation and Regression Analysis.
                                                             (line   75)
* keyboard:                              Breakpoints.        (line  134)
* keyboard <1>:                          Breakpoints.        (line  135)
* kill:                                  Controlling Subprocesses.
                                                             (line  451)
* kolmogorov_smirnov_cdf:                Distributions.      (line  240)
* kolmogorov_smirnov_test:               Tests.              (line  189)
* kolmogorov_smirnov_test_2:             Tests.              (line  219)
* kron:                                  Functions of a Matrix.
                                                             (line   53)
* kron <1>:                              Functions of a Matrix.
                                                             (line   54)
* kruskal_wallis_test:                   Tests.              (line  243)
* krylov:                                Matrix Factorizations.
                                                             (line  644)
* kurtosis:                              Descriptive Statistics.
                                                             (line  219)
* kurtosis <1>:                          Descriptive Statistics.
                                                             (line  220)
* kurtosis <2>:                          Descriptive Statistics.
                                                             (line  221)
* laplace_cdf:                           Distributions.      (line  257)
* laplace_inv:                           Distributions.      (line  261)
* laplace_pdf:                           Distributions.      (line  253)
* laplace_rnd:                           Random Number Generation.
                                                             (line  237)
* laplace_rnd <1>:                       Random Number Generation.
                                                             (line  238)
* laplace_rnd <2>:                       Random Number Generation.
                                                             (line  239)
* lasterr:                               Catching Errors.    (line   92)
* lasterr <1>:                           Catching Errors.    (line   93)
* lasterr <2>:                           Catching Errors.    (line   94)
* lasterror:                             Catching Errors.    (line   50)
* lasterror <1>:                         Catching Errors.    (line   51)
* lasterror <2>:                         Catching Errors.    (line   52)
* lastwarn:                              Issuing Warnings.   (line   82)
* lastwarn <1>:                          Issuing Warnings.   (line   83)
* lastwarn <2>:                          Issuing Warnings.   (line   84)
* lcm:                                   Utility Functions.  (line  364)
* lcm <1>:                               Utility Functions.  (line  365)
* ldivide:                               Arithmetic Ops.     (line  128)
* le:                                    Comparison Ops.     (line   86)
* legend:                                Plot Annotations.   (line   39)
* legend <1>:                            Plot Annotations.   (line   40)
* legend <2>:                            Plot Annotations.   (line   41)
* legend <3>:                            Plot Annotations.   (line   42)
* legend <4>:                            Plot Annotations.   (line   43)
* legend <5>:                            Plot Annotations.   (line   44)
* legend <6>:                            Plot Annotations.   (line   45)
* legend <7>:                            Plot Annotations.   (line   46)
* legend <8>:                            Plot Annotations.   (line   47)
* legend <9>:                            Plot Annotations.   (line   48)
* legendre:                              Special Functions.  (line  352)
* legendre <1>:                          Special Functions.  (line  353)
* length:                                Object Sizes.       (line   58)
* lgamma:                                Special Functions.  (line  413)
* license:                               System Information. (line  188)
* license <1>:                           System Information. (line  189)
* license <2>:                           System Information. (line  190)
* license <3>:                           System Information. (line  191)
* license <4>:                           System Information. (line  192)
* license <5>:                           System Information. (line  193)
* lin2mu:                                Audio Processing.   (line   27)
* line:                                  Graphics Objects.   (line   63)
* line <1>:                              Graphics Objects.   (line   64)
* line <2>:                              Graphics Objects.   (line   65)
* line <3>:                              Graphics Objects.   (line   66)
* line <4>:                              Graphics Objects.   (line   67)
* line <5>:                              Graphics Objects.   (line   68)
* line <6>:                              Graphics Objects.   (line   69)
* line <7>:                              Graphics Objects.   (line   70)
* lines:                                 Representing Images.
                                                             (line  268)
* lines <1>:                             Representing Images.
                                                             (line  269)
* link:                                  Filesystem Utilities.
                                                             (line   69)
* link <1>:                              Filesystem Utilities.
                                                             (line   70)
* linkprop:                              Object Groups.      (line  194)
* linkprop <1>:                          Object Groups.      (line  195)
* linsolve:                              Basic Matrix Functions.
                                                             (line  128)
* linsolve <1>:                          Basic Matrix Functions.
                                                             (line  129)
* linsolve <2>:                          Basic Matrix Functions.
                                                             (line  130)
* linspace:                              Special Utility Matrices.
                                                             (line  118)
* linspace <1>:                          Special Utility Matrices.
                                                             (line  119)
* listdlg:                               Dialog Box Functions.
                                                             (line  100)
* list_in_columns:                       Terminal Output.    (line   36)
* list_primes:                           Utility Functions.  (line  422)
* list_primes <1>:                       Utility Functions.  (line  423)
* load:                                  Simple File I/O.    (line  192)
* load <1>:                              Simple File I/O.    (line  193)
* load <2>:                              Simple File I/O.    (line  194)
* load <3>:                              Simple File I/O.    (line  195)
* load <4>:                              Simple File I/O.    (line  196)
* load <5>:                              Simple File I/O.    (line  197)
* load <6>:                              Simple File I/O.    (line  198)
* loadaudio:                             Audio Processing.   (line   48)
* loaded_graphics_toolkits:              Graphics Toolkits.  (line   32)
* loadobj:                               Manipulating Classes.
                                                             (line  163)
* localtime:                             Timing Utilities.   (line  113)
* log:                                   Exponents and Logarithms.
                                                             (line   17)
* log10:                                 Exponents and Logarithms.
                                                             (line   37)
* log1p:                                 Exponents and Logarithms.
                                                             (line   31)
* log2:                                  Exponents and Logarithms.
                                                             (line   43)
* log2 <1>:                              Exponents and Logarithms.
                                                             (line   44)
* logical:                               Logical Values.     (line   36)
* logistic_cdf:                          Distributions.      (line  269)
* logistic_inv:                          Distributions.      (line  273)
* logistic_pdf:                          Distributions.      (line  265)
* logistic_regression:                   Correlation and Regression Analysis.
                                                             (line   96)
* logistic_rnd:                          Random Number Generation.
                                                             (line  249)
* logistic_rnd <1>:                      Random Number Generation.
                                                             (line  250)
* logistic_rnd <2>:                      Random Number Generation.
                                                             (line  251)
* logit:                                 Basic Statistical Functions.
                                                             (line  146)
* loglog:                                Two-Dimensional Plots.
                                                             (line  265)
* loglog <1>:                            Two-Dimensional Plots.
                                                             (line  266)
* loglog <2>:                            Two-Dimensional Plots.
                                                             (line  267)
* loglog <3>:                            Two-Dimensional Plots.
                                                             (line  268)
* loglog <4>:                            Two-Dimensional Plots.
                                                             (line  269)
* loglog <5>:                            Two-Dimensional Plots.
                                                             (line  270)
* loglogerr:                             Two-Dimensional Plots.
                                                             (line 1220)
* loglogerr <1>:                         Two-Dimensional Plots.
                                                             (line 1221)
* loglogerr <2>:                         Two-Dimensional Plots.
                                                             (line 1222)
* loglogerr <3>:                         Two-Dimensional Plots.
                                                             (line 1223)
* loglogerr <4>:                         Two-Dimensional Plots.
                                                             (line 1224)
* loglogerr <5>:                         Two-Dimensional Plots.
                                                             (line 1225)
* loglogerr <6>:                         Two-Dimensional Plots.
                                                             (line 1226)
* loglogerr <7>:                         Two-Dimensional Plots.
                                                             (line 1227)
* loglogerr <8>:                         Two-Dimensional Plots.
                                                             (line 1228)
* loglogerr <9>:                         Two-Dimensional Plots.
                                                             (line 1229)
* logm:                                  Functions of a Matrix.
                                                             (line   29)
* logm <1>:                              Functions of a Matrix.
                                                             (line   30)
* logm <2>:                              Functions of a Matrix.
                                                             (line   31)
* logncdf:                               Distributions.      (line  287)
* logncdf <1>:                           Distributions.      (line  288)
* logninv:                               Distributions.      (line  297)
* logninv <1>:                           Distributions.      (line  298)
* lognpdf:                               Distributions.      (line  277)
* lognpdf <1>:                           Distributions.      (line  278)
* lognrnd:                               Random Number Generation.
                                                             (line  261)
* lognrnd <1>:                           Random Number Generation.
                                                             (line  262)
* lognrnd <2>:                           Random Number Generation.
                                                             (line  263)
* lognrnd <3>:                           Random Number Generation.
                                                             (line  264)
* logspace:                              Special Utility Matrices.
                                                             (line  135)
* logspace <1>:                          Special Utility Matrices.
                                                             (line  136)
* logspace <2>:                          Special Utility Matrices.
                                                             (line  137)
* lookfor:                               Getting Help.       (line   51)
* lookfor <1>:                           Getting Help.       (line   52)
* lookfor <2>:                           Getting Help.       (line   53)
* lookfor <3>:                           Getting Help.       (line   54)
* lookup:                                Finding Elements and Checking Conditions.
                                                             (line  192)
* lookup <1>:                            Finding Elements and Checking Conditions.
                                                             (line  193)
* lower:                                 String Conversions. (line  279)
* ls:                                    Current Working Directory.
                                                             (line   33)
* ls <1>:                                Current Working Directory.
                                                             (line   34)
* ls <2>:                                Current Working Directory.
                                                             (line   35)
* ls <3>:                                Current Working Directory.
                                                             (line   36)
* lsode:                                 Ordinary Differential Equations.
                                                             (line   14)
* lsode <1>:                             Ordinary Differential Equations.
                                                             (line   15)
* lsode_options:                         Ordinary Differential Equations.
                                                             (line   86)
* lsode_options <1>:                     Ordinary Differential Equations.
                                                             (line   87)
* lsode_options <2>:                     Ordinary Differential Equations.
                                                             (line   88)
* lsqnonneg:                             Linear Least Squares.
                                                             (line   61)
* lsqnonneg <1>:                         Linear Least Squares.
                                                             (line   62)
* lsqnonneg <2>:                         Linear Least Squares.
                                                             (line   63)
* lsqnonneg <3>:                         Linear Least Squares.
                                                             (line   64)
* lsqnonneg <4>:                         Linear Least Squares.
                                                             (line   65)
* lsqnonneg <5>:                         Linear Least Squares.
                                                             (line   66)
* lsqnonneg <6>:                         Linear Least Squares.
                                                             (line   67)
* lsqnonneg <7>:                         Linear Least Squares.
                                                             (line   69)
* lstat:                                 Filesystem Utilities.
                                                             (line  163)
* lstat <1>:                             Filesystem Utilities.
                                                             (line  164)
* ls_command:                            Current Working Directory.
                                                             (line   57)
* ls_command <1>:                        Current Working Directory.
                                                             (line   58)
* lt:                                    Comparison Ops.     (line   92)
* lu:                                    Matrix Factorizations.
                                                             (line  156)
* lu <1>:                                Matrix Factorizations.
                                                             (line  157)
* lu <2>:                                Matrix Factorizations.
                                                             (line  158)
* lu <3>:                                Matrix Factorizations.
                                                             (line  159)
* lu <4>:                                Matrix Factorizations.
                                                             (line  160)
* lu <5>:                                Matrix Factorizations.
                                                             (line  161)
* lu <6>:                                Matrix Factorizations.
                                                             (line  162)
* luinc:                                 Iterative Techniques.
                                                             (line  276)
* luinc <1>:                             Iterative Techniques.
                                                             (line  277)
* luinc <2>:                             Iterative Techniques.
                                                             (line  278)
* luupdate:                              Matrix Factorizations.
                                                             (line  224)
* luupdate <1>:                          Matrix Factorizations.
                                                             (line  225)
* magic:                                 Famous Matrices.    (line  377)
* mahalanobis:                           Basic Statistical Functions.
                                                             (line  158)
* makeinfo_program:                      Getting Help.       (line  137)
* makeinfo_program <1>:                  Getting Help.       (line  138)
* makeinfo_program <2>:                  Getting Help.       (line  139)
* make_absolute_filename:                Filesystem Utilities.
                                                             (line  514)
* manova:                                Tests.              (line  270)
* mat2cell:                              Creating Cell Arrays.
                                                             (line   89)
* mat2cell <1>:                          Creating Cell Arrays.
                                                             (line   90)
* mat2cell <2>:                          Creating Cell Arrays.
                                                             (line   91)
* mat2str:                               Converting Numerical Data to Strings.
                                                             (line   15)
* mat2str <1>:                           Converting Numerical Data to Strings.
                                                             (line   16)
* matlabroot:                            System Information. (line   96)
* matrix_type:                           Basic Matrix Functions.
                                                             (line  181)
* matrix_type <1>:                       Basic Matrix Functions.
                                                             (line  182)
* matrix_type <2>:                       Basic Matrix Functions.
                                                             (line  183)
* matrix_type <3>:                       Basic Matrix Functions.
                                                             (line  184)
* matrix_type <4>:                       Basic Matrix Functions.
                                                             (line  185)
* matrix_type <5>:                       Basic Matrix Functions.
                                                             (line  186)
* max:                                   Utility Functions.  (line   57)
* max <1>:                               Utility Functions.  (line   58)
* max <2>:                               Utility Functions.  (line   59)
* max <3>:                               Utility Functions.  (line   60)
* max <4>:                               Utility Functions.  (line   61)
* max_recursion_depth:                   Recursion.          (line   28)
* max_recursion_depth <1>:               Recursion.          (line   29)
* max_recursion_depth <2>:               Recursion.          (line   30)
* mcnemar_test:                          Tests.              (line  284)
* md5sum:                                Hashing Functions.  (line   26)
* md5sum <1>:                            Hashing Functions.  (line   27)
* mean:                                  Descriptive Statistics.
                                                             (line   11)
* mean <1>:                              Descriptive Statistics.
                                                             (line   12)
* mean <2>:                              Descriptive Statistics.
                                                             (line   13)
* mean <3>:                              Descriptive Statistics.
                                                             (line   14)
* meansq:                                Descriptive Statistics.
                                                             (line  110)
* meansq <1>:                            Descriptive Statistics.
                                                             (line  111)
* median:                                Descriptive Statistics.
                                                             (line   42)
* median <1>:                            Descriptive Statistics.
                                                             (line   43)
* menu:                                  Terminal Input.     (line   44)
* merge:                                 Short-circuit Boolean Operators.
                                                             (line  104)
* mesh:                                  Three-Dimensional Plots.
                                                             (line   44)
* mesh <1>:                              Three-Dimensional Plots.
                                                             (line   45)
* mesh <2>:                              Three-Dimensional Plots.
                                                             (line   46)
* mesh <3>:                              Three-Dimensional Plots.
                                                             (line   47)
* mesh <4>:                              Three-Dimensional Plots.
                                                             (line   48)
* mesh <5>:                              Three-Dimensional Plots.
                                                             (line   49)
* meshc:                                 Three-Dimensional Plots.
                                                             (line   83)
* meshc <1>:                             Three-Dimensional Plots.
                                                             (line   84)
* meshc <2>:                             Three-Dimensional Plots.
                                                             (line   85)
* meshc <3>:                             Three-Dimensional Plots.
                                                             (line   86)
* meshc <4>:                             Three-Dimensional Plots.
                                                             (line   87)
* meshc <5>:                             Three-Dimensional Plots.
                                                             (line   88)
* meshgrid:                              Three-Dimensional Plots.
                                                             (line  657)
* meshgrid <1>:                          Three-Dimensional Plots.
                                                             (line  658)
* meshgrid <2>:                          Three-Dimensional Plots.
                                                             (line  659)
* meshgrid <3>:                          Three-Dimensional Plots.
                                                             (line  660)
* meshz:                                 Three-Dimensional Plots.
                                                             (line  122)
* meshz <1>:                             Three-Dimensional Plots.
                                                             (line  123)
* meshz <2>:                             Three-Dimensional Plots.
                                                             (line  124)
* meshz <3>:                             Three-Dimensional Plots.
                                                             (line  125)
* meshz <4>:                             Three-Dimensional Plots.
                                                             (line  126)
* meshz <5>:                             Three-Dimensional Plots.
                                                             (line  127)
* methods:                               Creating a Class.   (line  106)
* methods <1>:                           Creating a Class.   (line  107)
* methods <2>:                           Creating a Class.   (line  108)
* mex:                                   Getting Started with Mex-Files.
                                                             (line   12)
* mexext:                                Getting Started with Mex-Files.
                                                             (line   18)
* mfilename:                             Function Files.     (line  141)
* mfilename <1>:                         Function Files.     (line  142)
* mfilename <2>:                         Function Files.     (line  143)
* mget:                                  FTP Objects.        (line   39)
* mget <1>:                              FTP Objects.        (line   40)
* mget <2>:                              FTP Objects.        (line   41)
* mgorth:                                Basic Matrix Functions.
                                                             (line  333)
* min:                                   Utility Functions.  (line   92)
* min <1>:                               Utility Functions.  (line   93)
* min <2>:                               Utility Functions.  (line   94)
* min <3>:                               Utility Functions.  (line   95)
* min <4>:                               Utility Functions.  (line   96)
* minus:                                 Arithmetic Ops.     (line  136)
* mislocked:                             Function Locking.   (line   64)
* mislocked <1>:                         Function Locking.   (line   65)
* missing_component_hook:                Missing Components. (line   12)
* missing_component_hook <1>:            Missing Components. (line   13)
* missing_component_hook <2>:            Missing Components. (line   14)
* missing_function_hook:                 Parser.             (line   46)
* missing_function_hook <1>:             Parser.             (line   47)
* missing_function_hook <2>:             Parser.             (line   48)
* mkdir:                                 Filesystem Utilities.
                                                             (line  100)
* mkdir <1>:                             Filesystem Utilities.
                                                             (line  101)
* mkdir <2>:                             Filesystem Utilities.
                                                             (line  102)
* mkdir <3>:                             FTP Objects.        (line  105)
* mkfifo:                                Filesystem Utilities.
                                                             (line  146)
* mkfifo <1>:                            Filesystem Utilities.
                                                             (line  147)
* mkoctfile:                             Getting Started with Oct-Files.
                                                             (line   16)
* mkoctfile <1>:                         Getting Started with Oct-Files.
                                                             (line   17)
* mkpp:                                  Polynomial Interpolation.
                                                             (line  277)
* mkpp <1>:                              Polynomial Interpolation.
                                                             (line  278)
* mkstemp:                               Temporary Files.    (line   11)
* mktime:                                Timing Utilities.   (line  139)
* mldivide:                              Arithmetic Ops.     (line  141)
* mlock:                                 Function Locking.   (line   50)
* mod:                                   Utility Functions.  (line  393)
* mode:                                  Descriptive Statistics.
                                                             (line   57)
* mode <1>:                              Descriptive Statistics.
                                                             (line   58)
* mode <2>:                              Descriptive Statistics.
                                                             (line   59)
* moment:                                Descriptive Statistics.
                                                             (line  251)
* moment <1>:                            Descriptive Statistics.
                                                             (line  252)
* moment <2>:                            Descriptive Statistics.
                                                             (line  253)
* moment <3>:                            Descriptive Statistics.
                                                             (line  254)
* moment <4>:                            Descriptive Statistics.
                                                             (line  255)
* more:                                  Paging Screen Output.
                                                             (line   24)
* more <1>:                              Paging Screen Output.
                                                             (line   25)
* more <2>:                              Paging Screen Output.
                                                             (line   26)
* mouse_wheel_zoom:                      Customizing Toolkit Behavior.
                                                             (line   40)
* mouse_wheel_zoom <1>:                  Customizing Toolkit Behavior.
                                                             (line   41)
* mouse_wheel_zoom <2>:                  Customizing Toolkit Behavior.
                                                             (line   42)
* movefile:                              Filesystem Utilities.
                                                             (line   11)
* movefile <1>:                          Filesystem Utilities.
                                                             (line   12)
* movefile <2>:                          Filesystem Utilities.
                                                             (line   13)
* movefile <3>:                          Filesystem Utilities.
                                                             (line   14)
* mpoles:                                Finding Roots.      (line   68)
* mpoles <1>:                            Finding Roots.      (line   69)
* mpoles <2>:                            Finding Roots.      (line   70)
* mpower:                                Arithmetic Ops.     (line  148)
* mput:                                  FTP Objects.        (line   53)
* mrdivide:                              Arithmetic Ops.     (line  156)
* msgbox:                                Dialog Box Functions.
                                                             (line    9)
* msgbox <1>:                            Dialog Box Functions.
                                                             (line   10)
* msgbox <2>:                            Dialog Box Functions.
                                                             (line   11)
* mtimes:                                Arithmetic Ops.     (line  163)
* mtimes <1>:                            Arithmetic Ops.     (line  164)
* mu2lin:                                Audio Processing.   (line   38)
* munlock:                               Function Locking.   (line   56)
* munlock <1>:                           Function Locking.   (line   57)
* NA:                                    Missing Data.       (line   11)
* NA <1>:                                Missing Data.       (line   12)
* NA <2>:                                Missing Data.       (line   13)
* NA <3>:                                Missing Data.       (line   14)
* NA <4>:                                Missing Data.       (line   15)
* namelengthmax:                         Variables.          (line  121)
* nan:                                   Mathematical Constants.
                                                             (line   93)
* NaN:                                   Mathematical Constants.
                                                             (line   93)
* NaN <1>:                               Mathematical Constants.
                                                             (line   94)
* NaN <2>:                               Mathematical Constants.
                                                             (line   95)
* NaN <3>:                               Mathematical Constants.
                                                             (line   96)
* NaN <4>:                               Mathematical Constants.
                                                             (line   97)
* nargchk:                               Multiple Return Values.
                                                             (line  163)
* nargchk <1>:                           Multiple Return Values.
                                                             (line  164)
* nargchk <2>:                           Multiple Return Values.
                                                             (line  165)
* nargin:                                Defining Functions. (line  145)
* nargin <1>:                            Defining Functions. (line  146)
* narginchk:                             Multiple Return Values.
                                                             (line  177)
* nargout:                               Multiple Return Values.
                                                             (line  113)
* nargout <1>:                           Multiple Return Values.
                                                             (line  114)
* nargoutchk:                            Multiple Return Values.
                                                             (line  192)
* nargoutchk <1>:                        Multiple Return Values.
                                                             (line  193)
* nargoutchk <2>:                        Multiple Return Values.
                                                             (line  194)
* nargoutchk <3>:                        Multiple Return Values.
                                                             (line  196)
* native_float_format:                   Simple File I/O.    (line  292)
* nbincdf:                               Distributions.      (line  318)
* nbininv:                               Distributions.      (line  329)
* nbinpdf:                               Distributions.      (line  307)
* nbinrnd:                               Random Number Generation.
                                                             (line  278)
* nbinrnd <1>:                           Random Number Generation.
                                                             (line  279)
* nbinrnd <2>:                           Random Number Generation.
                                                             (line  280)
* nbinrnd <3>:                           Random Number Generation.
                                                             (line  281)
* nchoosek:                              Basic Statistical Functions.
                                                             (line   62)
* nchoosek <1>:                          Basic Statistical Functions.
                                                             (line   63)
* ndgrid:                                Three-Dimensional Plots.
                                                             (line  693)
* ndgrid <1>:                            Three-Dimensional Plots.
                                                             (line  694)
* ndims:                                 Object Sizes.       (line   12)
* ndims <1>:                             Matrices and Arrays in Oct-Files.
                                                             (line   99)
* ne:                                    Comparison Ops.     (line   98)
* newplot:                               Manipulation of Plot Windows.
                                                             (line   48)
* newplot <1>:                           Manipulation of Plot Windows.
                                                             (line   49)
* newplot <2>:                           Manipulation of Plot Windows.
                                                             (line   50)
* newplot <3>:                           Manipulation of Plot Windows.
                                                             (line   51)
* news:                                  Getting Help.       (line   79)
* news <1>:                              Getting Help.       (line   80)
* nextpow2:                              Exponents and Logarithms.
                                                             (line   62)
* nfields:                               Manipulating Structures.
                                                             (line    9)
* nnz:                                   Information.        (line   27)
* nonzeros:                              Information.        (line   33)
* norm:                                  Basic Matrix Functions.
                                                             (line  258)
* norm <1>:                              Basic Matrix Functions.
                                                             (line  259)
* norm <2>:                              Basic Matrix Functions.
                                                             (line  260)
* normcdf:                               Distributions.      (line  348)
* normcdf <1>:                           Distributions.      (line  349)
* normest:                               Sparse Linear Algebra.
                                                             (line   89)
* normest <1>:                           Sparse Linear Algebra.
                                                             (line   90)
* normest <2>:                           Sparse Linear Algebra.
                                                             (line   91)
* norminv:                               Distributions.      (line  356)
* norminv <1>:                           Distributions.      (line  357)
* normpdf:                               Distributions.      (line  340)
* normpdf <1>:                           Distributions.      (line  341)
* normrnd:                               Random Number Generation.
                                                             (line  295)
* normrnd <1>:                           Random Number Generation.
                                                             (line  296)
* normrnd <2>:                           Random Number Generation.
                                                             (line  297)
* normrnd <3>:                           Random Number Generation.
                                                             (line  298)
* not:                                   Element-by-element Boolean Operators.
                                                             (line   77)
* now:                                   Timing Utilities.   (line   61)
* nproc:                                 System Information. (line   44)
* nproc <1>:                             System Information. (line   45)
* nthargout:                             Multiple Return Values.
                                                             (line   45)
* nthargout <1>:                         Multiple Return Values.
                                                             (line   46)
* nthroot:                               Exponents and Logarithms.
                                                             (line   97)
* nth_element:                           Rearranging Matrices.
                                                             (line  374)
* nth_element <1>:                       Rearranging Matrices.
                                                             (line  375)
* ntsc2rgb:                              Color Conversion.   (line   60)
* ntsc2rgb <1>:                          Color Conversion.   (line   61)
* null:                                  Basic Matrix Functions.
                                                             (line  309)
* null <1>:                              Basic Matrix Functions.
                                                             (line  310)
* num2cell:                              Creating Cell Arrays.
                                                             (line   62)
* num2cell <1>:                          Creating Cell Arrays.
                                                             (line   63)
* num2hex:                               String Conversions. (line  135)
* num2str:                               Converting Numerical Data to Strings.
                                                             (line   49)
* num2str <1>:                           Converting Numerical Data to Strings.
                                                             (line   50)
* num2str <2>:                           Converting Numerical Data to Strings.
                                                             (line   51)
* numel:                                 Object Sizes.       (line   37)
* numel <1>:                             Object Sizes.       (line   38)
* nzmax:                                 Information.        (line   38)
* ocean:                                 Representing Images.
                                                             (line  278)
* ocean <1>:                             Representing Images.
                                                             (line  279)
* octave_config_info:                    System Information. (line  232)
* octave_config_info <1>:                System Information. (line  233)
* octave_core_file_limit:                Saving Data on Unexpected Exits.
                                                             (line   71)
* octave_core_file_limit <1>:            Saving Data on Unexpected Exits.
                                                             (line   72)
* octave_core_file_limit <2>:            Saving Data on Unexpected Exits.
                                                             (line   73)
* octave_core_file_name:                 Saving Data on Unexpected Exits.
                                                             (line   93)
* octave_core_file_name <1>:             Saving Data on Unexpected Exits.
                                                             (line   94)
* octave_core_file_name <2>:             Saving Data on Unexpected Exits.
                                                             (line   95)
* octave_core_file_options:              Saving Data on Unexpected Exits.
                                                             (line   52)
* octave_core_file_options <1>:          Saving Data on Unexpected Exits.
                                                             (line   53)
* octave_core_file_options <2>:          Saving Data on Unexpected Exits.
                                                             (line   54)
* OCTAVE_HOME:                           System Information. (line   90)
* octave_idx_type:                       Matrices and Arrays in Oct-Files.
                                                             (line   90)
* octave_tmp_file_name:                  Temporary Files.    (line   44)
* OCTAVE_VERSION:                        System Information. (line  104)
* ols:                                   Linear Least Squares.
                                                             (line   13)
* onCleanup:                             Recovering From Errors.
                                                             (line   28)
* onenormest:                            Sparse Linear Algebra.
                                                             (line  101)
* onenormest <1>:                        Sparse Linear Algebra.
                                                             (line  102)
* ones:                                  Special Utility Matrices.
                                                             (line   42)
* ones <1>:                              Special Utility Matrices.
                                                             (line   43)
* ones <2>:                              Special Utility Matrices.
                                                             (line   44)
* ones <3>:                              Special Utility Matrices.
                                                             (line   45)
* ones <4>:                              Special Utility Matrices.
                                                             (line   46)
* operator:                              Matrices and Arrays in Oct-Files.
                                                             (line   77)
* optimget:                              Linear Least Squares.
                                                             (line  185)
* optimget <1>:                          Linear Least Squares.
                                                             (line  186)
* optimize_subsasgn_calls:               Defining Indexing And Indexed Assignment.
                                                             (line  120)
* optimize_subsasgn_calls <1>:           Defining Indexing And Indexed Assignment.
                                                             (line  121)
* optimize_subsasgn_calls <2>:           Defining Indexing And Indexed Assignment.
                                                             (line  122)
* optimset:                              Linear Least Squares.
                                                             (line  108)
* optimset <1>:                          Linear Least Squares.
                                                             (line  109)
* optimset <2>:                          Linear Least Squares.
                                                             (line  110)
* optimset <3>:                          Linear Least Squares.
                                                             (line  111)
* or:                                    Element-by-element Boolean Operators.
                                                             (line   82)
* or <1>:                                Element-by-element Boolean Operators.
                                                             (line   83)
* orderfields:                           Manipulating Structures.
                                                             (line  126)
* orderfields <1>:                       Manipulating Structures.
                                                             (line  127)
* orient:                                Printing and Saving Plots.
                                                             (line  302)
* orient <1>:                            Printing and Saving Plots.
                                                             (line  303)
* orient <2>:                            Printing and Saving Plots.
                                                             (line  304)
* orient <3>:                            Printing and Saving Plots.
                                                             (line  305)
* orth:                                  Basic Matrix Functions.
                                                             (line  321)
* orth <1>:                              Basic Matrix Functions.
                                                             (line  322)
* ostrsplit:                             Manipulating Strings.
                                                             (line  330)
* ostrsplit <1>:                         Manipulating Strings.
                                                             (line  331)
* output_max_field_width:                Matrices.           (line  130)
* output_max_field_width <1>:            Matrices.           (line  131)
* output_max_field_width <2>:            Matrices.           (line  132)
* output_precision:                      Matrices.           (line  145)
* output_precision <1>:                  Matrices.           (line  146)
* output_precision <2>:                  Matrices.           (line  147)
* pack:                                  Status of Variables.
                                                             (line  289)
* PAGER:                                 Paging Screen Output.
                                                             (line   35)
* PAGER <1>:                             Paging Screen Output.
                                                             (line   36)
* PAGER <2>:                             Paging Screen Output.
                                                             (line   37)
* PAGER_FLAGS:                           Paging Screen Output.
                                                             (line   52)
* PAGER_FLAGS <1>:                       Paging Screen Output.
                                                             (line   53)
* PAGER_FLAGS <2>:                       Paging Screen Output.
                                                             (line   54)
* page_output_immediately:               Paging Screen Output.
                                                             (line   85)
* page_output_immediately <1>:           Paging Screen Output.
                                                             (line   86)
* page_output_immediately <2>:           Paging Screen Output.
                                                             (line   87)
* page_screen_output:                    Paging Screen Output.
                                                             (line   67)
* page_screen_output <1>:                Paging Screen Output.
                                                             (line   68)
* page_screen_output <2>:                Paging Screen Output.
                                                             (line   69)
* pareto:                                Two-Dimensional Plots.
                                                             (line  787)
* pareto <1>:                            Two-Dimensional Plots.
                                                             (line  788)
* pareto <2>:                            Two-Dimensional Plots.
                                                             (line  789)
* pareto <3>:                            Two-Dimensional Plots.
                                                             (line  790)
* parseparams:                           Variable-length Argument Lists.
                                                             (line   63)
* parseparams <1>:                       Variable-length Argument Lists.
                                                             (line   64)
* pascal:                                Famous Matrices.    (line  385)
* pascal <1>:                            Famous Matrices.    (line  386)
* patch:                                 Graphics Objects.   (line   87)
* patch <1>:                             Graphics Objects.   (line   88)
* patch <2>:                             Graphics Objects.   (line   89)
* patch <3>:                             Graphics Objects.   (line   90)
* patch <4>:                             Graphics Objects.   (line   91)
* patch <5>:                             Graphics Objects.   (line   92)
* patch <6>:                             Graphics Objects.   (line   93)
* patch <7>:                             Graphics Objects.   (line   94)
* path:                                  Manipulating the Load Path.
                                                             (line   69)
* pathdef:                               Manipulating the Load Path.
                                                             (line   88)
* pathsep:                               Manipulating the Load Path.
                                                             (line  103)
* pathsep <1>:                           Manipulating the Load Path.
                                                             (line  104)
* pause:                                 Timing Utilities.   (line  428)
* pause <1>:                             Timing Utilities.   (line  429)
* pbaspect:                              Aspect Ratio.       (line   36)
* pbaspect <1>:                          Aspect Ratio.       (line   37)
* pbaspect <2>:                          Aspect Ratio.       (line   38)
* pbaspect <3>:                          Aspect Ratio.       (line   39)
* pbaspect <4>:                          Aspect Ratio.       (line   40)
* pcg:                                   Iterative Techniques.
                                                             (line   11)
* pcg <1>:                               Iterative Techniques.
                                                             (line   12)
* pchip:                                 Signal Processing.  (line  558)
* pchip <1>:                             Signal Processing.  (line  559)
* pclose:                                Controlling Subprocesses.
                                                             (line  129)
* pcolor:                                Two-Dimensional Plots.
                                                             (line 1486)
* pcolor <1>:                            Two-Dimensional Plots.
                                                             (line 1487)
* pcolor <2>:                            Two-Dimensional Plots.
                                                             (line 1488)
* pcolor <3>:                            Two-Dimensional Plots.
                                                             (line 1489)
* pcr:                                   Iterative Techniques.
                                                             (line  157)
* pcr <1>:                               Iterative Techniques.
                                                             (line  158)
* peaks:                                 Test Plotting Functions.
                                                             (line   33)
* peaks <1>:                             Test Plotting Functions.
                                                             (line   34)
* peaks <2>:                             Test Plotting Functions.
                                                             (line   35)
* peaks <3>:                             Test Plotting Functions.
                                                             (line   36)
* peaks <4>:                             Test Plotting Functions.
                                                             (line   37)
* periodogram:                           Signal Processing.  (line  581)
* perl:                                  Controlling Subprocesses.
                                                             (line   82)
* perl <1>:                              Controlling Subprocesses.
                                                             (line   83)
* perl <2>:                              Controlling Subprocesses.
                                                             (line   84)
* perms:                                 Basic Statistical Functions.
                                                             (line  106)
* permute:                               Rearranging Matrices.
                                                             (line  156)
* pi:                                    Mathematical Constants.
                                                             (line   26)
* pi <1>:                                Mathematical Constants.
                                                             (line   27)
* pi <2>:                                Mathematical Constants.
                                                             (line   28)
* pi <3>:                                Mathematical Constants.
                                                             (line   29)
* pi <4>:                                Mathematical Constants.
                                                             (line   30)
* pie:                                   Two-Dimensional Plots.
                                                             (line 1283)
* pie <1>:                               Two-Dimensional Plots.
                                                             (line 1284)
* pie <2>:                               Two-Dimensional Plots.
                                                             (line 1285)
* pie <3>:                               Two-Dimensional Plots.
                                                             (line 1286)
* pie <4>:                               Two-Dimensional Plots.
                                                             (line 1287)
* pie3:                                  Two-Dimensional Plots.
                                                             (line 1316)
* pie3 <1>:                              Two-Dimensional Plots.
                                                             (line 1317)
* pie3 <2>:                              Two-Dimensional Plots.
                                                             (line 1318)
* pie3 <3>:                              Two-Dimensional Plots.
                                                             (line 1319)
* pie3 <4>:                              Two-Dimensional Plots.
                                                             (line 1320)
* pink:                                  Representing Images.
                                                             (line  286)
* pink <1>:                              Representing Images.
                                                             (line  287)
* pinv:                                  Basic Matrix Functions.
                                                             (line  342)
* pinv <1>:                              Basic Matrix Functions.
                                                             (line  343)
* pipe:                                  Controlling Subprocesses.
                                                             (line  228)
* pkg:                                   Packages.           (line   22)
* pkg <1>:                               Installing and Removing Packages.
                                                             (line   57)
* pkg <2>:                               Installing and Removing Packages.
                                                             (line   58)
* planerot:                              Basic Matrix Functions.
                                                             (line  105)
* playaudio:                             Audio Processing.   (line   80)
* playaudio <1>:                         Audio Processing.   (line   81)
* plot:                                  Two-Dimensional Plots.
                                                             (line   26)
* plot <1>:                              Two-Dimensional Plots.
                                                             (line   27)
* plot <2>:                              Two-Dimensional Plots.
                                                             (line   28)
* plot <3>:                              Two-Dimensional Plots.
                                                             (line   29)
* plot <4>:                              Two-Dimensional Plots.
                                                             (line   30)
* plot <5>:                              Two-Dimensional Plots.
                                                             (line   31)
* plot <6>:                              Two-Dimensional Plots.
                                                             (line   32)
* plot3:                                 Three-Dimensional Plots.
                                                             (line  711)
* plot3 <1>:                             Three-Dimensional Plots.
                                                             (line  712)
* plot3 <2>:                             Three-Dimensional Plots.
                                                             (line  713)
* plot3 <3>:                             Three-Dimensional Plots.
                                                             (line  714)
* plot3 <4>:                             Three-Dimensional Plots.
                                                             (line  715)
* plot3 <5>:                             Three-Dimensional Plots.
                                                             (line  716)
* plot3 <6>:                             Three-Dimensional Plots.
                                                             (line  717)
* plotmatrix:                            Two-Dimensional Plots.
                                                             (line  748)
* plotmatrix <1>:                        Two-Dimensional Plots.
                                                             (line  749)
* plotmatrix <2>:                        Two-Dimensional Plots.
                                                             (line  750)
* plotmatrix <3>:                        Two-Dimensional Plots.
                                                             (line  751)
* plotmatrix <4>:                        Two-Dimensional Plots.
                                                             (line  752)
* plotyy:                                Two-Dimensional Plots.
                                                             (line  185)
* plotyy <1>:                            Two-Dimensional Plots.
                                                             (line  186)
* plotyy <2>:                            Two-Dimensional Plots.
                                                             (line  187)
* plotyy <3>:                            Two-Dimensional Plots.
                                                             (line  188)
* plotyy <4>:                            Two-Dimensional Plots.
                                                             (line  189)
* plus:                                  Arithmetic Ops.     (line  179)
* plus <1>:                              Arithmetic Ops.     (line  180)
* poisscdf:                              Distributions.      (line  368)
* poissinv:                              Distributions.      (line  372)
* poisspdf:                              Distributions.      (line  364)
* poissrnd:                              Random Number Generation.
                                                             (line  312)
* poissrnd <1>:                          Random Number Generation.
                                                             (line  313)
* poissrnd <2>:                          Random Number Generation.
                                                             (line  314)
* poissrnd <3>:                          Random Number Generation.
                                                             (line  315)
* pol2cart:                              Coordinate Transformations.
                                                             (line   28)
* pol2cart <1>:                          Coordinate Transformations.
                                                             (line   29)
* pol2cart <2>:                          Coordinate Transformations.
                                                             (line   30)
* pol2cart <3>:                          Coordinate Transformations.
                                                             (line   31)
* pol2cart <4>:                          Coordinate Transformations.
                                                             (line   32)
* polar:                                 Two-Dimensional Plots.
                                                             (line 1260)
* polar <1>:                             Two-Dimensional Plots.
                                                             (line 1261)
* polar <2>:                             Two-Dimensional Plots.
                                                             (line 1262)
* polar <3>:                             Two-Dimensional Plots.
                                                             (line 1263)
* polar <4>:                             Two-Dimensional Plots.
                                                             (line 1264)
* polar <5>:                             Two-Dimensional Plots.
                                                             (line 1265)
* poly:                                  Miscellaneous Functions.
                                                             (line    6)
* poly <1>:                              Miscellaneous Functions.
                                                             (line    7)
* polyaffine:                            Derivatives / Integrals / Transforms.
                                                             (line   37)
* polyarea:                              Voronoi Diagrams.   (line   90)
* polyarea <1>:                          Voronoi Diagrams.   (line   91)
* polyder:                               Derivatives / Integrals / Transforms.
                                                             (line   16)
* polyder <1>:                           Derivatives / Integrals / Transforms.
                                                             (line   17)
* polyder <2>:                           Derivatives / Integrals / Transforms.
                                                             (line   18)
* polyeig:                               Finding Roots.      (line   33)
* polyeig <1>:                           Finding Roots.      (line   34)
* polyfit:                               Polynomial Interpolation.
                                                             (line   15)
* polyfit <1>:                           Polynomial Interpolation.
                                                             (line   16)
* polyfit <2>:                           Polynomial Interpolation.
                                                             (line   17)
* polygcd:                               Products of Polynomials.
                                                             (line   84)
* polygcd <1>:                           Products of Polynomials.
                                                             (line   85)
* polyint:                               Derivatives / Integrals / Transforms.
                                                             (line   29)
* polyint <1>:                           Derivatives / Integrals / Transforms.
                                                             (line   30)
* polyout:                               Miscellaneous Functions.
                                                             (line   30)
* polyout <1>:                           Miscellaneous Functions.
                                                             (line   31)
* polyout <2>:                           Miscellaneous Functions.
                                                             (line   32)
* polyreduce:                            Miscellaneous Functions.
                                                             (line   42)
* polyval:                               Evaluating Polynomials.
                                                             (line   23)
* polyval <1>:                           Evaluating Polynomials.
                                                             (line   24)
* polyval <2>:                           Evaluating Polynomials.
                                                             (line   25)
* polyval <3>:                           Evaluating Polynomials.
                                                             (line   26)
* polyvalm:                              Evaluating Polynomials.
                                                             (line   43)
* popen:                                 Controlling Subprocesses.
                                                             (line  104)
* popen2:                                Controlling Subprocesses.
                                                             (line  133)
* postpad:                               Rearranging Matrices.
                                                             (line  472)
* postpad <1>:                           Rearranging Matrices.
                                                             (line  473)
* postpad <2>:                           Rearranging Matrices.
                                                             (line  474)
* pow2:                                  Exponents and Logarithms.
                                                             (line   54)
* pow2 <1>:                              Exponents and Logarithms.
                                                             (line   55)
* power:                                 Arithmetic Ops.     (line  190)
* powerset:                              Set Operations.     (line  122)
* powerset <1>:                          Set Operations.     (line  123)
* ppder:                                 Polynomial Interpolation.
                                                             (line  338)
* ppder <1>:                             Polynomial Interpolation.
                                                             (line  339)
* ppint:                                 Polynomial Interpolation.
                                                             (line  346)
* ppint <1>:                             Polynomial Interpolation.
                                                             (line  347)
* ppjumps:                               Polynomial Interpolation.
                                                             (line  354)
* ppplot:                                Statistical Plots.  (line   43)
* ppval:                                 Polynomial Interpolation.
                                                             (line  328)
* pqpnonneg:                             Quadratic Programming.
                                                             (line   75)
* pqpnonneg <1>:                         Quadratic Programming.
                                                             (line   76)
* pqpnonneg <2>:                         Quadratic Programming.
                                                             (line   77)
* pqpnonneg <3>:                         Quadratic Programming.
                                                             (line   78)
* pqpnonneg <4>:                         Quadratic Programming.
                                                             (line   79)
* pqpnonneg <5>:                         Quadratic Programming.
                                                             (line   80)
* prctile:                               Descriptive Statistics.
                                                             (line  373)
* prctile <1>:                           Descriptive Statistics.
                                                             (line  374)
* prctile <2>:                           Descriptive Statistics.
                                                             (line  375)
* prefdir:                               User-Defined Preferences.
                                                             (line   90)
* prefdir <1>:                           User-Defined Preferences.
                                                             (line   91)
* preferences:                           User-Defined Preferences.
                                                             (line  108)
* prepad:                                Rearranging Matrices.
                                                             (line  455)
* prepad <1>:                            Rearranging Matrices.
                                                             (line  456)
* prepad <2>:                            Rearranging Matrices.
                                                             (line  457)
* primes:                                Utility Functions.  (line  408)
* print:                                 Printing and Saving Plots.
                                                             (line   18)
* print <1>:                             Printing and Saving Plots.
                                                             (line   19)
* print <2>:                             Printing and Saving Plots.
                                                             (line   20)
* print <3>:                             Printing and Saving Plots.
                                                             (line   21)
* printd:                                Two-Dimensional Plots.
                                                             (line  523)
* printd <1>:                            Two-Dimensional Plots.
                                                             (line  524)
* printf:                                Formatted Output.   (line   13)
* print_empty_dimensions:                Empty Matrices.     (line   29)
* print_empty_dimensions <1>:            Empty Matrices.     (line   30)
* print_empty_dimensions <2>:            Empty Matrices.     (line   31)
* print_struct_array_contents:           Basic Usage and Examples.
                                                             (line  110)
* print_struct_array_contents <1>:       Basic Usage and Examples.
                                                             (line  111)
* print_struct_array_contents <2>:       Basic Usage and Examples.
                                                             (line  112)
* print_usage:                           Raising Errors.     (line  126)
* print_usage <1>:                       Raising Errors.     (line  127)
* prism:                                 Representing Images.
                                                             (line  295)
* prism <1>:                             Representing Images.
                                                             (line  296)
* probit:                                Basic Statistical Functions.
                                                             (line  142)
* prod:                                  Sums and Products.  (line   34)
* prod <1>:                              Sums and Products.  (line   35)
* profexplore:                           Profiling.          (line   96)
* profexplore <1>:                       Profiling.          (line   97)
* profile:                               Profiling.          (line   20)
* profile <1>:                           Profiling.          (line   21)
* profile <2>:                           Profiling.          (line   22)
* profile <3>:                           Profiling.          (line   23)
* profile <4>:                           Profiling.          (line   24)
* profile <5>:                           Profiling.          (line   25)
* profshow:                              Profiling.          (line   79)
* profshow <1>:                          Profiling.          (line   80)
* program_invocation_name:               Command Line Options.
                                                             (line  207)
* program_name:                          Command Line Options.
                                                             (line  200)
* prop_test_2:                           Tests.              (line  299)
* PS1:                                   Customizing the Prompt.
                                                             (line   56)
* PS1 <1>:                               Customizing the Prompt.
                                                             (line   57)
* PS1 <2>:                               Customizing the Prompt.
                                                             (line   58)
* PS2:                                   Customizing the Prompt.
                                                             (line   87)
* PS2 <1>:                               Customizing the Prompt.
                                                             (line   88)
* PS2 <2>:                               Customizing the Prompt.
                                                             (line   89)
* PS4:                                   Customizing the Prompt.
                                                             (line  104)
* PS4 <1>:                               Customizing the Prompt.
                                                             (line  105)
* PS4 <2>:                               Customizing the Prompt.
                                                             (line  106)
* putenv:                                Environment Variables.
                                                             (line   13)
* puts:                                  Simple Output.      (line   28)
* pwd:                                   Current Working Directory.
                                                             (line  109)
* pwd <1>:                               Current Working Directory.
                                                             (line  110)
* python:                                Controlling Subprocesses.
                                                             (line   92)
* python <1>:                            Controlling Subprocesses.
                                                             (line   93)
* python <2>:                            Controlling Subprocesses.
                                                             (line   95)
* P_tmpdir:                              Filesystem Utilities.
                                                             (line  537)
* qp:                                    Quadratic Programming.
                                                             (line   16)
* qp <1>:                                Quadratic Programming.
                                                             (line   17)
* qp <2>:                                Quadratic Programming.
                                                             (line   18)
* qp <3>:                                Quadratic Programming.
                                                             (line   19)
* qp <4>:                                Quadratic Programming.
                                                             (line   20)
* qp <5>:                                Quadratic Programming.
                                                             (line   22)
* qqplot:                                Statistical Plots.  (line   13)
* qqplot <1>:                            Statistical Plots.  (line   14)
* qqplot <2>:                            Statistical Plots.  (line   15)
* qqplot <3>:                            Statistical Plots.  (line   16)
* qqplot <4>:                            Statistical Plots.  (line   17)
* qr:                                    Matrix Factorizations.
                                                             (line  257)
* qr <1>:                                Matrix Factorizations.
                                                             (line  258)
* qr <2>:                                Matrix Factorizations.
                                                             (line  259)
* qr <3>:                                Matrix Factorizations.
                                                             (line  260)
* qrdelete:                              Matrix Factorizations.
                                                             (line  379)
* qrinsert:                              Matrix Factorizations.
                                                             (line  356)
* qrshift:                               Matrix Factorizations.
                                                             (line  403)
* qrupdate:                              Matrix Factorizations.
                                                             (line  341)
* quad:                                  Functions of One Variable.
                                                             (line   96)
* quad <1>:                              Functions of One Variable.
                                                             (line   97)
* quad <2>:                              Functions of One Variable.
                                                             (line   98)
* quad <3>:                              Functions of One Variable.
                                                             (line   99)
* quadcc:                                Functions of One Variable.
                                                             (line  338)
* quadcc <1>:                            Functions of One Variable.
                                                             (line  339)
* quadcc <2>:                            Functions of One Variable.
                                                             (line  340)
* quadcc <3>:                            Functions of One Variable.
                                                             (line  341)
* quadgk:                                Functions of One Variable.
                                                             (line  245)
* quadgk <1>:                            Functions of One Variable.
                                                             (line  246)
* quadgk <2>:                            Functions of One Variable.
                                                             (line  247)
* quadgk <3>:                            Functions of One Variable.
                                                             (line  248)
* quadgk <4>:                            Functions of One Variable.
                                                             (line  249)
* quadl:                                 Functions of One Variable.
                                                             (line  209)
* quadl <1>:                             Functions of One Variable.
                                                             (line  210)
* quadl <2>:                             Functions of One Variable.
                                                             (line  211)
* quadl <3>:                             Functions of One Variable.
                                                             (line  212)
* quadv:                                 Functions of One Variable.
                                                             (line  166)
* quadv <1>:                             Functions of One Variable.
                                                             (line  167)
* quadv <2>:                             Functions of One Variable.
                                                             (line  168)
* quadv <3>:                             Functions of One Variable.
                                                             (line  169)
* quadv <4>:                             Functions of One Variable.
                                                             (line  170)
* quad_options:                          Functions of One Variable.
                                                             (line  137)
* quad_options <1>:                      Functions of One Variable.
                                                             (line  138)
* quad_options <2>:                      Functions of One Variable.
                                                             (line  139)
* quantile:                              Descriptive Statistics.
                                                             (line  295)
* quantile <1>:                          Descriptive Statistics.
                                                             (line  296)
* quantile <2>:                          Descriptive Statistics.
                                                             (line  297)
* quantile <3>:                          Descriptive Statistics.
                                                             (line  298)
* questdlg:                              Dialog Box Functions.
                                                             (line  156)
* questdlg <1>:                          Dialog Box Functions.
                                                             (line  157)
* questdlg <2>:                          Dialog Box Functions.
                                                             (line  158)
* questdlg <3>:                          Dialog Box Functions.
                                                             (line  159)
* questdlg <4>:                          Dialog Box Functions.
                                                             (line  160)
* quit:                                  Quitting Octave.    (line    7)
* quiver:                                Two-Dimensional Plots.
                                                             (line 1349)
* quiver <1>:                            Two-Dimensional Plots.
                                                             (line 1350)
* quiver <2>:                            Two-Dimensional Plots.
                                                             (line 1351)
* quiver <3>:                            Two-Dimensional Plots.
                                                             (line 1352)
* quiver <4>:                            Two-Dimensional Plots.
                                                             (line 1353)
* quiver <5>:                            Two-Dimensional Plots.
                                                             (line 1354)
* quiver <6>:                            Two-Dimensional Plots.
                                                             (line 1355)
* quiver3:                               Two-Dimensional Plots.
                                                             (line 1389)
* quiver3 <1>:                           Two-Dimensional Plots.
                                                             (line 1390)
* quiver3 <2>:                           Two-Dimensional Plots.
                                                             (line 1391)
* quiver3 <3>:                           Two-Dimensional Plots.
                                                             (line 1392)
* quiver3 <4>:                           Two-Dimensional Plots.
                                                             (line 1393)
* quiver3 <5>:                           Two-Dimensional Plots.
                                                             (line 1394)
* quiver3 <6>:                           Two-Dimensional Plots.
                                                             (line 1395)
* qz:                                    Matrix Factorizations.
                                                             (line  415)
* qz <1>:                                Matrix Factorizations.
                                                             (line  416)
* qzhess:                                Matrix Factorizations.
                                                             (line  475)
* rainbow:                               Representing Images.
                                                             (line  304)
* rainbow <1>:                           Representing Images.
                                                             (line  305)
* rand:                                  Special Utility Matrices.
                                                             (line  150)
* rand <1>:                              Special Utility Matrices.
                                                             (line  151)
* rand <2>:                              Special Utility Matrices.
                                                             (line  152)
* rand <3>:                              Special Utility Matrices.
                                                             (line  153)
* rand <4>:                              Special Utility Matrices.
                                                             (line  154)
* rand <5>:                              Special Utility Matrices.
                                                             (line  155)
* rand <6>:                              Special Utility Matrices.
                                                             (line  156)
* rand <7>:                              Special Utility Matrices.
                                                             (line  157)
* rand <8>:                              Special Utility Matrices.
                                                             (line  158)
* rand <9>:                              Special Utility Matrices.
                                                             (line  159)
* rand <10>:                             Special Utility Matrices.
                                                             (line  160)
* rande:                                 Special Utility Matrices.
                                                             (line  286)
* rande <1>:                             Special Utility Matrices.
                                                             (line  287)
* rande <2>:                             Special Utility Matrices.
                                                             (line  288)
* rande <3>:                             Special Utility Matrices.
                                                             (line  289)
* rande <4>:                             Special Utility Matrices.
                                                             (line  290)
* rande <5>:                             Special Utility Matrices.
                                                             (line  291)
* rande <6>:                             Special Utility Matrices.
                                                             (line  292)
* rande <7>:                             Special Utility Matrices.
                                                             (line  293)
* rande <8>:                             Special Utility Matrices.
                                                             (line  294)
* rande <9>:                             Special Utility Matrices.
                                                             (line  295)
* rande <10>:                            Special Utility Matrices.
                                                             (line  296)
* randg:                                 Special Utility Matrices.
                                                             (line  360)
* randg <1>:                             Special Utility Matrices.
                                                             (line  361)
* randg <2>:                             Special Utility Matrices.
                                                             (line  362)
* randg <3>:                             Special Utility Matrices.
                                                             (line  363)
* randg <4>:                             Special Utility Matrices.
                                                             (line  364)
* randg <5>:                             Special Utility Matrices.
                                                             (line  365)
* randg <6>:                             Special Utility Matrices.
                                                             (line  366)
* randg <7>:                             Special Utility Matrices.
                                                             (line  367)
* randg <8>:                             Special Utility Matrices.
                                                             (line  368)
* randg <9>:                             Special Utility Matrices.
                                                             (line  369)
* randg <10>:                            Special Utility Matrices.
                                                             (line  370)
* randi:                                 Special Utility Matrices.
                                                             (line  226)
* randi <1>:                             Special Utility Matrices.
                                                             (line  227)
* randi <2>:                             Special Utility Matrices.
                                                             (line  228)
* randi <3>:                             Special Utility Matrices.
                                                             (line  229)
* randi <4>:                             Special Utility Matrices.
                                                             (line  230)
* randn:                                 Special Utility Matrices.
                                                             (line  258)
* randn <1>:                             Special Utility Matrices.
                                                             (line  259)
* randn <2>:                             Special Utility Matrices.
                                                             (line  260)
* randn <3>:                             Special Utility Matrices.
                                                             (line  261)
* randn <4>:                             Special Utility Matrices.
                                                             (line  262)
* randn <5>:                             Special Utility Matrices.
                                                             (line  263)
* randn <6>:                             Special Utility Matrices.
                                                             (line  264)
* randn <7>:                             Special Utility Matrices.
                                                             (line  265)
* randn <8>:                             Special Utility Matrices.
                                                             (line  266)
* randn <9>:                             Special Utility Matrices.
                                                             (line  267)
* randn <10>:                            Special Utility Matrices.
                                                             (line  268)
* randp:                                 Special Utility Matrices.
                                                             (line  314)
* randp <1>:                             Special Utility Matrices.
                                                             (line  315)
* randp <2>:                             Special Utility Matrices.
                                                             (line  316)
* randp <3>:                             Special Utility Matrices.
                                                             (line  317)
* randp <4>:                             Special Utility Matrices.
                                                             (line  318)
* randp <5>:                             Special Utility Matrices.
                                                             (line  319)
* randp <6>:                             Special Utility Matrices.
                                                             (line  320)
* randp <7>:                             Special Utility Matrices.
                                                             (line  321)
* randp <8>:                             Special Utility Matrices.
                                                             (line  322)
* randp <9>:                             Special Utility Matrices.
                                                             (line  323)
* randp <10>:                            Special Utility Matrices.
                                                             (line  324)
* randperm:                              Special Utility Matrices.
                                                             (line  472)
* randperm <1>:                          Special Utility Matrices.
                                                             (line  473)
* range:                                 Descriptive Statistics.
                                                             (line   80)
* range <1>:                             Descriptive Statistics.
                                                             (line   81)
* rank:                                  Basic Matrix Functions.
                                                             (line  353)
* rank <1>:                              Basic Matrix Functions.
                                                             (line  354)
* ranks:                                 Basic Statistical Functions.
                                                             (line  120)
* rat:                                   Rational Approximations.
                                                             (line    6)
* rat <1>:                               Rational Approximations.
                                                             (line    7)
* rats:                                  Rational Approximations.
                                                             (line   21)
* rcond:                                 Basic Matrix Functions.
                                                             (line  386)
* rdivide:                               Arithmetic Ops.     (line  202)
* readdir:                               Filesystem Utilities.
                                                             (line  358)
* readdir <1>:                           Filesystem Utilities.
                                                             (line  359)
* readline_read_init_file:               Customizing readline.
                                                             (line   15)
* readline_re_read_init_file:            Customizing readline.
                                                             (line   25)
* readlink:                              Filesystem Utilities.
                                                             (line   89)
* readlink <1>:                          Filesystem Utilities.
                                                             (line   90)
* real:                                  Complex Arithmetic. (line   58)
* reallog:                               Exponents and Logarithms.
                                                             (line   24)
* realmax:                               Mathematical Constants.
                                                             (line  143)
* realmax <1>:                           Mathematical Constants.
                                                             (line  144)
* realmax <2>:                           Mathematical Constants.
                                                             (line  145)
* realmax <3>:                           Mathematical Constants.
                                                             (line  146)
* realmax <4>:                           Mathematical Constants.
                                                             (line  147)
* realmin:                               Mathematical Constants.
                                                             (line  166)
* realmin <1>:                           Mathematical Constants.
                                                             (line  167)
* realmin <2>:                           Mathematical Constants.
                                                             (line  168)
* realmin <3>:                           Mathematical Constants.
                                                             (line  169)
* realmin <4>:                           Mathematical Constants.
                                                             (line  170)
* realpow:                               Exponents and Logarithms.
                                                             (line   70)
* realsqrt:                              Exponents and Logarithms.
                                                             (line   84)
* record:                                Audio Processing.   (line   89)
* rectangle:                             Two-dimensional Geometric Shapes.
                                                             (line    6)
* rectangle <1>:                         Two-dimensional Geometric Shapes.
                                                             (line    7)
* rectangle <2>:                         Two-dimensional Geometric Shapes.
                                                             (line    8)
* rectangle <3>:                         Two-dimensional Geometric Shapes.
                                                             (line    9)
* rectangle <4>:                         Two-dimensional Geometric Shapes.
                                                             (line   10)
* rectangle <5>:                         Two-dimensional Geometric Shapes.
                                                             (line   11)
* rectangle <6>:                         Two-dimensional Geometric Shapes.
                                                             (line   12)
* rectint:                               Voronoi Diagrams.   (line  117)
* recycle:                               Filesystem Utilities.
                                                             (line  551)
* recycle <1>:                           Filesystem Utilities.
                                                             (line  552)
* refresh:                               Manipulation of Plot Windows.
                                                             (line   23)
* refresh <1>:                           Manipulation of Plot Windows.
                                                             (line   24)
* refreshdata:                           Data Sources in Object Groups.
                                                             (line   11)
* refreshdata <1>:                       Data Sources in Object Groups.
                                                             (line   12)
* refreshdata <2>:                       Data Sources in Object Groups.
                                                             (line   13)
* regexp:                                Manipulating Strings.
                                                             (line  542)
* regexp <1>:                            Manipulating Strings.
                                                             (line  543)
* regexpi:                               Manipulating Strings.
                                                             (line  737)
* regexpi <1>:                           Manipulating Strings.
                                                             (line  738)
* regexprep:                             Manipulating Strings.
                                                             (line  747)
* regexprep <1>:                         Manipulating Strings.
                                                             (line  748)
* regexptranslate:                       Manipulating Strings.
                                                             (line  779)
* register_graphics_toolkit:             Graphics Toolkits.  (line   38)
* rehash:                                Manipulating the Load Path.
                                                             (line  109)
* rem:                                   Utility Functions.  (line  381)
* remove_input_event_hook:               Parser.             (line   33)
* remove_input_event_hook <1>:           Parser.             (line   34)
* rename:                                Filesystem Utilities.
                                                             (line   34)
* rename <1>:                            Filesystem Utilities.
                                                             (line   35)
* rename <2>:                            FTP Objects.        (line   99)
* repelems:                              Special Utility Matrices.
                                                             (line   95)
* repmat:                                Special Utility Matrices.
                                                             (line   83)
* repmat <1>:                            Special Utility Matrices.
                                                             (line   84)
* repmat <2>:                            Special Utility Matrices.
                                                             (line   85)
* repmat <3>:                            Special Utility Matrices.
                                                             (line   86)
* reset:                                 Managing Default Properties.
                                                             (line   59)
* reshape:                               Rearranging Matrices.
                                                             (line  172)
* reshape <1>:                           Rearranging Matrices.
                                                             (line  173)
* reshape <2>:                           Rearranging Matrices.
                                                             (line  174)
* reshape <3>:                           Rearranging Matrices.
                                                             (line  175)
* residue:                               Products of Polynomials.
                                                             (line  105)
* residue <1>:                           Products of Polynomials.
                                                             (line  106)
* residue <2>:                           Products of Polynomials.
                                                             (line  107)
* resize:                                Rearranging Matrices.
                                                             (line  200)
* resize <1>:                            Rearranging Matrices.
                                                             (line  201)
* resize <2>:                            Rearranging Matrices.
                                                             (line  202)
* resize <3>:                            Matrices and Arrays in Oct-Files.
                                                             (line  103)
* restoredefaultpath:                    Manipulating the Load Path.
                                                             (line  130)
* rethrow:                               Catching Errors.    (line  176)
* return:                                Returning from a Function.
                                                             (line   37)
* rgb2hsv:                               Color Conversion.   (line    9)
* rgb2hsv <1>:                           Color Conversion.   (line   10)
* rgb2ind:                               Representing Images.
                                                             (line   72)
* rgb2ind <1>:                           Representing Images.
                                                             (line   73)
* rgb2ntsc:                              Color Conversion.   (line   41)
* rgb2ntsc <1>:                          Color Conversion.   (line   42)
* rgbplot:                               Representing Images.
                                                             (line  151)
* rgbplot <1>:                           Representing Images.
                                                             (line  152)
* rgbplot <2>:                           Representing Images.
                                                             (line  153)
* ribbon:                                Three-Dimensional Plots.
                                                             (line  858)
* ribbon <1>:                            Three-Dimensional Plots.
                                                             (line  859)
* ribbon <2>:                            Three-Dimensional Plots.
                                                             (line  860)
* ribbon <3>:                            Three-Dimensional Plots.
                                                             (line  861)
* ribbon <4>:                            Three-Dimensional Plots.
                                                             (line  862)
* rindex:                                Manipulating Strings.
                                                             (line  103)
* rmappdata:                             Application-defined Data.
                                                             (line   32)
* rmdir:                                 Filesystem Utilities.
                                                             (line  116)
* rmdir <1>:                             Filesystem Utilities.
                                                             (line  117)
* rmdir <2>:                             Filesystem Utilities.
                                                             (line  118)
* rmdir <3>:                             FTP Objects.        (line  110)
* rmfield:                               Manipulating Structures.
                                                             (line  117)
* rmfield <1>:                           Manipulating Structures.
                                                             (line  118)
* rmpath:                                Manipulating the Load Path.
                                                             (line   44)
* rmpref:                                User-Defined Preferences.
                                                             (line   59)
* rmpref <1>:                            User-Defined Preferences.
                                                             (line   60)
* roots:                                 Finding Roots.      (line   10)
* rose:                                  Two-Dimensional Plots.
                                                             (line  829)
* rose <1>:                              Two-Dimensional Plots.
                                                             (line  830)
* rose <2>:                              Two-Dimensional Plots.
                                                             (line  831)
* rose <3>:                              Two-Dimensional Plots.
                                                             (line  832)
* rose <4>:                              Two-Dimensional Plots.
                                                             (line  833)
* rose <5>:                              Two-Dimensional Plots.
                                                             (line  834)
* rosser:                                Famous Matrices.    (line  399)
* rot90:                                 Rearranging Matrices.
                                                             (line   48)
* rot90 <1>:                             Rearranging Matrices.
                                                             (line   49)
* rotdim:                                Rearranging Matrices.
                                                             (line   73)
* rotdim <1>:                            Rearranging Matrices.
                                                             (line   74)
* rotdim <2>:                            Rearranging Matrices.
                                                             (line   75)
* round:                                 Utility Functions.  (line   39)
* roundb:                                Utility Functions.  (line   50)
* rows:                                  Object Sizes.       (line   29)
* rref:                                  Basic Matrix Functions.
                                                             (line  405)
* rref <1>:                              Basic Matrix Functions.
                                                             (line  406)
* rref <2>:                              Basic Matrix Functions.
                                                             (line  407)
* rsf2csf:                               Matrix Factorizations.
                                                             (line  535)
* run:                                   Calling a Function by its Name.
                                                             (line   79)
* run <1>:                               Calling a Function by its Name.
                                                             (line   80)
* rundemos:                              Demonstration Functions.
                                                             (line   82)
* rundemos <1>:                          Demonstration Functions.
                                                             (line   83)
* runlength:                             Basic Statistical Functions.
                                                             (line  135)
* runtests:                              Demonstration Functions.
                                                             (line   93)
* runtests <1>:                          Demonstration Functions.
                                                             (line   94)
* run_count:                             Basic Statistical Functions.
                                                             (line  127)
* run_count <1>:                         Basic Statistical Functions.
                                                             (line  128)
* run_history:                           Commands For History.
                                                             (line  115)
* run_history <1>:                       Commands For History.
                                                             (line  116)
* run_history <2>:                       Commands For History.
                                                             (line  117)
* run_test:                              Tests.              (line  318)
* save:                                  Simple File I/O.    (line   28)
* save <1>:                              Simple File I/O.    (line   29)
* save <2>:                              Simple File I/O.    (line   30)
* save <3>:                              Simple File I/O.    (line   31)
* saveas:                                Printing and Saving Plots.
                                                             (line  268)
* saveas <1>:                            Printing and Saving Plots.
                                                             (line  269)
* saveaudio:                             Audio Processing.   (line   62)
* saveobj:                               Manipulating Classes.
                                                             (line  141)
* savepath:                              Manipulating the Load Path.
                                                             (line   57)
* savepath <1>:                          Manipulating the Load Path.
                                                             (line   58)
* savepath <2>:                          Manipulating the Load Path.
                                                             (line   59)
* save_default_options:                  Simple File I/O.    (line  146)
* save_default_options <1>:              Simple File I/O.    (line  147)
* save_default_options <2>:              Simple File I/O.    (line  148)
* save_header_format_string:             Simple File I/O.    (line  172)
* save_header_format_string <1>:         Simple File I/O.    (line  173)
* save_header_format_string <2>:         Simple File I/O.    (line  174)
* save_precision:                        Simple File I/O.    (line  161)
* save_precision <1>:                    Simple File I/O.    (line  162)
* save_precision <2>:                    Simple File I/O.    (line  163)
* scanf:                                 Formatted Input.    (line   60)
* scanf <1>:                             Formatted Input.    (line   61)
* scatter:                               Two-Dimensional Plots.
                                                             (line  702)
* scatter <1>:                           Two-Dimensional Plots.
                                                             (line  703)
* scatter <2>:                           Two-Dimensional Plots.
                                                             (line  704)
* scatter <3>:                           Two-Dimensional Plots.
                                                             (line  705)
* scatter <4>:                           Two-Dimensional Plots.
                                                             (line  706)
* scatter <5>:                           Two-Dimensional Plots.
                                                             (line  707)
* scatter <6>:                           Two-Dimensional Plots.
                                                             (line  708)
* scatter <7>:                           Two-Dimensional Plots.
                                                             (line  709)
* scatter3:                              Three-Dimensional Plots.
                                                             (line  901)
* scatter3 <1>:                          Three-Dimensional Plots.
                                                             (line  902)
* scatter3 <2>:                          Three-Dimensional Plots.
                                                             (line  903)
* scatter3 <3>:                          Three-Dimensional Plots.
                                                             (line  904)
* scatter3 <4>:                          Three-Dimensional Plots.
                                                             (line  905)
* scatter3 <5>:                          Three-Dimensional Plots.
                                                             (line  906)
* scatter3 <6>:                          Three-Dimensional Plots.
                                                             (line  907)
* scatter3 <7>:                          Three-Dimensional Plots.
                                                             (line  908)
* schur:                                 Matrix Factorizations.
                                                             (line  497)
* schur <1>:                             Matrix Factorizations.
                                                             (line  498)
* schur <2>:                             Matrix Factorizations.
                                                             (line  499)
* schur <3>:                             Matrix Factorizations.
                                                             (line  500)
* schur <4>:                             Matrix Factorizations.
                                                             (line  501)
* sec:                                   Trigonometry.       (line   47)
* secd:                                  Trigonometry.       (line  194)
* sech:                                  Trigonometry.       (line  113)
* SEEK_CUR:                              File Positioning.   (line   36)
* SEEK_END:                              File Positioning.   (line   37)
* SEEK_SET:                              File Positioning.   (line   35)
* semilogx:                              Two-Dimensional Plots.
                                                             (line  225)
* semilogx <1>:                          Two-Dimensional Plots.
                                                             (line  226)
* semilogx <2>:                          Two-Dimensional Plots.
                                                             (line  227)
* semilogx <3>:                          Two-Dimensional Plots.
                                                             (line  228)
* semilogx <4>:                          Two-Dimensional Plots.
                                                             (line  229)
* semilogx <5>:                          Two-Dimensional Plots.
                                                             (line  230)
* semilogxerr:                           Two-Dimensional Plots.
                                                             (line 1162)
* semilogxerr <1>:                       Two-Dimensional Plots.
                                                             (line 1163)
* semilogxerr <2>:                       Two-Dimensional Plots.
                                                             (line 1164)
* semilogxerr <3>:                       Two-Dimensional Plots.
                                                             (line 1165)
* semilogxerr <4>:                       Two-Dimensional Plots.
                                                             (line 1166)
* semilogxerr <5>:                       Two-Dimensional Plots.
                                                             (line 1167)
* semilogxerr <6>:                       Two-Dimensional Plots.
                                                             (line 1168)
* semilogxerr <7>:                       Two-Dimensional Plots.
                                                             (line 1169)
* semilogxerr <8>:                       Two-Dimensional Plots.
                                                             (line 1170)
* semilogxerr <9>:                       Two-Dimensional Plots.
                                                             (line 1171)
* semilogy:                              Two-Dimensional Plots.
                                                             (line  245)
* semilogy <1>:                          Two-Dimensional Plots.
                                                             (line  246)
* semilogy <2>:                          Two-Dimensional Plots.
                                                             (line  247)
* semilogy <3>:                          Two-Dimensional Plots.
                                                             (line  248)
* semilogy <4>:                          Two-Dimensional Plots.
                                                             (line  249)
* semilogy <5>:                          Two-Dimensional Plots.
                                                             (line  250)
* semilogyerr:                           Two-Dimensional Plots.
                                                             (line 1191)
* semilogyerr <1>:                       Two-Dimensional Plots.
                                                             (line 1192)
* semilogyerr <2>:                       Two-Dimensional Plots.
                                                             (line 1193)
* semilogyerr <3>:                       Two-Dimensional Plots.
                                                             (line 1194)
* semilogyerr <4>:                       Two-Dimensional Plots.
                                                             (line 1195)
* semilogyerr <5>:                       Two-Dimensional Plots.
                                                             (line 1196)
* semilogyerr <6>:                       Two-Dimensional Plots.
                                                             (line 1197)
* semilogyerr <7>:                       Two-Dimensional Plots.
                                                             (line 1198)
* semilogyerr <8>:                       Two-Dimensional Plots.
                                                             (line 1199)
* semilogyerr <9>:                       Two-Dimensional Plots.
                                                             (line 1200)
* set:                                   Graphics Objects.   (line  391)
* set <1>:                               Graphics Objects.   (line  392)
* set <2>:                               Graphics Objects.   (line  393)
* setappdata:                            Application-defined Data.
                                                             (line   10)
* setaudio:                              Audio Processing.   (line   99)
* setaudio <1>:                          Audio Processing.   (line  100)
* setaudio <2>:                          Audio Processing.   (line  101)
* setdiff:                               Set Operations.     (line   89)
* setdiff <1>:                           Set Operations.     (line   90)
* setdiff <2>:                           Set Operations.     (line   91)
* setenv:                                Environment Variables.
                                                             (line   14)
* setfield:                              Manipulating Structures.
                                                             (line   43)
* setfield <1>:                          Manipulating Structures.
                                                             (line   44)
* setgrent:                              Group Database Functions.
                                                             (line   38)
* setpref:                               User-Defined Preferences.
                                                             (line   29)
* setpwent:                              Password Database Functions.
                                                             (line   48)
* setxor:                                Set Operations.     (line  106)
* setxor <1>:                            Set Operations.     (line  107)
* setxor <2>:                            Set Operations.     (line  108)
* shading:                               Three-Dimensional Plots.
                                                             (line  878)
* shading <1>:                           Three-Dimensional Plots.
                                                             (line  879)
* shg:                                   Manipulation of Plot Windows.
                                                             (line  198)
* shift:                                 Rearranging Matrices.
                                                             (line  261)
* shift <1>:                             Rearranging Matrices.
                                                             (line  262)
* shiftdim:                              Rearranging Matrices.
                                                             (line  269)
* shiftdim <1>:                          Rearranging Matrices.
                                                             (line  270)
* shrinkfaces:                           Three-Dimensional Plots.
                                                             (line  592)
* shrinkfaces <1>:                       Three-Dimensional Plots.
                                                             (line  593)
* shrinkfaces <2>:                       Three-Dimensional Plots.
                                                             (line  594)
* shrinkfaces <3>:                       Three-Dimensional Plots.
                                                             (line  595)
* shrinkfaces <4>:                       Three-Dimensional Plots.
                                                             (line  596)
* SIG:                                   Controlling Subprocesses.
                                                             (line  470)
* sighup_dumps_octave_core:              Saving Data on Unexpected Exits.
                                                             (line   28)
* sighup_dumps_octave_core <1>:          Saving Data on Unexpected Exits.
                                                             (line   29)
* sighup_dumps_octave_core <2>:          Saving Data on Unexpected Exits.
                                                             (line   30)
* sign:                                  Utility Functions.  (line  431)
* signbit:                               Utility Functions.  (line  446)
* sign_test:                             Tests.              (line  327)
* sigterm_dumps_octave_core:             Saving Data on Unexpected Exits.
                                                             (line   40)
* sigterm_dumps_octave_core <1>:         Saving Data on Unexpected Exits.
                                                             (line   41)
* sigterm_dumps_octave_core <2>:         Saving Data on Unexpected Exits.
                                                             (line   42)
* silent_functions:                      Defining Functions. (line  176)
* silent_functions <1>:                  Defining Functions. (line  177)
* silent_functions <2>:                  Defining Functions. (line  178)
* sin:                                   Trigonometry.       (line   29)
* sinc:                                  Signal Processing.  (line  362)
* sind:                                  Trigonometry.       (line  175)
* sinetone:                              Signal Processing.  (line  619)
* sinewave:                              Signal Processing.  (line  626)
* single:                                Single Precision Data Types.
                                                             (line   11)
* sinh:                                  Trigonometry.       (line   95)
* size:                                  Object Sizes.       (line   68)
* size <1>:                              Object Sizes.       (line   69)
* sizemax:                               Matrices.           (line  114)
* sizeof:                                Object Sizes.       (line  117)
* size_equal:                            Object Sizes.       (line  122)
* skewness:                              Descriptive Statistics.
                                                             (line  190)
* skewness <1>:                          Descriptive Statistics.
                                                             (line  191)
* skewness <2>:                          Descriptive Statistics.
                                                             (line  192)
* sleep:                                 Timing Utilities.   (line  445)
* slice:                                 Three-Dimensional Plots.
                                                             (line  800)
* slice <1>:                             Three-Dimensional Plots.
                                                             (line  801)
* slice <2>:                             Three-Dimensional Plots.
                                                             (line  802)
* slice <3>:                             Three-Dimensional Plots.
                                                             (line  803)
* slice <4>:                             Three-Dimensional Plots.
                                                             (line  804)
* slice <5>:                             Three-Dimensional Plots.
                                                             (line  805)
* slice <6>:                             Three-Dimensional Plots.
                                                             (line  806)
* sombrero:                              Test Plotting Functions.
                                                             (line   10)
* sombrero <1>:                          Test Plotting Functions.
                                                             (line   11)
* sombrero <2>:                          Test Plotting Functions.
                                                             (line   12)
* sombrero <3>:                          Test Plotting Functions.
                                                             (line   13)
* sort:                                  Rearranging Matrices.
                                                             (line  294)
* sort <1>:                              Rearranging Matrices.
                                                             (line  295)
* sort <2>:                              Rearranging Matrices.
                                                             (line  296)
* sort <3>:                              Rearranging Matrices.
                                                             (line  297)
* sortrows:                              Rearranging Matrices.
                                                             (line  349)
* sortrows <1>:                          Rearranging Matrices.
                                                             (line  350)
* source:                                Script Files.       (line   90)
* spalloc:                               Creating Sparse Matrices.
                                                             (line  194)
* sparse:                                Creating Sparse Matrices.
                                                             (line  227)
* sparse <1>:                            Creating Sparse Matrices.
                                                             (line  228)
* sparse <2>:                            Creating Sparse Matrices.
                                                             (line  229)
* sparse <3>:                            Creating Sparse Matrices.
                                                             (line  230)
* sparse <4>:                            Creating Sparse Matrices.
                                                             (line  231)
* sparse <5>:                            Creating Sparse Matrices.
                                                             (line  232)
* sparse_auto_mutate:                    Return Types of Operators and Functions.
                                                             (line   52)
* sparse_auto_mutate <1>:                Return Types of Operators and Functions.
                                                             (line   53)
* sparse_auto_mutate <2>:                Return Types of Operators and Functions.
                                                             (line   54)
* spaugment:                             Sparse Linear Algebra.
                                                             (line  314)
* spconvert:                             Creating Sparse Matrices.
                                                             (line  290)
* spdiags:                               Creating Sparse Matrices.
                                                             (line   47)
* spdiags <1>:                           Creating Sparse Matrices.
                                                             (line   48)
* spdiags <2>:                           Creating Sparse Matrices.
                                                             (line   49)
* spdiags <3>:                           Creating Sparse Matrices.
                                                             (line   50)
* spearman:                              Correlation and Regression Analysis.
                                                             (line   59)
* spearman <1>:                          Correlation and Regression Analysis.
                                                             (line   60)
* spectral_adf:                          Signal Processing.  (line  632)
* spectral_adf <1>:                      Signal Processing.  (line  633)
* spectral_adf <2>:                      Signal Processing.  (line  634)
* spectral_xdf:                          Signal Processing.  (line  646)
* spectral_xdf <1>:                      Signal Processing.  (line  647)
* spectral_xdf <2>:                      Signal Processing.  (line  648)
* specular:                              Three-Dimensional Plots.
                                                             (line  642)
* specular <1>:                          Three-Dimensional Plots.
                                                             (line  643)
* speed:                                 Demonstration Functions.
                                                             (line  104)
* speed <1>:                             Demonstration Functions.
                                                             (line  105)
* spencer:                               Signal Processing.  (line  660)
* speye:                                 Creating Sparse Matrices.
                                                             (line   73)
* speye <1>:                             Creating Sparse Matrices.
                                                             (line   74)
* speye <2>:                             Creating Sparse Matrices.
                                                             (line   75)
* spfun:                                 Function Application.
                                                             (line  103)
* sph2cart:                              Coordinate Transformations.
                                                             (line   66)
* sph2cart <1>:                          Coordinate Transformations.
                                                             (line   67)
* sph2cart <2>:                          Coordinate Transformations.
                                                             (line   68)
* sphere:                                Three-dimensional Geometric Shapes.
                                                             (line   36)
* sphere <1>:                            Three-dimensional Geometric Shapes.
                                                             (line   37)
* sphere <2>:                            Three-dimensional Geometric Shapes.
                                                             (line   38)
* sphere <3>:                            Three-dimensional Geometric Shapes.
                                                             (line   39)
* spinmap:                               Representing Images.
                                                             (line  392)
* spinmap <1>:                           Representing Images.
                                                             (line  393)
* spinmap <2>:                           Representing Images.
                                                             (line  394)
* spinmap <3>:                           Representing Images.
                                                             (line  395)
* spline:                                One-dimensional Interpolation.
                                                             (line  154)
* spline <1>:                            One-dimensional Interpolation.
                                                             (line  155)
* splinefit:                             Polynomial Interpolation.
                                                             (line   68)
* splinefit <1>:                         Polynomial Interpolation.
                                                             (line   69)
* splinefit <2>:                         Polynomial Interpolation.
                                                             (line   70)
* splinefit <3>:                         Polynomial Interpolation.
                                                             (line   71)
* splinefit <4>:                         Polynomial Interpolation.
                                                             (line   72)
* splinefit <5>:                         Polynomial Interpolation.
                                                             (line   73)
* splinefit <6>:                         Polynomial Interpolation.
                                                             (line   74)
* split_long_rows:                       Matrices.           (line  165)
* split_long_rows <1>:                   Matrices.           (line  166)
* split_long_rows <2>:                   Matrices.           (line  167)
* spones:                                Creating Sparse Matrices.
                                                             (line   88)
* spparms:                               Sparse Linear Algebra.
                                                             (line  181)
* spparms <1>:                           Sparse Linear Algebra.
                                                             (line  182)
* spparms <2>:                           Sparse Linear Algebra.
                                                             (line  183)
* spparms <3>:                           Sparse Linear Algebra.
                                                             (line  184)
* spparms <4>:                           Sparse Linear Algebra.
                                                             (line  185)
* spparms <5>:                           Sparse Linear Algebra.
                                                             (line  186)
* spparms <6>:                           Sparse Linear Algebra.
                                                             (line  187)
* spparms <7>:                           Sparse Linear Algebra.
                                                             (line  188)
* sprand:                                Creating Sparse Matrices.
                                                             (line   96)
* sprand <1>:                            Creating Sparse Matrices.
                                                             (line   97)
* sprandn:                               Creating Sparse Matrices.
                                                             (line  108)
* sprandn <1>:                           Creating Sparse Matrices.
                                                             (line  109)
* sprandsym:                             Creating Sparse Matrices.
                                                             (line  121)
* sprandsym <1>:                         Creating Sparse Matrices.
                                                             (line  122)
* sprank:                                Sparse Linear Algebra.
                                                             (line  252)
* spring:                                Representing Images.
                                                             (line  313)
* spring <1>:                            Representing Images.
                                                             (line  314)
* sprintf:                               Formatted Output.   (line   33)
* spstats:                               Information.        (line   49)
* spstats <1>:                           Information.        (line   50)
* spy:                                   Information.        (line  124)
* spy <1>:                               Information.        (line  125)
* spy <2>:                               Information.        (line  126)
* sqp:                                   Nonlinear Programming.
                                                             (line    9)
* sqp <1>:                               Nonlinear Programming.
                                                             (line   10)
* sqp <2>:                               Nonlinear Programming.
                                                             (line   11)
* sqp <3>:                               Nonlinear Programming.
                                                             (line   12)
* sqp <4>:                               Nonlinear Programming.
                                                             (line   13)
* sqp <5>:                               Nonlinear Programming.
                                                             (line   14)
* sqrt:                                  Exponents and Logarithms.
                                                             (line   77)
* sqrtm:                                 Functions of a Matrix.
                                                             (line   43)
* sqrtm <1>:                             Functions of a Matrix.
                                                             (line   44)
* squeeze:                               Object Sizes.       (line  130)
* sscanf:                                Formatted Input.    (line   70)
* sscanf <1>:                            Formatted Input.    (line   72)
* stairs:                                Two-Dimensional Plots.
                                                             (line  535)
* stairs <1>:                            Two-Dimensional Plots.
                                                             (line  536)
* stairs <2>:                            Two-Dimensional Plots.
                                                             (line  537)
* stairs <3>:                            Two-Dimensional Plots.
                                                             (line  538)
* stairs <4>:                            Two-Dimensional Plots.
                                                             (line  539)
* stairs <5>:                            Two-Dimensional Plots.
                                                             (line  540)
* stairs <6>:                            Two-Dimensional Plots.
                                                             (line  541)
* stat:                                  Filesystem Utilities.
                                                             (line  161)
* stat <1>:                              Filesystem Utilities.
                                                             (line  162)
* statistics:                            Descriptive Statistics.
                                                             (line  395)
* statistics <1>:                        Descriptive Statistics.
                                                             (line  396)
* std:                                   Descriptive Statistics.
                                                             (line  125)
* std <1>:                               Descriptive Statistics.
                                                             (line  126)
* std <2>:                               Descriptive Statistics.
                                                             (line  127)
* stderr:                                C-Style I/O Functions.
                                                             (line   33)
* stdin:                                 C-Style I/O Functions.
                                                             (line   19)
* stdnormal_cdf:                         Distributions.      (line  381)
* stdnormal_inv:                         Distributions.      (line  386)
* stdnormal_pdf:                         Distributions.      (line  376)
* stdnormal_rnd:                         Random Number Generation.
                                                             (line  329)
* stdnormal_rnd <1>:                     Random Number Generation.
                                                             (line  330)
* stdnormal_rnd <2>:                     Random Number Generation.
                                                             (line  331)
* stdout:                                C-Style I/O Functions.
                                                             (line   26)
* stem:                                  Two-Dimensional Plots.
                                                             (line  573)
* stem <1>:                              Two-Dimensional Plots.
                                                             (line  574)
* stem <2>:                              Two-Dimensional Plots.
                                                             (line  575)
* stem <3>:                              Two-Dimensional Plots.
                                                             (line  576)
* stem <4>:                              Two-Dimensional Plots.
                                                             (line  577)
* stem <5>:                              Two-Dimensional Plots.
                                                             (line  578)
* stem <6>:                              Two-Dimensional Plots.
                                                             (line  579)
* stem3:                                 Two-Dimensional Plots.
                                                             (line  662)
* stem3 <1>:                             Two-Dimensional Plots.
                                                             (line  663)
* stem3 <2>:                             Two-Dimensional Plots.
                                                             (line  664)
* stem3 <3>:                             Two-Dimensional Plots.
                                                             (line  665)
* stem3 <4>:                             Two-Dimensional Plots.
                                                             (line  666)
* stem3 <5>:                             Two-Dimensional Plots.
                                                             (line  667)
* stemleaf:                              Two-Dimensional Plots.
                                                             (line  469)
* stemleaf <1>:                          Two-Dimensional Plots.
                                                             (line  470)
* stemleaf <2>:                          Two-Dimensional Plots.
                                                             (line  471)
* stft:                                  Signal Processing.  (line  663)
* stft <1>:                              Signal Processing.  (line  664)
* stft <2>:                              Signal Processing.  (line  665)
* stft <3>:                              Signal Processing.  (line  666)
* stft <4>:                              Signal Processing.  (line  667)
* stft <5>:                              Signal Processing.  (line  668)
* str2double:                            String Conversions. (line  181)
* str2func:                              Function Handles.   (line   88)
* str2func <1>:                          Function Handles.   (line   89)
* str2num:                               String Conversions. (line  245)
* str2num <1>:                           String Conversions. (line  246)
* strcat:                                Concatenating Strings.
                                                             (line  151)
* strchr:                                Manipulating Strings.
                                                             (line   75)
* strchr <1>:                            Manipulating Strings.
                                                             (line   76)
* strchr <2>:                            Manipulating Strings.
                                                             (line   77)
* strchr <3>:                            Manipulating Strings.
                                                             (line   78)
* strcmp:                                Comparing Strings.  (line   20)
* strcmpi:                               Comparing Strings.  (line   60)
* strfind:                               Manipulating Strings.
                                                             (line  118)
* strfind <1>:                           Manipulating Strings.
                                                             (line  119)
* strfind <2>:                           Manipulating Strings.
                                                             (line  120)
* strftime:                              Timing Utilities.   (line  165)
* string_fill_char:                      Character Arrays.   (line   51)
* string_fill_char <1>:                  Character Arrays.   (line   52)
* string_fill_char <2>:                  Character Arrays.   (line   53)
* strjoin:                               Manipulating Strings.
                                                             (line  156)
* strjoin <1>:                           Manipulating Strings.
                                                             (line  157)
* strjust:                               String Conversions. (line  224)
* strjust <1>:                           String Conversions. (line  225)
* strmatch:                              Manipulating Strings.
                                                             (line  176)
* strmatch <1>:                          Manipulating Strings.
                                                             (line  177)
* strncmp:                               Comparing Strings.  (line   37)
* strncmpi:                              Comparing Strings.  (line   79)
* strptime:                              Timing Utilities.   (line  306)
* strread:                               Manipulating Strings.
                                                             (line  360)
* strread <1>:                           Manipulating Strings.
                                                             (line  361)
* strread <2>:                           Manipulating Strings.
                                                             (line  362)
* strread <3>:                           Manipulating Strings.
                                                             (line  363)
* strread <4>:                           Manipulating Strings.
                                                             (line  364)
* strrep:                                Manipulating Strings.
                                                             (line  498)
* strrep <1>:                            Manipulating Strings.
                                                             (line  499)
* strrep <2>:                            Manipulating Strings.
                                                             (line  500)
* strsplit:                              Manipulating Strings.
                                                             (line  228)
* strsplit <1>:                          Manipulating Strings.
                                                             (line  229)
* strsplit <2>:                          Manipulating Strings.
                                                             (line  230)
* strsplit <3>:                          Manipulating Strings.
                                                             (line  231)
* strtok:                                Manipulating Strings.
                                                             (line  204)
* strtok <1>:                            Manipulating Strings.
                                                             (line  205)
* strtrim:                               Manipulating Strings.
                                                             (line   35)
* strtrunc:                              Manipulating Strings.
                                                             (line   49)
* struct:                                Creating Structures.
                                                             (line  104)
* struct <1>:                            Creating Structures.
                                                             (line  105)
* struct <2>:                            Creating Structures.
                                                             (line  106)
* struct2cell:                           Processing Data in Structures.
                                                             (line   14)
* struct2hdl:                            Graphics Objects.   (line  482)
* struct2hdl <1>:                        Graphics Objects.   (line  483)
* struct2hdl <2>:                        Graphics Objects.   (line  484)
* structfun:                             Function Application.
                                                             (line  223)
* structfun <1>:                         Function Application.
                                                             (line  224)
* structfun <2>:                         Function Application.
                                                             (line  225)
* structfun <3>:                         Function Application.
                                                             (line  226)
* struct_levels_to_print:                Basic Usage and Examples.
                                                             (line   96)
* struct_levels_to_print <1>:            Basic Usage and Examples.
                                                             (line   97)
* struct_levels_to_print <2>:            Basic Usage and Examples.
                                                             (line   98)
* strvcat:                               Concatenating Strings.
                                                             (line  121)
* strvcat <1>:                           Concatenating Strings.
                                                             (line  122)
* strvcat <2>:                           Concatenating Strings.
                                                             (line  123)
* strvcat <3>:                           Concatenating Strings.
                                                             (line  124)
* sub2ind:                               Advanced Indexing.  (line  132)
* sub2ind <1>:                           Advanced Indexing.  (line  133)
* subplot:                               Multiple Plots on One Page.
                                                             (line   22)
* subplot <1>:                           Multiple Plots on One Page.
                                                             (line   23)
* subplot <2>:                           Multiple Plots on One Page.
                                                             (line   24)
* subplot <3>:                           Multiple Plots on One Page.
                                                             (line   25)
* subplot <4>:                           Multiple Plots on One Page.
                                                             (line   26)
* subplot <5>:                           Multiple Plots on One Page.
                                                             (line   27)
* subplot <6>:                           Multiple Plots on One Page.
                                                             (line   28)
* subplot <7>:                           Multiple Plots on One Page.
                                                             (line   29)
* subsasgn:                              Defining Indexing And Indexed Assignment.
                                                             (line   92)
* subsindex:                             Defining Indexing And Indexed Assignment.
                                                             (line  165)
* subspace:                              Matrix Factorizations.
                                                             (line  548)
* subsref:                               Defining Indexing And Indexed Assignment.
                                                             (line   14)
* substr:                                Manipulating Strings.
                                                             (line  519)
* substr <1>:                            Manipulating Strings.
                                                             (line  520)
* substruct:                             Manipulating Structures.
                                                             (line  188)
* sum:                                   Sums and Products.  (line    6)
* sum <1>:                               Sums and Products.  (line    7)
* sum <2>:                               Sums and Products.  (line    8)
* sum <3>:                               Sums and Products.  (line    9)
* sum <4>:                               Sums and Products.  (line   10)
* summer:                                Representing Images.
                                                             (line  321)
* summer <1>:                            Representing Images.
                                                             (line  322)
* sumsq:                                 Sums and Products.  (line   61)
* sumsq <1>:                             Sums and Products.  (line   62)
* superiorto:                            Precedence of Objects.
                                                             (line   13)
* suppress_verbose_help_message:         Getting Help.       (line  214)
* suppress_verbose_help_message <1>:     Getting Help.       (line  215)
* suppress_verbose_help_message <2>:     Getting Help.       (line  216)
* surf:                                  Three-Dimensional Plots.
                                                             (line  184)
* surf <1>:                              Three-Dimensional Plots.
                                                             (line  185)
* surf <2>:                              Three-Dimensional Plots.
                                                             (line  186)
* surf <3>:                              Three-Dimensional Plots.
                                                             (line  187)
* surf <4>:                              Three-Dimensional Plots.
                                                             (line  188)
* surf <5>:                              Three-Dimensional Plots.
                                                             (line  189)
* surface:                               Graphics Objects.   (line  186)
* surface <1>:                           Graphics Objects.   (line  187)
* surface <2>:                           Graphics Objects.   (line  188)
* surface <3>:                           Graphics Objects.   (line  189)
* surface <4>:                           Graphics Objects.   (line  190)
* surface <5>:                           Graphics Objects.   (line  191)
* surface <6>:                           Graphics Objects.   (line  192)
* surfc:                                 Three-Dimensional Plots.
                                                             (line  227)
* surfc <1>:                             Three-Dimensional Plots.
                                                             (line  228)
* surfc <2>:                             Three-Dimensional Plots.
                                                             (line  229)
* surfc <3>:                             Three-Dimensional Plots.
                                                             (line  230)
* surfc <4>:                             Three-Dimensional Plots.
                                                             (line  231)
* surfc <5>:                             Three-Dimensional Plots.
                                                             (line  232)
* surfl:                                 Three-Dimensional Plots.
                                                             (line  270)
* surfl <1>:                             Three-Dimensional Plots.
                                                             (line  271)
* surfl <2>:                             Three-Dimensional Plots.
                                                             (line  272)
* surfl <3>:                             Three-Dimensional Plots.
                                                             (line  273)
* surfl <4>:                             Three-Dimensional Plots.
                                                             (line  274)
* surfl <5>:                             Three-Dimensional Plots.
                                                             (line  275)
* surfl <6>:                             Three-Dimensional Plots.
                                                             (line  276)
* surfl <7>:                             Three-Dimensional Plots.
                                                             (line  277)
* surfnorm:                              Three-Dimensional Plots.
                                                             (line  327)
* surfnorm <1>:                          Three-Dimensional Plots.
                                                             (line  328)
* surfnorm <2>:                          Three-Dimensional Plots.
                                                             (line  329)
* surfnorm <3>:                          Three-Dimensional Plots.
                                                             (line  330)
* svd:                                   Matrix Factorizations.
                                                             (line  552)
* svd <1>:                               Matrix Factorizations.
                                                             (line  553)
* svd <2>:                               Matrix Factorizations.
                                                             (line  554)
* svds:                                  Sparse Linear Algebra.
                                                             (line  513)
* svds <1>:                              Sparse Linear Algebra.
                                                             (line  514)
* svds <2>:                              Sparse Linear Algebra.
                                                             (line  515)
* svds <3>:                              Sparse Linear Algebra.
                                                             (line  516)
* svds <4>:                              Sparse Linear Algebra.
                                                             (line  517)
* svds <5>:                              Sparse Linear Algebra.
                                                             (line  518)
* svd_driver:                            Matrix Factorizations.
                                                             (line  605)
* svd_driver <1>:                        Matrix Factorizations.
                                                             (line  606)
* svd_driver <2>:                        Matrix Factorizations.
                                                             (line  607)
* swapbytes:                             Built-in Data Types.
                                                             (line   91)
* syl:                                   Functions of a Matrix.
                                                             (line   84)
* symamd:                                Mathematical Considerations.
                                                             (line  380)
* symamd <1>:                            Mathematical Considerations.
                                                             (line  381)
* symamd <2>:                            Mathematical Considerations.
                                                             (line  382)
* symamd <3>:                            Mathematical Considerations.
                                                             (line  383)
* symbfact:                              Sparse Linear Algebra.
                                                             (line  263)
* symbfact <1>:                          Sparse Linear Algebra.
                                                             (line  264)
* symbfact <2>:                          Sparse Linear Algebra.
                                                             (line  265)
* symlink:                               Filesystem Utilities.
                                                             (line   79)
* symlink <1>:                           Filesystem Utilities.
                                                             (line   80)
* symrcm:                                Mathematical Considerations.
                                                             (line  443)
* symvar:                                Inline Functions.   (line   56)
* synthesis:                             Signal Processing.  (line  700)
* system:                                Controlling Subprocesses.
                                                             (line   16)
* system <1>:                            Controlling Subprocesses.
                                                             (line   17)
* system <2>:                            Controlling Subprocesses.
                                                             (line   18)
* system <3>:                            Controlling Subprocesses.
                                                             (line   19)
* S_ISBLK:                               Filesystem Utilities.
                                                             (line  252)
* S_ISCHR:                               Filesystem Utilities.
                                                             (line  259)
* S_ISDIR:                               Filesystem Utilities.
                                                             (line  266)
* S_ISFIFO:                              Filesystem Utilities.
                                                             (line  273)
* S_ISLNK:                               Filesystem Utilities.
                                                             (line  280)
* S_ISREG:                               Filesystem Utilities.
                                                             (line  287)
* S_ISSOCK:                              Filesystem Utilities.
                                                             (line  294)
* table:                                 Basic Statistical Functions.
                                                             (line  163)
* table <1>:                             Basic Statistical Functions.
                                                             (line  164)
* tan:                                   Trigonometry.       (line   41)
* tand:                                  Trigonometry.       (line  187)
* tanh:                                  Trigonometry.       (line  107)
* tar:                                   File Archiving Utilities.
                                                             (line   35)
* tar <1>:                               File Archiving Utilities.
                                                             (line   36)
* tcdf:                                  Distributions.      (line  396)
* tempdir:                               Filesystem Utilities.
                                                             (line  541)
* tempname:                              Filesystem Utilities.
                                                             (line  544)
* tempname <1>:                          Filesystem Utilities.
                                                             (line  545)
* tempname <2>:                          Filesystem Utilities.
                                                             (line  546)
* terminal_size:                         Terminal Output.    (line   62)
* test:                                  Test Functions.     (line    6)
* test <1>:                              Test Functions.     (line    7)
* test <2>:                              Test Functions.     (line    8)
* test <3>:                              Test Functions.     (line    9)
* test <4>:                              Test Functions.     (line   10)
* test <5>:                              Test Functions.     (line   11)
* test <6>:                              Test Functions.     (line   12)
* tetramesh:                             Plotting the Triangulation.
                                                             (line  100)
* tetramesh <1>:                         Plotting the Triangulation.
                                                             (line  101)
* tetramesh <2>:                         Plotting the Triangulation.
                                                             (line  102)
* tetramesh <3>:                         Plotting the Triangulation.
                                                             (line  103)
* texi_macros_file:                      Getting Help.       (line  153)
* texi_macros_file <1>:                  Getting Help.       (line  154)
* texi_macros_file <2>:                  Getting Help.       (line  155)
* text:                                  Plot Annotations.   (line  134)
* text <1>:                              Plot Annotations.   (line  135)
* text <2>:                              Plot Annotations.   (line  136)
* text <3>:                              Plot Annotations.   (line  137)
* textread:                              Simple File I/O.    (line  430)
* textread <1>:                          Simple File I/O.    (line  431)
* textread <2>:                          Simple File I/O.    (line  432)
* textread <3>:                          Simple File I/O.    (line  433)
* textread <4>:                          Simple File I/O.    (line  435)
* textscan:                              Simple File I/O.    (line  468)
* textscan <1>:                          Simple File I/O.    (line  469)
* textscan <2>:                          Simple File I/O.    (line  470)
* textscan <3>:                          Simple File I/O.    (line  471)
* textscan <4>:                          Simple File I/O.    (line  472)
* textscan <5>:                          Simple File I/O.    (line  473)
* tic:                                   Timing Utilities.   (line  396)
* tic <1>:                               Timing Utilities.   (line  397)
* tilde_expand:                          Filesystem Utilities.
                                                             (line  491)
* time:                                  Timing Utilities.   (line   48)
* times:                                 Arithmetic Ops.     (line  210)
* times <1>:                             Arithmetic Ops.     (line  211)
* tinv:                                  Distributions.      (line  401)
* title:                                 Plot Annotations.   (line   21)
* title <1>:                             Plot Annotations.   (line   22)
* title <2>:                             Plot Annotations.   (line   23)
* title <3>:                             Plot Annotations.   (line   24)
* tmpfile:                               Temporary Files.    (line   31)
* tmpnam:                                Temporary Files.    (line   44)
* tmpnam <1>:                            Temporary Files.    (line   45)
* tmpnam <2>:                            Temporary Files.    (line   46)
* toascii:                               String Conversions. (line  269)
* toc:                                   Timing Utilities.   (line  398)
* toc <1>:                               Timing Utilities.   (line  399)
* toc <2>:                               Timing Utilities.   (line  400)
* toeplitz:                              Famous Matrices.    (line  405)
* toeplitz <1>:                          Famous Matrices.    (line  406)
* tolower:                               String Conversions. (line  278)
* toupper:                               String Conversions. (line  289)
* tpdf:                                  Distributions.      (line  391)
* trace:                                 Basic Matrix Functions.
                                                             (line  397)
* transpose:                             Arithmetic Ops.     (line  224)
* trapz:                                 Functions of One Variable.
                                                             (line  438)
* trapz <1>:                             Functions of One Variable.
                                                             (line  439)
* trapz <2>:                             Functions of One Variable.
                                                             (line  440)
* treelayout:                            Information.        (line  181)
* treelayout <1>:                        Information.        (line  182)
* treeplot:                              Information.        (line  172)
* treeplot <1>:                          Information.        (line  173)
* tril:                                  Rearranging Matrices.
                                                             (line  393)
* tril <1>:                              Rearranging Matrices.
                                                             (line  394)
* tril <2>:                              Rearranging Matrices.
                                                             (line  395)
* trimesh:                               Plotting the Triangulation.
                                                             (line   29)
* trimesh <1>:                           Plotting the Triangulation.
                                                             (line   30)
* trimesh <2>:                           Plotting the Triangulation.
                                                             (line   31)
* trimesh <3>:                           Plotting the Triangulation.
                                                             (line   32)
* trimesh <4>:                           Plotting the Triangulation.
                                                             (line   33)
* triplequad:                            Functions of Multiple Variables.
                                                             (line   72)
* triplequad <1>:                        Functions of Multiple Variables.
                                                             (line   73)
* triplequad <2>:                        Functions of Multiple Variables.
                                                             (line   74)
* triplequad <3>:                        Functions of Multiple Variables.
                                                             (line   75)
* triplot:                               Plotting the Triangulation.
                                                             (line   10)
* triplot <1>:                           Plotting the Triangulation.
                                                             (line   11)
* triplot <2>:                           Plotting the Triangulation.
                                                             (line   12)
* trisurf:                               Plotting the Triangulation.
                                                             (line   66)
* trisurf <1>:                           Plotting the Triangulation.
                                                             (line   67)
* trisurf <2>:                           Plotting the Triangulation.
                                                             (line   68)
* trisurf <3>:                           Plotting the Triangulation.
                                                             (line   69)
* triu:                                  Rearranging Matrices.
                                                             (line  396)
* triu <1>:                              Rearranging Matrices.
                                                             (line  397)
* triu <2>:                              Rearranging Matrices.
                                                             (line  398)
* trnd:                                  Random Number Generation.
                                                             (line  342)
* trnd <1>:                              Random Number Generation.
                                                             (line  343)
* trnd <2>:                              Random Number Generation.
                                                             (line  344)
* trnd <3>:                              Random Number Generation.
                                                             (line  345)
* true:                                  Logical Values.     (line   49)
* true <1>:                              Logical Values.     (line   50)
* true <2>:                              Logical Values.     (line   51)
* tsearch:                               Identifying Points in Triangulation.
                                                             (line   55)
* tsearchn:                              Identifying Points in Triangulation.
                                                             (line   63)
* type:                                  Status of Variables.
                                                             (line  297)
* type <1>:                              Status of Variables.
                                                             (line  298)
* type <2>:                              Status of Variables.
                                                             (line  299)
* typecast:                              Built-in Data Types.
                                                             (line   51)
* typeinfo:                              Data Types.         (line   18)
* typeinfo <1>:                          Data Types.         (line   19)
* t_test:                                Tests.              (line  346)
* t_test_2:                              Tests.              (line  364)
* t_test_regression:                     Tests.              (line  383)
* uigetdir:                              I/O Dialogs.        (line   10)
* uigetdir <1>:                          I/O Dialogs.        (line   11)
* uigetdir <2>:                          I/O Dialogs.        (line   12)
* uigetfile:                             I/O Dialogs.        (line   20)
* uigetfile <1>:                         I/O Dialogs.        (line   21)
* uigetfile <2>:                         I/O Dialogs.        (line   22)
* uigetfile <3>:                         I/O Dialogs.        (line   23)
* uigetfile <4>:                         I/O Dialogs.        (line   24)
* uigetfile <5>:                         I/O Dialogs.        (line   25)
* uimenu:                                Interacting with Plots.
                                                             (line   59)
* uimenu <1>:                            Interacting with Plots.
                                                             (line   60)
* uint16:                                Integer Data Types. (line   59)
* uint32:                                Integer Data Types. (line   73)
* uint64:                                Integer Data Types. (line   87)
* uint8:                                 Integer Data Types. (line   45)
* uiputfile:                             I/O Dialogs.        (line   63)
* uiputfile <1>:                         I/O Dialogs.        (line   64)
* uiputfile <2>:                         I/O Dialogs.        (line   65)
* uiputfile <3>:                         I/O Dialogs.        (line   66)
* uiresume:                              GUI Utility Functions.
                                                             (line   70)
* uiwait:                                GUI Utility Functions.
                                                             (line   51)
* uiwait <1>:                            GUI Utility Functions.
                                                             (line   52)
* uiwait <2>:                            GUI Utility Functions.
                                                             (line   53)
* umask:                                 Filesystem Utilities.
                                                             (line  155)
* uminus:                                Arithmetic Ops.     (line  229)
* uname:                                 System Information. (line   29)
* undo_string_escapes:                   String Conversions. (line  303)
* unidcdf:                               Distributions.      (line  416)
* unidinv:                               Distributions.      (line  421)
* unidpdf:                               Distributions.      (line  407)
* unidrnd:                               Random Number Generation.
                                                             (line  359)
* unidrnd <1>:                           Random Number Generation.
                                                             (line  360)
* unidrnd <2>:                           Random Number Generation.
                                                             (line  361)
* unidrnd <3>:                           Random Number Generation.
                                                             (line  362)
* unifcdf:                               Distributions.      (line  433)
* unifcdf <1>:                           Distributions.      (line  434)
* unifinv:                               Distributions.      (line  440)
* unifinv <1>:                           Distributions.      (line  441)
* unifpdf:                               Distributions.      (line  426)
* unifpdf <1>:                           Distributions.      (line  427)
* unifrnd:                               Random Number Generation.
                                                             (line  377)
* unifrnd <1>:                           Random Number Generation.
                                                             (line  378)
* unifrnd <2>:                           Random Number Generation.
                                                             (line  379)
* unifrnd <3>:                           Random Number Generation.
                                                             (line  380)
* union:                                 Set Operations.     (line   51)
* union <1>:                             Set Operations.     (line   52)
* union <2>:                             Set Operations.     (line   53)
* unique:                                Sets.               (line   10)
* unique <1>:                            Sets.               (line   11)
* unique <2>:                            Sets.               (line   12)
* unique <3>:                            Sets.               (line   13)
* unique <4>:                            Sets.               (line   14)
* unix:                                  Controlling Subprocesses.
                                                             (line   56)
* unix <1>:                              Controlling Subprocesses.
                                                             (line   57)
* unix <2>:                              Controlling Subprocesses.
                                                             (line   58)
* unix <3>:                              Controlling Subprocesses.
                                                             (line   59)
* unlink:                                Filesystem Utilities.
                                                             (line   63)
* unmkpp:                                Polynomial Interpolation.
                                                             (line  301)
* unpack:                                File Archiving Utilities.
                                                             (line   77)
* unpack <1>:                            File Archiving Utilities.
                                                             (line   78)
* unpack <2>:                            File Archiving Utilities.
                                                             (line   79)
* untabify:                              Manipulating Strings.
                                                             (line  804)
* untabify <1>:                          Manipulating Strings.
                                                             (line  805)
* untabify <2>:                          Manipulating Strings.
                                                             (line  806)
* untar:                                 File Archiving Utilities.
                                                             (line   49)
* untar <1>:                             File Archiving Utilities.
                                                             (line   50)
* unwrap:                                Signal Processing.  (line  365)
* unwrap <1>:                            Signal Processing.  (line  366)
* unwrap <2>:                            Signal Processing.  (line  367)
* unzip:                                 File Archiving Utilities.
                                                             (line   68)
* unzip <1>:                             File Archiving Utilities.
                                                             (line   69)
* uplus:                                 Arithmetic Ops.     (line  234)
* upper:                                 String Conversions. (line  290)
* urlread:                               URL Manipulation.   (line    6)
* urlread <1>:                           URL Manipulation.   (line    7)
* urlread <2>:                           URL Manipulation.   (line    8)
* urlread <3>:                           URL Manipulation.   (line    9)
* urlwrite:                              URL Manipulation.   (line   35)
* urlwrite <1>:                          URL Manipulation.   (line   36)
* urlwrite <2>:                          URL Manipulation.   (line   37)
* urlwrite <3>:                          URL Manipulation.   (line   38)
* usage:                                 Raising Errors.     (line  134)
* USED:                                  GUI Utility Functions.
                                                             (line   10)
* usejava:                               Java Interface Functions.
                                                             (line  218)
* usleep:                                Timing Utilities.   (line  451)
* u_test:                                Tests.              (line  403)
* validatestring:                        Comparing Strings.  (line   99)
* validatestring <1>:                    Comparing Strings.  (line  100)
* validatestring <2>:                    Comparing Strings.  (line  101)
* validatestring <3>:                    Comparing Strings.  (line  103)
* vander:                                Famous Matrices.    (line  425)
* vander <1>:                            Famous Matrices.    (line  426)
* var:                                   Descriptive Statistics.
                                                             (line  160)
* var <1>:                               Descriptive Statistics.
                                                             (line  161)
* var <2>:                               Descriptive Statistics.
                                                             (line  162)
* var_test:                              Tests.              (line  422)
* vec:                                   Rearranging Matrices.
                                                             (line  435)
* vec <1>:                               Rearranging Matrices.
                                                             (line  436)
* vech:                                  Rearranging Matrices.
                                                             (line  446)
* vectorize:                             Basic Vectorization.
                                                             (line   66)
* ver:                                   System Information. (line  115)
* ver <1>:                               System Information. (line  116)
* ver <2>:                               System Information. (line  117)
* ver <3>:                               System Information. (line  118)
* version:                               System Information. (line  107)
* vertcat:                               Rearranging Matrices.
                                                             (line  145)
* view:                                  Three-Dimensional Plots.
                                                             (line  776)
* view <1>:                              Three-Dimensional Plots.
                                                             (line  777)
* view <2>:                              Three-Dimensional Plots.
                                                             (line  778)
* view <3>:                              Three-Dimensional Plots.
                                                             (line  779)
* view <4>:                              Three-Dimensional Plots.
                                                             (line  780)
* view <5>:                              Three-Dimensional Plots.
                                                             (line  781)
* view <6>:                              Three-Dimensional Plots.
                                                             (line  782)
* voronoi:                               Voronoi Diagrams.   (line   14)
* voronoi <1>:                           Voronoi Diagrams.   (line   15)
* voronoi <2>:                           Voronoi Diagrams.   (line   16)
* voronoi <3>:                           Voronoi Diagrams.   (line   17)
* voronoi <4>:                           Voronoi Diagrams.   (line   18)
* voronoi <5>:                           Voronoi Diagrams.   (line   19)
* voronoin:                              Voronoi Diagrams.   (line   48)
* voronoin <1>:                          Voronoi Diagrams.   (line   49)
* waitbar:                               Progress Bar.       (line    6)
* waitbar <1>:                           Progress Bar.       (line    7)
* waitbar <2>:                           Progress Bar.       (line    8)
* waitbar <3>:                           Progress Bar.       (line    9)
* waitbar <4>:                           Progress Bar.       (line   10)
* waitbar <5>:                           Progress Bar.       (line   11)
* waitfor:                               GUI Utility Functions.
                                                             (line   78)
* waitfor <1>:                           GUI Utility Functions.
                                                             (line   79)
* waitfor <2>:                           GUI Utility Functions.
                                                             (line   80)
* waitfor <3>:                           GUI Utility Functions.
                                                             (line   81)
* waitforbuttonpress:                    Interacting with Plots.
                                                             (line   28)
* waitforbuttonpress <1>:                Interacting with Plots.
                                                             (line   29)
* waitpid:                               Controlling Subprocesses.
                                                             (line  244)
* warndlg:                               Dialog Box Functions.
                                                             (line  187)
* warndlg <1>:                           Dialog Box Functions.
                                                             (line  188)
* warning:                               Issuing Warnings.   (line   33)
* warning <1>:                           Issuing Warnings.   (line   34)
* warning <2>:                           Issuing Warnings.   (line   35)
* warning <3>:                           Issuing Warnings.   (line   36)
* warning <4>:                           Issuing Warnings.   (line   37)
* warning <5>:                           Issuing Warnings.   (line   38)
* warning <6>:                           Issuing Warnings.   (line   39)
* warranty:                              Getting Help.       (line   90)
* waterfall:                             Three-Dimensional Plots.
                                                             (line  944)
* waterfall <1>:                         Three-Dimensional Plots.
                                                             (line  945)
* waterfall <2>:                         Three-Dimensional Plots.
                                                             (line  946)
* waterfall <3>:                         Three-Dimensional Plots.
                                                             (line  947)
* waterfall <4>:                         Three-Dimensional Plots.
                                                             (line  948)
* waterfall <5>:                         Three-Dimensional Plots.
                                                             (line  949)
* wavread:                               Audio Processing.   (line  105)
* wavread <1>:                           Audio Processing.   (line  106)
* wavread <2>:                           Audio Processing.   (line  107)
* wavread <3>:                           Audio Processing.   (line  108)
* wavread <4>:                           Audio Processing.   (line  109)
* wavwrite:                              Audio Processing.   (line  135)
* wavwrite <1>:                          Audio Processing.   (line  136)
* wavwrite <2>:                          Audio Processing.   (line  137)
* wblcdf:                                Distributions.      (line  460)
* wblcdf <1>:                            Distributions.      (line  461)
* wblcdf <2>:                            Distributions.      (line  462)
* wblinv:                                Distributions.      (line  473)
* wblinv <1>:                            Distributions.      (line  474)
* wblinv <2>:                            Distributions.      (line  475)
* wblpdf:                                Distributions.      (line  447)
* wblpdf <1>:                            Distributions.      (line  448)
* wblpdf <2>:                            Distributions.      (line  449)
* wblrnd:                                Random Number Generation.
                                                             (line  394)
* wblrnd <1>:                            Random Number Generation.
                                                             (line  395)
* wblrnd <2>:                            Random Number Generation.
                                                             (line  396)
* wblrnd <3>:                            Random Number Generation.
                                                             (line  397)
* WCONTINUE:                             Controlling Subprocesses.
                                                             (line  288)
* WCOREDUMP:                             Controlling Subprocesses.
                                                             (line  296)
* weekday:                               Timing Utilities.   (line  653)
* weekday <1>:                           Timing Utilities.   (line  654)
* welch_test:                            Tests.              (line  441)
* WEXITSTATUS:                           Controlling Subprocesses.
                                                             (line  309)
* what:                                  Status of Variables.
                                                             (line  317)
* what <1>:                              Status of Variables.
                                                             (line  318)
* what <2>:                              Status of Variables.
                                                             (line  319)
* which:                                 Status of Variables.
                                                             (line  311)
* white:                                 Representing Images.
                                                             (line  329)
* white <1>:                             Representing Images.
                                                             (line  330)
* whitebg:                               Representing Images.
                                                             (line  407)
* whitebg <1>:                           Representing Images.
                                                             (line  408)
* whitebg <2>:                           Representing Images.
                                                             (line  409)
* whitebg <3>:                           Representing Images.
                                                             (line  410)
* who:                                   Status of Variables.
                                                             (line   17)
* who <1>:                               Status of Variables.
                                                             (line   18)
* who <2>:                               Status of Variables.
                                                             (line   19)
* who <3>:                               Status of Variables.
                                                             (line   20)
* whos:                                  Status of Variables.
                                                             (line   50)
* whos <1>:                              Status of Variables.
                                                             (line   51)
* whos <2>:                              Status of Variables.
                                                             (line   52)
* whos <3>:                              Status of Variables.
                                                             (line   53)
* whos_line_format:                      Status of Variables.
                                                             (line  107)
* whos_line_format <1>:                  Status of Variables.
                                                             (line  108)
* whos_line_format <2>:                  Status of Variables.
                                                             (line  109)
* wienrnd:                               Random Number Generation.
                                                             (line  411)
* WIFCONTINUED:                          Controlling Subprocesses.
                                                             (line  320)
* WIFEXITED:                             Controlling Subprocesses.
                                                             (line  352)
* WIFSIGNALED:                           Controlling Subprocesses.
                                                             (line  330)
* WIFSTOPPED:                            Controlling Subprocesses.
                                                             (line  340)
* wilcoxon_test:                         Tests.              (line  460)
* wilkinson:                             Famous Matrices.    (line  442)
* winter:                                Representing Images.
                                                             (line  337)
* winter <1>:                            Representing Images.
                                                             (line  338)
* WNOHANG:                               Controlling Subprocesses.
                                                             (line  362)
* WSTOPSIG:                              Controlling Subprocesses.
                                                             (line  370)
* WTERMSIG:                              Controlling Subprocesses.
                                                             (line  381)
* WUNTRACED:                             Controlling Subprocesses.
                                                             (line  392)
* xlabel:                                Plot Annotations.   (line  157)
* xlabel <1>:                            Plot Annotations.   (line  158)
* xlabel <2>:                            Plot Annotations.   (line  159)
* xlabel <3>:                            Plot Annotations.   (line  160)
* xlim:                                  Axis Configuration. (line  139)
* xlim <1>:                              Axis Configuration. (line  140)
* xlim <2>:                              Axis Configuration. (line  141)
* xlim <3>:                              Axis Configuration. (line  142)
* xlim <4>:                              Axis Configuration. (line  143)
* xlim <5>:                              Axis Configuration. (line  144)
* xor:                                   Finding Elements and Checking Conditions.
                                                             (line   61)
* yes_or_no:                             Terminal Input.     (line   54)
* ylim:                                  Axis Configuration. (line  139)
* yulewalker:                            Signal Processing.  (line  711)
* zeros:                                 Special Utility Matrices.
                                                             (line   65)
* zeros <1>:                             Special Utility Matrices.
                                                             (line   66)
* zeros <2>:                             Special Utility Matrices.
                                                             (line   67)
* zeros <3>:                             Special Utility Matrices.
                                                             (line   68)
* zeros <4>:                             Special Utility Matrices.
                                                             (line   69)
* zip:                                   File Archiving Utilities.
                                                             (line   58)
* zip <1>:                               File Archiving Utilities.
                                                             (line   59)
* zlim:                                  Axis Configuration. (line  139)
* zscore:                                Basic Statistical Functions.
                                                             (line   19)
* zscore <1>:                            Basic Statistical Functions.
                                                             (line   20)
* zscore <2>:                            Basic Statistical Functions.
                                                             (line   21)
* z_test:                                Tests.              (line  481)
* z_test_2:                              Tests.              (line  499)

